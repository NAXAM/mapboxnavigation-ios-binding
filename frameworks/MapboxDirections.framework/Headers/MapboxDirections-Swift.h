#ifndef TARGET_OS_SIMULATOR
#include <TargetConditionals.h>
#endif
#if TARGET_OS_SIMULATOR
#if 0
#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.0.1 effective-4.1.50 (swiftlang-1001.0.82.4 clang-1001.0.46.5)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreLocation;
@import Foundation;
@import ObjectiveC;
#endif

#import <MapboxDirections/MapboxDirections.h>

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="MapboxDirections",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif



/// A <code>CongestionLevel</code> indicates the level of traffic congestion along a road segment relative to the normal flow of traffic along that segment. You can color-code a route line according to the congestion level along each segment of the route.
typedef SWIFT_ENUM_NAMED(NSInteger, MBCongestionLevel, "CongestionLevel", closed) {
/// There is not enough data to determine the level of congestion along the road segment.
  MBCongestionLevelUnknown = 0,
/// The road segment has little or no congestion. Traffic is flowing smoothly.
/// Low congestion levels are conventionally highlighted in green or not highlighted at all.
  MBCongestionLevelLow = 1,
/// The road segment has moderate, stop-and-go congestion. Traffic is flowing but speed is impeded.
/// Moderate congestion levels are conventionally highlighted in yellow.
  MBCongestionLevelModerate = 2,
/// The road segment has heavy, bumper-to-bumper congestion. Traffic is barely moving.
/// Heavy congestion levels are conventionally highlighted in orange.
  MBCongestionLevelHeavy = 3,
/// The road segment has severe congestion. Traffic may be completely stopped.
/// Severe congestion levels are conventionally highlighted in red.
  MBCongestionLevelSevere = 4,
};

@class MBRouteOptions;
@class MBWaypoint;
@class MBRoute;
@class NSError;
@class NSURLSessionDataTask;
@class MBMatchOptions;
@class MBMatch;
@class MBDirectionsOptions;

/// A <code>Directions</code> object provides you with optimal directions between different locations, or waypoints. The directions object passes your request to the <a href="https://www.mapbox.com/api-documentation/?language=Swift#directions">Mapbox Directions API</a> and returns the requested information to a closure (block) that you provide. A directions object can handle multiple simultaneous requests. A <code>RouteOptions</code> object specifies criteria for the results, such as intermediate waypoints, a mode of transportation, or the level of detail to be returned.
/// Each result produced by the directions object is stored in a <code>Route</code> object. Depending on the <code>RouteOptions</code> object you provide, each route may include detailed information suitable for turn-by-turn directions, or it may include only high-level information such as the distance, estimated travel time, and name of each leg of the trip. The waypoints that form the request may be conflated with nearby locations, as appropriate; the resulting waypoints are provided to the closure.
SWIFT_CLASS_NAMED("Directions")
@interface MBDirections : NSObject
/// The shared directions object.
/// To use this object, a Mapbox <a href="https://www.mapbox.com/help/define-access-token/">access token</a> should be specified in the <code>MGLMapboxAccessToken</code> key in the main application bundle’s Info.plist.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) MBDirections * _Nonnull sharedDirections;)
+ (MBDirections * _Nonnull)sharedDirections SWIFT_WARN_UNUSED_RESULT;
/// Initializes a newly created directions object with an optional access token and host.
/// \param accessToken A Mapbox <a href="https://www.mapbox.com/help/define-access-token/">access token</a>. If an access token is not specified when initializing the directions object, it should be specified in the <code>MGLMapboxAccessToken</code> key in the main application bundle’s Info.plist.
///
/// \param host An optional hostname to the server API. The <a href="https://www.mapbox.com/api-documentation/?language=Swift#directions">Mapbox Directions API</a> endpoint is used by default.
///
- (nonnull instancetype)initWithAccessToken:(NSString * _Nullable)accessToken host:(NSString * _Nullable)host OBJC_DESIGNATED_INITIALIZER;
/// Initializes a newly created directions object with an optional access token.
/// The directions object sends requests to the <a href="https://www.mapbox.com/api-documentation/?language=Swift#directions">Mapbox Directions API</a> endpoint.
/// \param accessToken A Mapbox <a href="https://www.mapbox.com/help/define-access-token/">access token</a>. If an access token is not specified when initializing the directions object, it should be specified in the <code>MGLMapboxAccessToken</code> key in the main application bundle’s Info.plist.
///
- (nonnull instancetype)initWithAccessToken:(NSString * _Nullable)accessToken;
/// Begins asynchronously calculating the route or routes using the given options and delivers the results to a closure.
/// This method retrieves the routes asynchronously over a network connection. If a connection error or server error occurs, details about the error are passed into the given completion handler in lieu of the routes.
/// Routes may be displayed atop a <a href="https://www.mapbox.com/maps/">Mapbox map</a>. They may be cached but may not be stored permanently. To use the results in other contexts or store them permanently, <a href="https://www.mapbox.com/directions/#pricing">upgrade to a Mapbox enterprise plan</a>.
/// \param options A <code>RouteOptions</code> object specifying the requirements for the resulting routes.
///
/// \param completionHandler The closure (block) to call with the resulting routes. This closure is executed on the application’s main thread.
///
///
/// returns:
/// The data task used to perform the HTTP request. If, while waiting for the completion handler to execute, you no longer want the resulting routes, cancel this task.
- (NSURLSessionDataTask * _Nonnull)calculateDirectionsWithOptions:(MBRouteOptions * _Nonnull)options completionHandler:(void (^ _Nonnull)(NSArray<MBWaypoint *> * _Nullable, NSArray<MBRoute *> * _Nullable, NSError * _Nullable))completionHandler;
/// Begins asynchronously calculating a match using the given options and delivers the results to a closure.
/// \param options A <code>MatchOptions</code> object specifying the requirements for the resulting match.
///
/// \param completionHandler The closure (block) to call with the resulting routes. This closure is executed on the application’s main thread.
///
///
/// returns:
/// The data task used to perform the HTTP request. If, while waiting for the completion handler to execute, you no longer want the resulting routes, cancel this task.
- (NSURLSessionDataTask * _Nonnull)calculateMatchesWithOptions:(MBMatchOptions * _Nonnull)options completionHandler:(void (^ _Nonnull)(NSArray<MBMatch *> * _Nullable, NSError * _Nullable))completionHandler;
- (NSURLSessionDataTask * _Nonnull)calculateRoutesMatchingOptions:(MBMatchOptions * _Nonnull)options completionHandler:(void (^ _Nonnull)(NSArray<MBWaypoint *> * _Nullable, NSArray<MBRoute *> * _Nullable, NSError * _Nullable))completionHandler;
/// The HTTP URL used to fetch the routes from the API.
/// After requesting the URL returned by this method, you can parse the JSON data in the response and pass it into the <code>Route.init(json:waypoints:profileIdentifier:)</code> initializer.
- (NSURL * _Nonnull)URLForCalculatingDirectionsWithOptions:(MBDirectionsOptions * _Nonnull)options SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

@class NSCoder;
enum MBRouteShapeFormat : NSUInteger;
enum MBRouteShapeResolution : NSUInteger;
enum MBMeasurementSystem : NSUInteger;

/// Options for calculating results from the Mapbox Directions service.
/// You do not create instances of this class directly. Instead, create instances of <code>MatchOptions</code> or <code>RouteOptions</code>.
SWIFT_CLASS_NAMED("DirectionsOptions")
@interface MBDirectionsOptions : NSObject <NSCopying, NSSecureCoding>
/// Initializes a route options object for routes between the given waypoints and an optional profile identifier.
/// \param waypoints An array of <code>Waypoint</code> objects representing locations that the route should visit in chronological order. The array should contain at least two waypoints (the source and destination) and at most 25 waypoints. (Some profiles, such as <code>MBDirectionsProfileIdentifierAutomobileAvoidingTraffic</code>, <a href="https://www.mapbox.com/api-documentation/#directions">may have lower limits</a>.)
///
/// \param profileIdentifier A string specifying the primary mode of transportation for the routes. This parameter, if set, should be set to <code>MBDirectionsProfileIdentifierAutomobile</code>, <code>MBDirectionsProfileIdentifierAutomobileAvoidingTraffic</code>, <code>MBDirectionsProfileIdentifierCycling</code>, or <code>MBDirectionsProfileIdentifierWalking</code>. <code>MBDirectionsProfileIdentifierAutomobile</code> is used by default.
///
- (nonnull instancetype)initWithWaypoints:(NSArray<MBWaypoint *> * _Nonnull)waypoints profileIdentifier:(MBDirectionsProfileIdentifier _Nullable)profileIdentifier OBJC_DESIGNATED_INITIALIZER;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL supportsSecureCoding;)
+ (BOOL)supportsSecureCoding SWIFT_WARN_UNUSED_RESULT;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEqualToDirectionsOptions:(MBDirectionsOptions * _Nullable)directionsOptions SWIFT_WARN_UNUSED_RESULT;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
/// An array of <code>Waypoint</code> objects representing locations that the route should visit in chronological order.
/// A waypoint object indicates a location to visit, as well as an optional heading from which to approach the location.
/// The array should contain at least two waypoints (the source and destination) and at most 25 waypoints.
@property (nonatomic, copy) NSArray<MBWaypoint *> * _Nonnull waypoints;
/// A string specifying the primary mode of transportation for the routes.
/// This property should be set to <code>MBDirectionsProfileIdentifierAutomobile</code>, <code>MBDirectionsProfileIdentifierAutomobileAvoidingTraffic</code>, <code>MBDirectionsProfileIdentifierCycling</code>, or <code>MBDirectionsProfileIdentifierWalking</code>. The default value of this property is <code>MBDirectionsProfileIdentifierAutomobile</code>, which specifies driving directions.
@property (nonatomic) MBDirectionsProfileIdentifier _Nonnull profileIdentifier;
/// A Boolean value indicating whether <code>MBRouteStep</code> objects should be included in the response.
/// If the value of this property is <code>true</code>, the returned route contains turn-by-turn instructions. Each returned <code>MBRoute</code> object contains one or more <code>MBRouteLeg</code> object that in turn contains one or more <code>MBRouteStep</code> objects. On the other hand, if the value of this property is <code>false</code>, the <code>MBRouteLeg</code> objects contain no <code>MBRouteStep</code> objects.
/// If you only want to know the distance or estimated travel time to a destination, set this property to <code>false</code> to minimize the size of the response and the time it takes to calculate the response. If you need to display turn-by-turn instructions, set this property to <code>true</code>.
/// The default value of this property is <code>false</code>.
@property (nonatomic) BOOL includesSteps;
/// Format of the data from which the shapes of the returned route and its steps are derived.
/// This property has no effect on the returned shape objects, although the choice of format can significantly affect the size of the underlying HTTP response.
/// The default value of this property is <code>polyline</code>.
@property (nonatomic) enum MBRouteShapeFormat shapeFormat;
/// Resolution of the shape of the returned route.
/// This property has no effect on the shape of the returned route’s steps.
/// The default value of this property is <code>low</code>, specifying a low-resolution route shape.
@property (nonatomic) enum MBRouteShapeResolution routeShapeResolution;
/// AttributeOptions for the route. Any combination of <code>AttributeOptions</code> can be specified.
/// By default, no attribute options are specified. It is recommended that <code>routeShapeResolution</code> be set to <code>.full</code>.
@property (nonatomic) MBAttributeOptions attributeOptions;
/// The locale in which the route’s instructions are written.
/// If you use MapboxDirections.swift with the Mapbox Directions API or Map Matching API, this property affects the sentence contained within the <code>RouteStep.instructions</code> property, but it does not affect any road names contained in that property or other properties such as <code>RouteStep.name</code>.
/// The Directions API can provide instructions in <a href="https://www.mapbox.com/api-documentation/#instructions-languages">a number of languages</a>. Set this property to <code>Bundle.main.preferredLocalizations.first</code> or <code>Locale.autoupdatingCurrent</code> to match the application’s language or the system language, respectively.
/// By default, this property is set to the current system locale.
@property (nonatomic, copy) NSLocale * _Nonnull locale;
/// A Boolean value indicating whether each route step includes an array of <code>SpokenInstructions</code>.
/// If this option is set to true, the <code>RouteStep.instructionsSpokenAlongStep</code> property is set to an array of <code>SpokenInstructions</code>.
@property (nonatomic) BOOL includesSpokenInstructions;
/// The measurement system used in spoken instructions included in route steps.
/// If the <code>includesSpokenInstructions</code> property is set to <code>true</code>, this property determines the units used for measuring the distance remaining until an upcoming maneuver. If the <code>includesSpokenInstructions</code> property is set to <code>false</code>, this property has no effect.
/// You should choose a measurement system appropriate for the current region. You can also allow the user to indicate their preferred measurement system via a setting.
@property (nonatomic) enum MBMeasurementSystem distanceMeasurementSystem;
/// :nodoc:
/// If true, each <code>RouteStep</code> will contain the property <code>visualInstructionsAlongStep</code>.
/// <code>visualInstructionsAlongStep</code> contains an array of <code>VisualInstruction</code> used for visually conveying information about a given <code>RouteStep</code>.
@property (nonatomic) BOOL includesVisualInstructions;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

@class MBRouteLeg;

/// A <code>DirectionsResult</code> represents a result returned from either the Mapbox Directions service.
/// You do not create instances of this class directly. Instead, you receive <code>Route</code> or <code>Match</code> objects when you request directions using the <code>Directions.calculate(_:completionHandler:)</code> or <code>Directions.calculateRoutes(matching:completionHandler:)</code> method.
SWIFT_CLASS_NAMED("DirectionsResult")
@interface MBDirectionsResult : NSObject <NSSecureCoding>
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL supportsSecureCoding;)
+ (BOOL)supportsSecureCoding SWIFT_WARN_UNUSED_RESULT;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
/// An array of geographic coordinates defining the path of the route from start to finish.
/// This array may be <code>nil</code> or simplified depending on the <code>routeShapeResolution</code> property of the original <code>RouteOptions</code> object.
/// Using the <a href="https://www.mapbox.com/ios-sdk/">Mapbox Maps SDK for iOS</a> or <a href="https://github.com/mapbox/mapbox-gl-native/tree/master/platform/macos/">Mapbox Maps SDK for macOS</a>, you can create an <code>MGLPolyline</code> object using these coordinates to display an overview of the route on an <code>MGLMapView</code>.
@property (nonatomic, readonly, copy) NSArray<NSValue *> * _Nullable coordinates;
/// The number of coordinates.
/// The value of this property may be zero or reduced depending on the <code>routeShapeResolution</code> property of the original <code>RouteOptions</code> object.
/// note:
/// This initializer is intended for Objective-C usage. In Swift code, use the <code>coordinates.count</code> property.
@property (nonatomic, readonly) NSUInteger coordinateCount;
/// Retrieves the coordinates.
/// The array may be empty or simplified depending on the <code>routeShapeResolution</code> property of the original <code>RouteOptions</code> object.
/// Using the <a href="https://www.mapbox.com/ios-sdk/">Mapbox Maps SDK for iOS</a> or <a href="https://github.com/mapbox/mapbox-gl-native/tree/master/platform/macos/">Mapbox Maps SDK for macOS</a>, you can create an <code>MGLPolyline</code> object using these coordinates to display an overview of the route on an <code>MGLMapView</code>.
/// precondition:
/// <code>coordinates</code> must be large enough to hold <code>coordinateCount</code> instances of <code>CLLocationCoordinate2D</code>.
/// note:
/// This initializer is intended for Objective-C usage. In Swift code, use the <code>coordinates</code> property.
/// \param coordinates A pointer to a C array of <code>CLLocationCoordinate2D</code> instances. On output, this array contains all the vertices of the overlay.
///
- (void)getCoordinates:(CLLocationCoordinate2D * _Nonnull)coordinates;
/// An array of <code>RouteLeg</code> objects representing the legs of the route.
/// The number of legs in this array depends on the number of waypoints. A route with two waypoints (the source and destination) has one leg, a route with three waypoints (the source, an intermediate waypoint, and the destination) has two legs, and so on.
/// To determine the name of the route, concatenate the names of the route’s legs.
@property (nonatomic, readonly, copy) NSArray<MBRouteLeg *> * _Nonnull legs;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// The route’s distance, measured in meters.
/// The value of this property accounts for the distance that the user must travel to traverse the path of the route. It is the sum of the <code>distance</code> properties of the route’s legs, not the sum of the direct distances between the route’s waypoints. You should not assume that the user would travel along this distance at a fixed speed.
@property (nonatomic, readonly) CLLocationDistance distance;
/// The route’s expected travel time, measured in seconds.
/// The value of this property reflects the time it takes to traverse the entire route. It is the sum of the <code>expectedTravelTime</code> properties of the route’s legs. If the route was calculated using the <code>MBDirectionsProfileIdentifierAutomobileAvoidingTraffic</code> profile, this property reflects current traffic conditions at the time of the request, not necessarily the traffic conditions at the time the user would begin the route. For other profiles, this property reflects travel time under ideal conditions and does not account for traffic congestion. If the route makes use of a ferry or train, the actual travel time may additionally be subject to the schedules of those services.
/// Do not assume that the user would travel along the route at a fixed speed. For more granular travel times, use the <code>RouteLeg.expectedTravelTime</code> or <code>RouteStep.expectedTravelTime</code>. For even more granularity, specify the <code>AttributeOptions.expectedTravelTime</code> option and use the <code>RouteLeg.expectedSegmentTravelTimes</code> property.
@property (nonatomic, readonly) NSTimeInterval expectedTravelTime;
/// <code>RouteOptions</code> used to create the directions request.
/// The route options object’s profileIdentifier property reflects the primary mode of transportation used for the route. Individual steps along the route might use different modes of transportation as necessary.
@property (nonatomic, readonly, strong) MBDirectionsOptions * _Nonnull directionsOptions;
/// The <a href="https://www.mapbox.com/help/define-access-token/">access token</a> used to make the directions request.
/// This property is set automatically if a request is made via <code>Directions.calculate(_:completionHandler:)</code>.
@property (nonatomic, copy) NSString * _Nullable accessToken;
/// The endpoint used to make the directions request.
/// This property is set automatically if a request is made via <code>Directions.calculate(_:completionHandler:)</code>.
@property (nonatomic, copy) NSURL * _Nullable apiEndpoint;
/// A unique identifier for a directions request.
/// Each route produced by a single call to <code>Directions.calculate(_:completionHandler:)</code> has the same route identifier.
@property (nonatomic, copy) NSString * _Nullable routeIdentifier;
/// The locale to use for spoken instructions.
/// This locale is specific to Mapbox Voice API. If <code>nil</code> is returned, the instruction should be spoken with an alternative speech synthesizer.
@property (nonatomic, copy) NSLocale * _Nullable speechLocale;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

/// A <code>DrivingSide</code> indicates which side of the road cars and traffic flow.
typedef SWIFT_ENUM_NAMED(NSInteger, MBDrivingSide, "DrivingSide", closed) {
/// Indicates driving occurs on the <code>left</code> side.
  MBDrivingSideLeft = 0,
/// Indicates driving occurs on the <code>right</code> side.
  MBDrivingSideRight = 1,
};



/// A <code>RouteShapeFormat</code> indicates the format of a route’s shape in the raw HTTP response.
typedef SWIFT_ENUM_NAMED(NSUInteger, MBInstructionFormat, "InstructionFormat", closed) {
/// The route steps’ instructions are delivered in plain text format.
  MBInstructionFormatText = 0,
/// The route steps’ instructions are delivered in HTML format.
/// Key phrases are boldfaced.
  MBInstructionFormatHtml = 1,
};

@class MBLane;

/// A single cross street along a step.
SWIFT_CLASS_NAMED("Intersection")
@interface MBIntersection : NSObject <NSSecureCoding>
/// The geographic coordinates at the center of the intersection.
@property (nonatomic, readonly) CLLocationCoordinate2D location;
/// An array of <code>CLLocationDirection</code>s indicating the absolute headings of the roads that meet at the intersection.
/// A road is represented in this array by a heading indicating the direction from which the road meets the intersection. To get the direction of travel when leaving the intersection along the road, rotate the heading 180 degrees.
/// A single road that passes through this intersection is represented by two items in this array: one for the segment that enters the intersection and one for the segment that exits it.
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nonnull headings;
/// The indices of the items in the <code>headings</code> array that correspond to the roads that may be used to leave the intersection.
/// This index set effectively excludes any one-way road that leads toward the intersection.
@property (nonatomic, readonly, copy) NSIndexSet * _Nonnull outletIndexes;
/// The index of the item in the <code>headings</code> array that corresponds to the road that the containing route step uses to approach the intersection.
@property (nonatomic, readonly) NSInteger approachIndex;
/// The index of the item in the <code>headings</code> array that corresponds to the road that the containing route step uses to leave the intersection.
@property (nonatomic, readonly) NSInteger outletIndex;
/// An array of <code>Lane</code> objects representing all the lanes of the road that the containing route step uses to approach the intersection.
/// If no lane information is available for an intersection, this property’s value is <code>nil</code>. The first item corresponds to the leftmost lane, the second item corresponds to the second lane from the left, and so on, regardless of whether the surrounding country drives on the left or on the right.
@property (nonatomic, readonly, copy) NSArray<MBLane *> * _Nullable approachLanes;
/// The indices of the items in the <code>approachLanes</code> array that correspond to the roads that may be used to execute the maneuver.
/// If no lane information is available for an intersection, this property’s value is <code>nil</code>.
@property (nonatomic, readonly, copy) NSIndexSet * _Nullable usableApproachLanes;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL supportsSecureCoding;)
+ (BOOL)supportsSecureCoding SWIFT_WARN_UNUSED_RESULT;
+ (void)setSupportsSecureCoding:(BOOL)value;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// A lane on the road approaching an intersection.
SWIFT_CLASS_NAMED("Lane")
@interface MBLane : NSObject <NSSecureCoding>
/// The lane indications specifying the maneuvers that may be executed from the lane.
@property (nonatomic, readonly) MBLaneIndication indications;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL supportsSecureCoding;)
+ (BOOL)supportsSecureCoding SWIFT_WARN_UNUSED_RESULT;
+ (void)setSupportsSecureCoding:(BOOL)value;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

/// A <code>ManeuverDirection</code> clarifies a <code>ManeuverType</code> with directional information. The exact meaning of the maneuver direction for a given step depends on the step’s maneuver type; see the <code>ManeuverType</code> documentation for details.
typedef SWIFT_ENUM_NAMED(NSInteger, MBManeuverDirection, "ManeuverDirection", closed) {
/// The step does not have a particular maneuver direction associated with it.
/// This maneuver direction is used as a workaround for bridging to Objective-C which does not support nullable enumeration-typed values.
  MBManeuverDirectionNone = 0,
/// The maneuver requires a sharp turn to the right.
  MBManeuverDirectionSharpRight = 1,
/// The maneuver requires a turn to the right, a merge to the right, or an exit on the right, or the destination is on the right.
  MBManeuverDirectionRight = 2,
/// The maneuver requires a slight turn to the right.
  MBManeuverDirectionSlightRight = 3,
/// The maneuver requires no notable change in direction, or the destination is straight ahead.
  MBManeuverDirectionStraightAhead = 4,
/// The maneuver requires a slight turn to the left.
  MBManeuverDirectionSlightLeft = 5,
/// The maneuver requires a turn to the left, a merge to the left, or an exit on the left, or the destination is on the right.
  MBManeuverDirectionLeft = 6,
/// The maneuver requires a sharp turn to the left.
  MBManeuverDirectionSharpLeft = 7,
/// The maneuver requires a U-turn when possible.
/// Use the difference between the step’s initial and final headings to distinguish between a U-turn to the left (typical in countries that drive on the right) and a U-turn on the right (typical in countries that drive on the left). If the difference in headings is greater than 180 degrees, the maneuver requires a U-turn to the left. If the difference in headings is less than 180 degrees, the maneuver requires a U-turn to the right.
  MBManeuverDirectionUTurn = 8,
};

/// A <code>ManeuverType</code> specifies the type of maneuver required to complete the route step. You can pair a maneuver type with a <code>ManeuverDirection</code> to choose an appropriate visual or voice prompt to present the user.
/// In Swift, you can use pattern matching with a single switch statement on a tuple containing the maneuver type and maneuver direction to avoid a complex series of if-else-if statements or switch statements.
typedef SWIFT_ENUM_NAMED(NSInteger, MBManeuverType, "ManeuverType", closed) {
/// The step does not have a particular maneuver type associated with it.
/// This maneuver type is used as a workaround for bridging to Objective-C which does not support nullable enumeration-typed values.
  MBManeuverTypeNone = 0,
/// The step requires the user to depart from a waypoint.
/// If the waypoint is some distance away from the nearest road, the maneuver direction indicates the direction the user must turn upon reaching the road.
  MBManeuverTypeDepart = 1,
/// The step requires the user to turn.
/// The maneuver direction indicates the direction in which the user must turn relative to the current direction of travel. The exit index indicates the number of intersections, large or small, from the previous maneuver up to and including the intersection at which the user must turn.
  MBManeuverTypeTurn = 2,
/// The step requires the user to continue after a turn.
  MBManeuverTypeContinue = 3,
/// The step requires the user to continue on the current road as it changes names.
/// The step’s name contains the road’s new name. To get the road’s old name, use the previous step’s name.
  MBManeuverTypePassNameChange = 4,
/// The step requires the user to merge onto another road.
/// The maneuver direction indicates the side from which the other road approaches the intersection relative to the user.
  MBManeuverTypeMerge = 5,
/// The step requires the user to take a entrance ramp (slip road) onto a highway.
  MBManeuverTypeTakeOnRamp = 6,
/// The step requires the user to take an exit ramp (slip road) off a highway.
/// The maneuver direction indicates the side of the highway from which the user must exit. The exit index indicates the number of highway exits from the previous maneuver up to and including the exit that the user must take.
  MBManeuverTypeTakeOffRamp = 7,
/// The step requires the user to choose a fork at a Y-shaped fork in the road.
/// The maneuver direction indicates which fork to take.
  MBManeuverTypeReachFork = 8,
/// The step requires the user to turn at either a T-shaped three-way intersection or a sharp bend in the road where the road also changes names.
/// This maneuver type is called out separately so that the user may be able to proceed more confidently, without fear of having overshot the turn. If this distinction is unimportant to you, you may treat the maneuver as an ordinary <code>turn</code>.
  MBManeuverTypeReachEnd = 9,
/// The step requires the user to get into a specific lane in order to continue along the current road.
/// The maneuver direction is set to <code>straightAhead</code>. Each of the first intersection’s usable approach lanes also has an indication of <code>straightAhead</code>. A maneuver in a different direction would instead have a maneuver type of <code>turn</code>.
/// This maneuver type is called out separately so that the application can present the user with lane guidance based on the first element in the <code>intersections</code> property. If lane guidance is unimportant to you, you may treat the maneuver as an ordinary <code>continue</code> or ignore it.
  MBManeuverTypeUseLane = 10,
/// The step requires the user to enter and traverse a roundabout (traffic circle or rotary).
/// The step has no name, but the exit name is the name of the road to take to exit the roundabout. The exit index indicates the number of roundabout exits up to and including the exit to take.
/// If <code>RouteOptions.includesExitRoundaboutManeuver</code> is set to <code>true</code>, this step is followed by an <code>.exitRoundabout</code> maneuver. Otherwise, this step represents the entire roundabout maneuver, from the entrance to the exit.
  MBManeuverTypeTakeRoundabout = 11,
/// The step requires the user to enter and traverse a large, named roundabout (traffic circle or rotary).
/// The step’s name is the name of the roundabout. The exit name is the name of the road to take to exit the roundabout. The exit index indicates the number of rotary exits up to and including the exit that the user must take.
/// If <code>RouteOptions.includesExitRoundaboutManeuver</code> is set to <code>true</code>, this step is followed by an <code>.exitRotary</code> maneuver. Otherwise, this step represents the entire roundabout maneuver, from the entrance to the exit.
  MBManeuverTypeTakeRotary = 12,
/// The step requires the user to enter and exit a roundabout (traffic circle or rotary) that is compact enough to constitute a single intersection.
/// The step’s name is the name of the road to take after exiting the roundabout. This maneuver type is called out separately because the user may perceive the roundabout as an ordinary intersection with an island in the middle. If this distinction is unimportant to you, you may treat the maneuver as either an ordinary <code>turn</code> or as a <code>takeRoundabout</code>.
  MBManeuverTypeTurnAtRoundabout = 13,
/// The step requires the user to exit a roundabout (traffic circle or rotary).
/// This maneuver type follows a <code>.takeRoundabout</code> maneuver. It is only used when <code>RouteOptions.includesExitRoundaboutManeuver</code> is set to true.
  MBManeuverTypeExitRoundabout = 14,
/// The step requires the user to exit a large, named roundabout (traffic circle or rotary).
/// This maneuver type follows a <code>.takeRotary</code> maneuver. It is only used when <code>RouteOptions.includesExitRoundaboutManeuver</code> is set to true.
  MBManeuverTypeExitRotary = 15,
/// The step requires the user to respond to a change in travel conditions.
/// This maneuver type may occur for example when driving directions require the user to board a ferry, or when cycling directions require the user to dismount. The step’s transport type and instructions contains important contextual details that should be presented to the user at the maneuver location.
/// Similar changes can occur simultaneously with other maneuvers, such as when the road changes its name at the site of a movable bridge. In such cases, <code>heedWarning</code> is suppressed in favor of another maneuver type.
  MBManeuverTypeHeedWarning = 16,
/// The step requires the user to arrive at a waypoint.
/// The distance and expected travel time for this step are set to zero, indicating that the route or route leg is complete. The maneuver direction indicates the side of the road on which the waypoint can be found (or whether it is straight ahead).
  MBManeuverTypeArrive = 17,
/// The step requires the user to arrive at an intermediate waypoint.
/// This maneuver type is only used by version 4 of the Mapbox Directions API.
  MBManeuverTypePassWaypoint = 18,
};

@class MBTracepoint;

/// A <code>Match</code> object defines a single route that was created from a series of points that were matched against a road network.
/// Typically, you do not create instances of this class directly. Instead, you receive match objects when you pass a <code>MatchOptions</code> object into the <code>Directions.calculate(_:completionHandler:)</code> or <code>Directions.calculateRoutes(matching:completionHandler:)</code> method.
SWIFT_CLASS_NAMED("Match")
@interface MBMatch : MBDirectionsResult
/// Initializes a new match object with the given JSON dictionary representation and tracepoints.
/// \param json A JSON dictionary representation of the route as returned by the Mapbox Map Matching API.
///
/// \param tracepoints An array of <code>Tracepoint</code> that the match found in order.
///
/// \param matchOptions The <code>MatchOptions</code> used to create the request.
///
- (nonnull instancetype)initWithJson:(NSDictionary<NSString *, id> * _Nonnull)json tracepoints:(NSArray<MBTracepoint *> * _Nonnull)tracepoints waypointIndices:(NSIndexSet * _Nonnull)waypointIndices matchOptions:(MBMatchOptions * _Nonnull)matchOptions;
/// A number between 0 and 1 that indicates the Map Matching API’s confidence that the match is accurate. A higher confidence means the match is more likely to be accurate.
@property (nonatomic) float confidence;
/// Tracepoints on the road network that match the tracepoints in the match options.
/// Any outlier tracepoint is omitted from the match. This array represents an outlier tracepoint is a <code>Tracepoint</code> object whose <code>Tracepoint.coordinate</code> property is <code>kCLLocationCoordinate2DInvalid</code>.
@property (nonatomic, copy) NSArray<MBTracepoint *> * _Nonnull tracepoints;
/// Index of the waypoint inside the matched route.
@property (nonatomic, copy) NSIndexSet * _Nullable waypointIndices;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL supportsSecureCoding;)
+ (BOOL)supportsSecureCoding SWIFT_WARN_UNUSED_RESULT;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEqualToMatch:(MBMatch * _Nullable)match SWIFT_WARN_UNUSED_RESULT;
@end


/// A <code>MatchOptions</code> object is a structure that specifies the criteria for results returned by the Mapbox Map Matching API.
/// Pass an instance of this class into the <code>Directions.calculate(_:completionHandler:)</code> method.
SWIFT_CLASS_NAMED("MatchOptions")
@interface MBMatchOptions : MBDirectionsOptions
- (nonnull instancetype)initWithWaypoints:(NSArray<MBWaypoint *> * _Nonnull)waypoints profileIdentifier:(MBDirectionsProfileIdentifier _Nullable)profileIdentifier OBJC_DESIGNATED_INITIALIZER;
/// If true, the input locations are re-sampled for improved map matching results. The default is  <code>false</code>.
@property (nonatomic) BOOL resamplesTraces;
/// An index set containing indices of two or more items in <code>coordinates</code>. These will be represented by <code>Waypoint</code>s in the resulting <code>Match</code> objects.
/// Use this property when the <code>includesSteps</code> property is <code>true</code> or when <code>coordinates</code> represents a trace with a high sample rate. If this property is <code>nil</code>, the resulting <code>Match</code> objects contain a waypoint for each coordinate in the match options.
/// If specified, each index must correspond to a valid index in <code>coordinates</code>, and the index set must contain 0 and the last index (one less than <code>endIndex</code>) of <code>coordinates</code>.
@property (nonatomic, copy) NSIndexSet * _Nullable waypointIndices;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL supportsSecureCoding;)
+ (BOOL)supportsSecureCoding SWIFT_WARN_UNUSED_RESULT;
@end

/// A system of units of measuring distances and other quantities.
typedef SWIFT_ENUM_NAMED(NSUInteger, MBMeasurementSystem, "MeasurementSystem", closed) {
/// U.S. customary and British imperial units.
/// Distances are measured in miles and feet.
  MBMeasurementSystemImperial = 0,
/// The metric system.
/// Distances are measured in kilometers and meters.
  MBMeasurementSystemMetric = 1,
};


/// A <code>Route</code> object defines a single route that the user can follow to visit a series of waypoints in order. The route object includes information about the route, such as its distance and expected travel time. Depending on the criteria used to calculate the route, the route object may also include detailed turn-by-turn instructions.
/// Typically, you do not create instances of this class directly. Instead, you receive route objects when you request directions using the <code>Directions.calculate(_:completionHandler:)</code> method. However, if you use the <code>Directions.url(forCalculating:)</code> method instead, you can pass the results of the HTTP request into this class’s initializer.
SWIFT_CLASS_NAMED("Route")
@interface MBRoute : MBDirectionsResult
/// Initializes a new route object with the given JSON dictionary representation and waypoints.
/// This initializer is intended for use in conjunction with the <code>Directions.url(forCalculating:)</code> method.
/// \param json A JSON dictionary representation of the route as returned by the Mapbox Directions API.
///
/// \param waypoints An array of waypoints that the route visits in chronological order.
///
/// \param routeOptions The <code>RouteOptions</code> used to create the request.
///
- (nonnull instancetype)initWithJson:(NSDictionary<NSString *, id> * _Nonnull)json waypoints:(NSArray<MBWaypoint *> * _Nonnull)waypoints routeOptions:(MBRouteOptions * _Nonnull)routeOptions OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
@end

@class MBRouteStep;

/// A <code>RouteLeg</code> object defines a single leg of a route between two waypoints. If the overall route has only two waypoints, it has a single <code>RouteLeg</code> object that covers the entire route. The route leg object includes information about the leg, such as its name, distance, and expected travel time. Depending on the criteria used to calculate the route, the route leg object may also include detailed turn-by-turn instructions.
/// You do not create instances of this class directly. Instead, you receive route leg objects as part of route objects when you request directions using the <code>Directions.calculate(_:completionHandler:)</code> method.
SWIFT_CLASS_NAMED("RouteLeg")
@interface MBRouteLeg : NSObject <NSSecureCoding>
/// Initializes a new route leg object with the given JSON dictionary representation and waypoints.
/// Normally, you do not create instances of this class directly. Instead, you receive route leg objects as part of route objects when you request directions using the <code>Directions.calculateDirections(options:completionHandler:)</code> method.
/// \param json A JSON dictionary representation of a route leg object as returnd by the Mapbox Directions API.
///
/// \param source The waypoint at the beginning of the leg.
///
/// \param destination The waypoint at the end of the leg.
///
/// \param profileIdentifier The profile identifier used to request the routes.
///
- (nonnull instancetype)initWithJson:(NSDictionary<NSString *, id> * _Nonnull)json source:(MBWaypoint * _Nonnull)source destination:(MBWaypoint * _Nonnull)destination profileIdentifier:(MBDirectionsProfileIdentifier _Nonnull)profileIdentifier;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL supportsSecureCoding;)
+ (BOOL)supportsSecureCoding SWIFT_WARN_UNUSED_RESULT;
+ (void)setSupportsSecureCoding:(BOOL)value;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
/// The starting point of the route leg.
/// Unless this is the first leg of the route, the source of this leg is the same as the destination of the previous leg.
@property (nonatomic, readonly, strong) MBWaypoint * _Nonnull source;
/// The endpoint of the route leg.
/// Unless this is the last leg of the route, the destination of this leg is the same as the source of the next leg.
@property (nonatomic, readonly, strong) MBWaypoint * _Nonnull destination;
/// An array of one or more <code>RouteStep</code> objects representing the steps for traversing this leg of the route.
/// Each route step object corresponds to a distinct maneuver and the approach to the next maneuver.
/// This array is empty if the <code>includesSteps</code> property of the original <code>RouteOptions</code> object is set to <code>false</code>.
@property (nonatomic, readonly, copy) NSArray<MBRouteStep *> * _Nonnull steps;
/// An array containing <a href="https://wiki.openstreetmap.org/wiki/Node">OpenStreetMap node identifiers</a>, one for each coordinate along the route geometry.
/// This property is set if the <code>RouteOptions.attributeOptions</code> property contains <code>.openStreetMapNodeIdentifier</code>.
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nullable openStreetMapNodeIdentifiers;
/// An array containing the distance (measured in meters) between each coordinate in the route leg geometry.
/// This property is set if the <code>RouteOptions.attributeOptions</code> property contains <code>.distance</code>.
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nullable segmentDistances;
/// An array containing the expected travel time (measured in seconds) between each coordinate in the route leg geometry.
/// These values are dynamic, accounting for any conditions that may change along a segment, such as traffic congestion if the profile identifier is set to <code>.automobileAvoidingTraffic</code>.
/// This property is set if the <code>RouteOptions.attributeOptions</code> property contains <code>.expectedTravelTime</code>.
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nullable expectedSegmentTravelTimes;
/// An array containing the expected average speed (measured in meters per second) between each coordinate in the route leg geometry.
/// These values are dynamic; rather than speed limits, they account for the road’s classification and/or any traffic congestion (if the profile identifier is set to <code>.automobileAvoidingTraffic</code>).
/// This property is set if the <code>RouteOptions.attributeOptions</code> property contains <code>.speed</code>.
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nullable segmentSpeeds;
/// A name that describes the route leg.
/// The name describes the leg using the most significant roads or trails along the route leg. You can display this string to the user to help the user can distinguish one route from another based on how the legs of the routes are named.
/// The leg’s name does not identify the start and end points of the leg. To distinguish one leg from another within the same route, concatenate the <code>name</code> properties of the <code>source</code> and <code>destination</code> waypoints.
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// The route leg’s distance, measured in meters.
/// The value of this property accounts for the distance that the user must travel to arrive at the destination from the source. It is not the direct distance between the source and destination, nor should not assume that the user would travel along this distance at a fixed speed.
@property (nonatomic, readonly) CLLocationDistance distance;
/// The route leg’s expected travel time, measured in seconds.
/// The value of this property reflects the time it takes to traverse the route leg. If the route was calculated using the <code>MBDirectionsProfileIdentifierAutomobileAvoidingTraffic</code> profile, this property reflects current traffic conditions at the time of the request, not necessarily the traffic conditions at the time the user would begin this leg. For other profiles, this property reflects travel time under ideal conditions and does not account for traffic congestion. If the leg makes use of a ferry or train, the actual travel time may additionally be subject to the schedules of those services.
/// Do not assume that the user would travel along the leg at a fixed speed. For the expected travel time on each individual segment along the leg, use the <code>RouteStep.expectedTravelTimes</code> property. For more granularity, specify the <code>AttributeOptions.expectedTravelTime</code> option and use the <code>expectedSegmentTravelTimes</code> property.
@property (nonatomic, readonly) NSTimeInterval expectedTravelTime;
/// A string specifying the primary mode of transportation for the route leg.
/// The value of this property is <code>MBDirectionsProfileIdentifierAutomobile</code>, <code>MBDirectionsProfileIdentifierAutomobileAvoidingTraffic</code>, <code>MBDirectionsProfileIdentifierCycling</code>, or <code>MBDirectionsProfileIdentifierWalking</code>, depending on the <code>profileIdentifier</code> property of the original <code>RouteOptions</code> object. This property reflects the primary mode of transportation used for the route leg. Individual steps along the route leg might use different modes of transportation as necessary.
@property (nonatomic, readonly) MBDirectionsProfileIdentifier _Nonnull profileIdentifier;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// A <code>RouteOptions</code> object is a structure that specifies the criteria for results returned by the Mapbox Directions API.
/// Pass an instance of this class into the <code>Directions.calculate(_:completionHandler:)</code> method.
SWIFT_CLASS_NAMED("RouteOptions")
@interface MBRouteOptions : MBDirectionsOptions
/// Initializes a route options object for routes between the given locations and an optional profile identifier.
/// note:
/// This initializer is intended for <code>CLLocation</code> objects created using the <code>CLLocation.init(latitude:longitude:)</code> initializer. If you intend to use a <code>CLLocation</code> object obtained from a <code>CLLocationManager</code> object, consider increasing the <code>horizontalAccuracy</code> or set it to a negative value to avoid overfitting, since the <code>Waypoint</code> class’s <code>coordinateAccuracy</code> property represents the maximum allowed deviation from the waypoint.
/// \param locations An array of <code>CLLocation</code> objects representing locations that the route should visit in chronological order. The array should contain at least two locations (the source and destination) and at most 25 locations. Each location object is converted into a <code>Waypoint</code> object. This class respects the <code>CLLocation</code> class’s <code>coordinate</code> and <code>horizontalAccuracy</code> properties, converting them into the <code>Waypoint</code> class’s <code>coordinate</code> and <code>coordinateAccuracy</code> properties, respectively.
///
/// \param profileIdentifier A string specifying the primary mode of transportation for the routes. This parameter, if set, should be set to <code>MBDirectionsProfileIdentifierAutomobile</code>, <code>MBDirectionsProfileIdentifierAutomobileAvoidingTraffic</code>, <code>MBDirectionsProfileIdentifierCycling</code>, or <code>MBDirectionsProfileIdentifierWalking</code>. <code>MBDirectionsProfileIdentifierAutomobile</code> is used by default.
///
- (nonnull instancetype)initWithLocations:(NSArray<CLLocation *> * _Nonnull)locations profileIdentifier:(MBDirectionsProfileIdentifier _Nullable)profileIdentifier;
/// Initializes a route options object for routes between the given geographic coordinates and an optional profile identifier.
/// \param coordinates An array of geographic coordinates representing locations that the route should visit in chronological order. The array should contain at least two locations (the source and destination) and at most 25 locations. Each coordinate is converted into a <code>Waypoint</code> object.
///
/// \param profileIdentifier A string specifying the primary mode of transportation for the routes. This parameter, if set, should be set to <code>MBDirectionsProfileIdentifierAutomobile</code>, <code>MBDirectionsProfileIdentifierAutomobileAvoidingTraffic</code>, <code>MBDirectionsProfileIdentifierCycling</code>, or <code>MBDirectionsProfileIdentifierWalking</code>. <code>MBDirectionsProfileIdentifierAutomobile</code> is used by default.
///
- (nonnull instancetype)initWithCoordinates:(NSArray<NSValue *> * _Nonnull)coordinates profileIdentifier:(MBDirectionsProfileIdentifier _Nullable)profileIdentifier;
/// Initializes a route options object for routes between the given waypoints and an optional profile identifier.
/// \param waypoints An array of <code>Waypoint</code> objects representing locations that the route should visit in chronological order. The array should contain at least two waypoints (the source and destination) and at most 25 waypoints. (Some profiles, such as <code>MBDirectionsProfileIdentifierAutomobileAvoidingTraffic</code>, <a href="https://www.mapbox.com/api-documentation/#directions">may have lower limits</a>.)
///
/// \param profileIdentifier A string specifying the primary mode of transportation for the routes. This parameter, if set, should be set to <code>MBDirectionsProfileIdentifierAutomobile</code>, <code>MBDirectionsProfileIdentifierAutomobileAvoidingTraffic</code>, <code>MBDirectionsProfileIdentifierCycling</code>, or <code>MBDirectionsProfileIdentifierWalking</code>. <code>MBDirectionsProfileIdentifierAutomobile</code> is used by default.
///
- (nonnull instancetype)initWithWaypoints:(NSArray<MBWaypoint *> * _Nonnull)waypoints profileIdentifier:(MBDirectionsProfileIdentifier _Nullable)profileIdentifier OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
/// A Boolean value that indicates whether a returned route may require a point U-turn at an intermediate waypoint.
/// If the value of this property is <code>true</code>, a returned route may require an immediate U-turn at an intermediate waypoint. At an intermediate waypoint, if the value of this property is <code>false</code>, each returned route may continue straight ahead or turn to either side but may not U-turn. This property has no effect if only two waypoints are specified.
/// Set this property to <code>true</code> if you expect the user to traverse each leg of the trip separately. For example, it would be quite easy for the user to effectively “U-turn” at a waypoint if the user first parks the car and patronizes a restaurant there before embarking on the next leg of the trip. Set this property to <code>false</code> if you expect the user to proceed to the next waypoint immediately upon arrival. For example, if the user only needs to drop off a passenger or package at the waypoint before continuing, it would be inconvenient to perform a U-turn at that location.
/// The default value of this property is <code>false</code> when the profile identifier is <code>MBDirectionsProfileIdentifierAutomobile</code> or <code>MBDirectionsProfileIdentifierAutomobileAvoidingTraffic</code> and <code>true</code> otherwise.
@property (nonatomic) BOOL allowsUTurnAtWaypoint;
/// A Boolean value indicating whether alternative routes should be included in the response.
/// If the value of this property is <code>false</code>, the server only calculates a single route that visits each of the waypoints. If the value of this property is <code>true</code>, the server attempts to find additional reasonable routes that visit the waypoints. Regardless, multiple routes are only returned if it is possible to visit the waypoints by a different route without significantly increasing the distance or travel time. The alternative routes may partially overlap with the preferred route, especially if intermediate waypoints are specified.
/// Alternative routes may take longer to calculate and make the response significantly larger, so only request alternative routes if you intend to display them to the user or let the user choose them over the preferred route. For example, do not request alternative routes if you only want to know the distance or estimated travel time to a destination.
/// The default value of this property is <code>false</code>.
@property (nonatomic) BOOL includesAlternativeRoutes;
/// A Boolean value indicating whether the route includes a <code>ManeuverType.exitRoundabout</code> or <code>ManeuverType.exitRotary</code> step when traversing a roundabout or rotary, respectively.
/// If this option is set to <code>true</code>, a route that traverses a roundabout includes both a <code>ManeuverType.takeRoundabout</code> step and a <code>ManeuverType.exitRoundabout</code> step; likewise, a route that traverses a large, named roundabout includes both a <code>ManeuverType.takeRotary</code> step and a <code>ManeuverType.exitRotary</code> step. Otherwise, it only includes a <code>ManeuverType.takeRoundabout</code> or <code>ManeuverType.takeRotary</code> step. This option is set to <code>false</code> by default.
@property (nonatomic) BOOL includesExitRoundaboutManeuver;
/// The route classes that the calculated routes will avoid.
/// Currently, you can only specify a single road class to avoid.
@property (nonatomic) MBRoadClasses roadClassesToAvoid;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL supportsSecureCoding;)
+ (BOOL)supportsSecureCoding SWIFT_WARN_UNUSED_RESULT;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEqualToRouteOptions:(MBRouteOptions * _Nullable)routeOptions SWIFT_WARN_UNUSED_RESULT;
@end


/// A <code>RouteOptionsV4</code> object is a structure that specifies the criteria for results returned by the Mapbox Directions API v4.
/// Pass an instance of this class into the <code>Directions.calculate(_:completionHandler:)</code> method.
SWIFT_CLASS_NAMED("RouteOptionsV4")
@interface MBRouteOptionsV4 : MBRouteOptions
/// The format of the returned route steps’ instructions.
/// By default, the value of this property is <code>text</code>, specifying plain text instructions.
@property (nonatomic) enum MBInstructionFormat instructionFormat;
/// A Boolean value indicating whether the returned routes and their route steps should include any geographic coordinate data.
/// If the value of this property is <code>true</code>, the returned routes and their route steps include coordinates; if the value of this property is `false, they do not.
/// The default value of this property is <code>true</code>.
@property (nonatomic) BOOL includesShapes;
- (nonnull instancetype)initWithWaypoints:(NSArray<MBWaypoint *> * _Nonnull)waypoints profileIdentifier:(MBDirectionsProfileIdentifier _Nullable)profileIdentifier OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
@end

/// A <code>RouteShapeFormat</code> indicates the format of a route or match shape in the raw HTTP response.
typedef SWIFT_ENUM_NAMED(NSUInteger, MBRouteShapeFormat, "RouteShapeFormat", closed) {
/// The route’s shape is delivered in <a href="http://geojson.org/">GeoJSON</a> format.
/// This standard format is human-readable and can be parsed straightforwardly, but it is far more verbose than <code>polyline</code>.
  MBRouteShapeFormatGeoJSON = 0,
/// The route’s shape is delivered in <a href="https://developers.google.com/maps/documentation/utilities/polylinealgorithm">encoded polyline algorithm</a> format with 1×10<sup>−5</sup> precision.
/// This machine-readable format is considerably more compact than <code>geoJSON</code> but less precise than <code>polyline6</code>.
  MBRouteShapeFormatPolyline = 1,
/// The route’s shape is delivered in <a href="https://developers.google.com/maps/documentation/utilities/polylinealgorithm">encoded polyline algorithm</a> format with 1×10<sup>−6</sup> precision.
/// This format is an order of magnitude more precise than <code>polyline</code>.
  MBRouteShapeFormatPolyline6 = 2,
};

/// A <code>RouteShapeResolution</code> indicates the level of detail in a route’s shape, or whether the shape is present at all.
typedef SWIFT_ENUM_NAMED(NSUInteger, MBRouteShapeResolution, "RouteShapeResolution", closed) {
/// The route’s shape is omitted.
/// Specify this resolution if you do not intend to show the route line to the user or analyze the route line in any way.
  MBRouteShapeResolutionNone = 0,
/// The route’s shape is simplified.
/// This resolution considerably reduces the size of the response. The resulting shape is suitable for display at a low zoom level, but it lacks the detail necessary for focusing on individual segments of the route.
  MBRouteShapeResolutionLow = 1,
/// The route’s shape is as detailed as possible.
/// The resulting shape is equivalent to concatenating the shapes of all the route’s consitituent steps. You can focus on individual segments of this route while faithfully representing the path of the route. If you only intend to show a route overview and do not need to analyze the route line in any way, consider specifying <code>low</code> instead to considerably reduce the size of the response.
  MBRouteShapeResolutionFull = 2,
};

@class MBSpokenInstruction;
@class MBVisualInstruction;
enum MBTransportType : NSInteger;

/// A <code>RouteStep</code> object represents a single distinct maneuver along a route and the approach to the next maneuver. The route step object corresponds to a single instruction the user must follow to complete a portion of the route. For example, a step might require the user to turn then follow a road.
/// You do not create instances of this class directly. Instead, you receive route step objects as part of route objects when you request directions using the <code>Directions.calculate(_:completionHandler:)</code> method, setting the <code>includesSteps</code> option to <code>true</code> in the <code>RouteOptions</code> object that you pass into that method.
SWIFT_CLASS_NAMED("RouteStep")
@interface MBRouteStep : NSObject <NSSecureCoding>
/// Initializes a new route step object with the given JSON dictionary representation.
/// Normally, you do not create instances of this class directly. Instead, you receive route step objects as part of route objects when you request directions using the <code>Directions.calculateDirections(options:completionHandler:)</code> method, setting the <code>includesSteps</code> option to <code>true</code> in the <code>RouteOptions</code> object that you pass into that method.
/// \param json A JSON dictionary representation of a route step object as returnd by the Mapbox Directions API.
///
- (nonnull instancetype)initWithJson:(NSDictionary<NSString *, id> * _Nonnull)json;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL supportsSecureCoding;)
+ (BOOL)supportsSecureCoding SWIFT_WARN_UNUSED_RESULT;
+ (void)setSupportsSecureCoding:(BOOL)value;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
/// An array of geographic coordinates defining the path of the route step from the location of the maneuver to the location of the next step’s maneuver.
/// The value of this property may be <code>nil</code>, for example when the maneuver type is <code>arrive</code>.
/// Using the <a href="https://www.mapbox.com/ios-sdk/">Mapbox Maps SDK for iOS</a> or <a href="https://github.com/mapbox/mapbox-gl-native/tree/master/platform/macos/">Mapbox Maps SDK for macOS</a>, you can create an <code>MGLPolyline</code> object using these coordinates to display a portion of a route on an <code>MGLMapView</code>.
@property (nonatomic, readonly, copy) NSArray<NSValue *> * _Nullable coordinates;
/// The number of coordinates.
/// The value of this property may be zero, for example when the maneuver type is <code>arrive</code>.
/// note:
/// This initializer is intended for Objective-C usage. In Swift code, use the <code>coordinates.count</code> property.
@property (nonatomic, readonly) NSUInteger coordinateCount;
/// Retrieves the coordinates.
/// The array may be empty, for example when the maneuver type is <code>arrive</code>.
/// Using the <a href="https://www.mapbox.com/ios-sdk/">Mapbox Maps SDK for iOS</a> or <a href="https://github.com/mapbox/mapbox-gl-native/tree/master/platform/macos/">Mapbox Maps SDK for macOS</a>, you can create an <code>MGLPolyline</code> object using these coordinates to display a portion of a route on an <code>MGLMapView</code>.
/// precondition:
/// <code>coordinates</code> must be large enough to hold <code>coordinateCount</code> instances of <code>CLLocationCoordinate2D</code>.
/// note:
/// This initializer is intended for Objective-C usage. In Swift code, use the <code>coordinates</code> property.
/// \param coordinates A pointer to a C array of <code>CLLocationCoordinate2D</code> instances. On output, this array contains all the vertices of the overlay.
///
///
/// returns:
/// True if the step has coordinates and <code>coordinates</code> has been populated, or false if the step has no coordinates and <code>coordinates</code> has not been modified.
- (BOOL)getCoordinates:(CLLocationCoordinate2D * _Nonnull)coordinates SWIFT_WARN_UNUSED_RESULT;
/// A string with instructions explaining how to perform the step’s maneuver.
/// You can display this string or read it aloud to the user. The string does not include the distance to or from the maneuver. For instructions optimized for real-time delivery during turn-by-turn navigation, set the <code>RouteOptions.includesSpokenInstructions</code> option and use the <code>instructionsSpokenAlongStep</code> property. If you need customized instructions, you can construct them yourself from the step’s other properties or use <a href="https://github.com/Project-OSRM/osrm-text-instructions.swift/">OSRM Text Instructions</a>.
/// note:
/// If you use MapboxDirections.swift with the Mapbox Directions API, this property is formatted and localized for display to the user. If you use OSRM directly, this property contains a basic string that only includes the maneuver type and direction. Use <a href="https://github.com/Project-OSRM/osrm-text-instructions.swift/">OSRM Text Instructions</a> to construct a complete, localized instruction string for display.
@property (nonatomic, readonly, copy) NSString * _Nonnull instructions;
/// Instructions about the next step’s maneuver, optimized for speech synthesis.
/// As the user traverses this step, you can give them advance notice of the upcoming maneuver by reading aloud each item in this array in order as the user reaches the specified distances along this step. The text of the spoken instructions refers to the details in the next step, but the distances are measured from the beginning of this step.
/// This property is non-<code>nil</code> if the <code>RouteOptions.includesSpokenInstructions</code> option is set to <code>true</code>. For instructions designed for display, use the <code>instructions</code> property.
@property (nonatomic, readonly, copy) NSArray<MBSpokenInstruction *> * _Nullable instructionsSpokenAlongStep;
/// :nodoc:
/// Instructions about the next step’s maneuver, optimized for display in real time.
/// As the user traverses this step, you can give them advance notice of the upcoming maneuver by displaying each item in this array in order as the user reaches the specified distances along this step. The text and images of the visual instructions refer to the details in the next step, but the distances are measured from the beginning of this step.
/// This property is non-<code>nil</code> if the <code>RouteOptions.includesVisualInstructions</code> option is set to <code>true</code>. For instructions designed for speech synthesis, use the <code>instructionsSpokenAlongStep</code> property. For instructions designed for display in a static list, use the <code>instructions</code> property.
@property (nonatomic, readonly, copy) NSArray<MBVisualInstruction *> * _Nullable instructionsDisplayedAlongStep;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// The type of maneuver required for beginning this step.
@property (nonatomic, readonly) enum MBManeuverType maneuverType;
/// Additional directional information to clarify the maneuver type.
@property (nonatomic, readonly) enum MBManeuverDirection maneuverDirection;
/// The location of the maneuver at the beginning of this step.
@property (nonatomic, readonly) CLLocationCoordinate2D maneuverLocation;
/// Any <a href="https://en.wikipedia.org/wiki/Exit_number">exit numbers</a> assigned to the highway exit at the maneuver.
/// This property is only set when the <code>maneuverType</code> is <code>ManeuverType.takeOffRamp</code>. For the number of exits from the previous maneuver, regardless of the highway’s exit numbering scheme, use the <code>exitIndex</code> property. For the route reference codes associated with the connecting road, use the <code>destinationCodes</code> property. For the names associated with a roundabout exit, use the <code>exitNames</code> property.
/// An exit number is an alphanumeric identifier posted at or ahead of a highway off-ramp. Exit numbers may increase or decrease sequentially along a road, or they may correspond to distances from either end of the road. An alphabetic suffix may appear when multiple exits are located in the same interchange. If multiple exits are <a href="https://en.wikipedia.org/wiki/Local-express_lanes#Example_of_cloverleaf_interchanges">combined into a single exit</a>, the step may have multiple exit codes.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable exitCodes;
/// The names of the roundabout exit.
/// This property is only set for roundabout (traffic circle or rotary) maneuvers. For the signposted names associated with a highway exit, use the <code>destinations</code> property. For the signposted exit numbers, use the <code>exitCodes</code> property.
/// If you display a name to the user, you may need to abbreviate common words like “East” or “Boulevard” to ensure that it fits in the allotted space.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable exitNames;
/// A phonetic or phonemic transcription indicating how to pronounce the names in the <code>exitNames</code> property.
/// This property is only set for roundabout (traffic circle or rotary) maneuvers.
/// The transcription is written in the <a href="https://en.wikipedia.org/wiki/International_Phonetic_Alphabet">International Phonetic Alphabet</a>.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable phoneticExitNames;
/// The step’s distance, measured in meters.
/// The value of this property accounts for the distance that the user must travel to go from this step’s maneuver location to the next step’s maneuver location. It is not the sum of the direct distances between the route’s waypoints, nor should you assume that the user would travel along this distance at a fixed speed.
@property (nonatomic, readonly) CLLocationDistance distance;
/// The step’s expected travel time, measured in seconds.
/// The value of this property reflects the time it takes to go from this step’s maneuver location to the next step’s maneuver location. If the route was calculated using the <code>MBDirectionsProfileIdentifierAutomobileAvoidingTraffic</code> profile, this property reflects current traffic conditions at the time of the request, not necessarily the traffic conditions at the time the user would begin this step. For other profiles, this property reflects travel time under ideal conditions and does not account for traffic congestion. If the step makes use of a ferry or train, the actual travel time may additionally be subject to the schedules of those services.
/// Do not assume that the user would travel along the step at a fixed speed. For the expected travel time on each individual segment along the leg, specify the <code>AttributeOptions.expectedTravelTime</code> option and use the <code>RouteLeg.expectedSegmentTravelTimes</code> property.
@property (nonatomic, readonly) NSTimeInterval expectedTravelTime;
/// The names of the road or path leading from this step’s maneuver to the next step’s maneuver.
/// If the maneuver is a turning maneuver, the step’s names are the name of the road or path onto which the user turns. If you display a name to the user, you may need to abbreviate common words like “East” or “Boulevard” to ensure that it fits in the allotted space.
/// If the maneuver is a roundabout maneuver, the outlet to take is named in the <code>exitNames</code> property; the <code>names</code> property is only set for large roundabouts that have their own names.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable names;
/// A phonetic or phonemic transcription indicating how to pronounce the names in the <code>names</code> property.
/// The transcription is written in the <a href="https://en.wikipedia.org/wiki/International_Phonetic_Alphabet">International Phonetic Alphabet</a>.
/// If the maneuver traverses a large, named roundabout, the <code>exitPronunciationHints</code> property contains a hint about how to pronounce the names of the outlet to take.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable phoneticNames;
/// Any route reference codes assigned to the road or path leading from this step’s maneuver to the next step’s maneuver.
/// A route reference code commonly consists of an alphabetic network code, a space or hyphen, and a route number. You should not assume that the network code is globally unique: for example, a network code of “NH” may indicate a “National Highway” or “New Hampshire”. Moreover, a route number may not even uniquely identify a route within a given network.
/// If a highway ramp is part of a numbered route, its reference code is contained in this property. On the other hand, guide signage for a highway ramp usually indicates route reference codes of the adjoining road; use the <code>destinationCodes</code> property for those route reference codes.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable codes;
/// The mode of transportation used for the step.
/// This step may use a different mode of transportation than the overall route.
@property (nonatomic, readonly) enum MBTransportType transportType;
/// Any route reference codes that appear on guide signage for the road leading from this step’s maneuver to the next step’s maneuver.
/// This property is typically available in steps leading to or from a freeway or expressway. This property contains route reference codes associated with a road later in the route. If a highway ramp is itself part of a numbered route, its reference code is contained in the <code>codes</code> property. For the signposted exit numbers associated with a highway exit, use the <code>exitCodes</code> property.
/// A route reference code commonly consists of an alphabetic network code, a space or hyphen, and a route number. You should not assume that the network code is globally unique: for example, a network code of “NH” may indicate a “National Highway” or “New Hampshire”. Moreover, a route number may not even uniquely identify a route within a given network. A destination code for a divided road is often suffixed with the cardinal direction of travel, for example “I 80 East”.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable destinationCodes;
/// Destinations, such as <a href="https://en.wikipedia.org/wiki/Control_city">control cities</a>, that appear on guide signage for the road leading from this step’s maneuver to the next step’s maneuver.
/// This property is typically available in steps leading to or from a freeway or expressway.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable destinations;
/// An array of intersections along the step.
/// Each item in the array corresponds to a cross street, starting with the intersection at the maneuver location indicated by the coordinates property and continuing with each cross street along the step.
@property (nonatomic, readonly, copy) NSArray<MBIntersection *> * _Nullable intersections;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// An instruction about an upcoming <code>RouteStep</code>’s maneuver, optimized for speech synthesis.
/// The instruction is provided in two formats: plain text and text marked up according to the <a href="https://en.wikipedia.org/wiki/Speech_Synthesis_Markup_Language">Speech Synthesis Markup Language</a> (SSML). Use a speech synthesizer such as <code>AVSpeechSynthesizer</code> or Amazon Polly to read aloud the instruction.
/// The <code>distanceAlongStep</code> property is measured from the beginning of the step associated with this object. By contrast, the <code>text</code> and <code>ssmlText</code> properties refer to the details in the following step. It is also possible for the instruction to refer to two following steps simultaneously when needed for safe navigation.
SWIFT_CLASS_NAMED("SpokenInstruction")
@interface MBSpokenInstruction : NSObject <NSSecureCoding>
/// A distance along the associated <code>RouteStep</code> at which to read the instruction aloud.
/// The distance is measured in meters from the beginning of the associated step.
@property (nonatomic, readonly) CLLocationDistance distanceAlongStep;
/// A plain-text representation of the speech-optimized instruction.
/// This representation is appropriate for speech synthesizers that lack support for the <a href="https://en.wikipedia.org/wiki/Speech_Synthesis_Markup_Language">Speech Synthesis Markup Language</a> (SSML), such as <code>AVSpeechSynthesizer</code>. For speech synthesizers that support SSML, use the <code>ssmlText</code> property instead.
@property (nonatomic, readonly, copy) NSString * _Nonnull text;
/// A formatted representation of the speech-optimized instruction.
/// This representation is appropriate for speech synthesizers that support the <a href="https://en.wikipedia.org/wiki/Speech_Synthesis_Markup_Language">Speech Synthesis Markup Language</a> (SSML), such as <a href="https://aws.amazon.com/polly/">Amazon Polly</a>. Numbers and names are marked up to ensure correct pronunciation. For speech synthesizers that lack SSML support, use the <code>text</code> property instead.
@property (nonatomic, readonly, copy) NSString * _Nonnull ssmlText;
/// Initialize a <code>SpokenInstruction</code> from a dictionary.
- (nonnull instancetype)initWithJson:(NSDictionary<NSString *, id> * _Nonnull)json;
/// Initialize a <code>SpokenInstruction</code>.
/// \param distanceAlongStep A distance along the associated <code>RouteStep</code> at which to read the instruction aloud.
///
/// \param text A plain-text representation of the speech-optimized instruction.
///
/// \param ssmlText A formatted representation of the speech-optimized instruction.
///
- (nonnull instancetype)initWithDistanceAlongStep:(CLLocationDistance)distanceAlongStep text:(NSString * _Nonnull)text ssmlText:(NSString * _Nonnull)ssmlText OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL supportsSecureCoding;)
+ (BOOL)supportsSecureCoding SWIFT_WARN_UNUSED_RESULT;
+ (void)setSupportsSecureCoding:(BOOL)value;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

@class CLHeading;

/// A <code>Waypoint</code> object indicates a location along a route. It may be the route’s origin or destination, or it may be another location that the route visits. A waypoint object indicates the location’s geographic location along with other optional information, such as a name or the user’s direction approaching the waypoint. You create a <code>RouteOptions</code> object using waypoint objects and also receive waypoint objects in the completion handler of the <code>Directions.calculate(_:completionHandler:)</code> method.
SWIFT_CLASS_NAMED("Waypoint")
@interface MBWaypoint : NSObject <NSCopying, NSSecureCoding>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL supportsSecureCoding;)
+ (BOOL)supportsSecureCoding SWIFT_WARN_UNUSED_RESULT;
/// Initializes a new waypoint object with the given geographic coordinate and an optional accuracy and name.
/// \param coordinate The geographic coordinate of the waypoint.
///
/// \param coordinateAccuracy The maximum distance away from the waypoint that the route may come and still be considered viable. This parameter is measured in meters. A negative value means the route may be an indefinite number of meters away from the route and still be considered viable.
/// It is recommended that the value of this parameter be greater than the <code>horizontalAccuracy</code> property of a <code>CLLocation</code> object obtained from a <code>CLLocationManager</code> object. There is a high likelihood that the user may be located some distance away from a navigable road, for instance if the user is currently on a driveway or inside a building.
///
/// \param name The name of the waypoint. This parameter does not affect the route but may help you to distinguish one waypoint from another.
///
- (nonnull instancetype)initWithCoordinate:(CLLocationCoordinate2D)coordinate coordinateAccuracy:(CLLocationAccuracy)coordinateAccuracy name:(NSString * _Nullable)name OBJC_DESIGNATED_INITIALIZER;
/// Initializes a new waypoint object with the given <code>CLLocation</code> object and an optional <code>CLHeading</code> object and name.
/// note:
/// This initializer is intended for <code>CLLocation</code> objects created using the <code>CLLocation.init(latitude:longitude:)</code> initializer. If you intend to use a <code>CLLocation</code> object obtained from a <code>CLLocationManager</code> object, consider increasing the <code>horizontalAccuracy</code> or set it to a negative value to avoid overfitting, since the <code>Waypoint</code> class’s <code>coordinateAccuracy</code> property represents the maximum allowed deviation from the waypoint. There is a high likelihood that the user may be located some distance away from a navigable road, for instance if the user is currently on a driveway of inside a building.
/// \param location A <code>CLLocation</code> object representing the waypoint’s location. This initializer respects the <code>CLLocation</code> class’s <code>coordinate</code> and <code>horizontalAccuracy</code> properties, converting them into the <code>coordinate</code> and <code>coordinateAccuracy</code> properties, respectively.
///
/// \param heading A <code>CLHeading</code> object representing the direction from which the route must approach the waypoint in order to be considered viable. This initializer respects the <code>CLHeading</code> class’s <code>trueHeading</code> property or <code>magneticHeading</code> property, converting it into the <code>headingAccuracy</code> property.
///
/// \param name The name of the waypoint. This parameter does not affect the route but may help you to distinguish one waypoint from another.
///
- (nonnull instancetype)initWithLocation:(CLLocation * _Nonnull)location heading:(CLHeading * _Nullable)heading name:(NSString * _Nullable)name OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
/// The geographic coordinate of the waypoint.
@property (nonatomic, readonly) CLLocationCoordinate2D coordinate;
/// The radius of uncertainty for the waypoint, measured in meters.
/// For a route to be considered viable, it must enter this waypoint’s circle of uncertainty. The <code>coordinate</code> property identifies the center of the circle, while this property indicates the circle’s radius. If the value of this property is negative, a route is considered viable regardless of whether it enters this waypoint’s circle of uncertainty, subject to an undefined maximum distance.
/// By default, the value of this property is a negative number.
@property (nonatomic) CLLocationAccuracy coordinateAccuracy;
/// The direction from which a route must approach this waypoint in order to be considered viable.
/// This property is measured in degrees clockwise from true north. A value of 0 degrees means due north, 90 degrees means due east, 180 degrees means due south, and so on. If the value of this property is negative, a route is considered viable regardless of the direction from which it approaches this waypoint.
/// If this waypoint is the first waypoint (the source waypoint), the route must start out by heading in the direction specified by this property. You should always set the <code>headingAccuracy</code> property in conjunction with this property. If the <code>headingAccuracy</code> property is set to a negative value, this property is ignored.
/// For driving directions, this property can be useful for avoiding a route that begins by going in the direction opposite the current direction of travel. For example, if you know the user is moving eastwardly and the first waypoint is the user’s current location, specifying a heading of 90 degrees and a heading accuracy of 90 degrees for the first waypoint avoids a route that begins with a “head west” instruction.
/// You should be certain that the user is in motion before specifying a heading and heading accuracy; otherwise, you may be unnecessarily filtering out the best route. For example, suppose the user is sitting in a car parked in a driveway, facing due north, with the garage in front and the street to the rear. In that case, specifying a heading of 0 degrees and a heading accuracy of 90 degrees may result in a route that begins on the back alley or, worse, no route at all. For this reason, it is recommended that you only specify a heading and heading accuracy when automatically recalculating directions due to the user deviating from the route.
/// By default, the value of this property is a negative number, meaning that a route is considered viable regardless of the direction of approach.
@property (nonatomic) CLLocationDirection heading;
/// The maximum amount, in degrees, by which a route’s approach to a waypoint may differ from <code>heading</code> in either direction in order to be considered viable.
/// A value of 0 degrees means that the approach must match the specified <code>heading</code> exactly – an unlikely scenario. A value of 180 degrees or more means that the approach may be as much as 180 degrees in either direction from the specified <code>heading</code>, effectively allowing a candidate route to approach the waypoint from any direction.
/// If you set the <code>heading</code> property, you should set this property to a value such as 90 degrees, to avoid filtering out routes whose approaches differ only slightly from the specified <code>heading</code>. Otherwise, if the <code>heading</code> property is set to a negative value, this property is ignored.
/// By default, the value of this property is a negative number, meaning that a route is considered viable regardless of the direction of approach.
@property (nonatomic) CLLocationDirection headingAccuracy;
/// The name of the waypoint.
/// This parameter does not affect the route, but you can set the name of a waypoint you pass into a <code>RouteOptions</code> object to help you distinguish one waypoint from another in the array of waypoints passed into the completion handler of the <code>Directions.calculate(_:completionHandler:)</code> method.
@property (nonatomic, copy) NSString * _Nullable name;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// A <code>Tracepoint</code> represents a location matched to the road network.
SWIFT_CLASS_NAMED("Tracepoint")
@interface MBTracepoint : MBWaypoint
/// Number of probable alternative matchings for this tracepoint. A value of zero indicates that this point was matched unambiguously.
@property (nonatomic) NSInteger alternateCount;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL supportsSecureCoding;)
+ (BOOL)supportsSecureCoding SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithCoordinate:(CLLocationCoordinate2D)coordinate coordinateAccuracy:(CLLocationAccuracy)coordinateAccuracy name:(NSString * _Nullable)name SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithLocation:(CLLocation * _Nonnull)location heading:(CLHeading * _Nullable)heading name:(NSString * _Nullable)name SWIFT_UNAVAILABLE;
@end

/// A <code>TransportType</code> specifies the mode of transportation used for part of a route.
typedef SWIFT_ENUM_NAMED(NSInteger, MBTransportType, "TransportType", closed) {
/// The step does not have a particular transport type associated with it.
/// This transport type is used as a workaround for bridging to Objective-C which does not support nullable enumeration-typed values.
  MBTransportTypeNone = 0,
/// The route requires the user to drive or ride a car, truck, or motorcycle.
/// This is the usual transport type when the <code>profileIdentifier</code> is <code>MBDirectionsProfileIdentifierAutomobile</code> or <code>MBDirectionsProfileIdentifierAutomobileAvoidingTraffic</code>.
  MBTransportTypeAutomobile = 1,
/// The route requires the user to board a ferry.
/// The user should verify that the ferry is in operation. For driving and cycling directions, the user should also verify that his or her vehicle is permitted onboard the ferry.
  MBTransportTypeFerry = 2,
/// The route requires the user to cross a movable bridge.
/// The user may need to wait for the movable bridge to become passable before continuing.
  MBTransportTypeMovableBridge = 3,
/// The route becomes impassable at this point.
/// You should not encounter this transport type under normal circumstances.
  MBTransportTypeInaccessible = 4,
/// The route requires the user to walk.
/// This is the usual transport type when the <code>profileIdentifier</code> is <code>MBDirectionsProfileIdentifierWalking</code>. For cycling directions, this value indicates that the user is expected to dismount.
  MBTransportTypeWalking = 5,
/// The route requires the user to ride a bicycle.
/// This is the usual transport type when the <code>profileIdentifier</code> is <code>MBDirectionsProfileIdentifierCycling</code>.
  MBTransportTypeCycling = 6,
/// The route requires the user to board a train.
/// The user should consult the train’s timetable. For cycling directions, the user should also verify that bicycles are permitted onboard the train.
  MBTransportTypeTrain = 7,
};

@class MBVisualInstructionComponent;

/// :nodoc:
/// Encompasses all information necessary for creating a visual cue about a given <code>RouteStep</code>.
SWIFT_CLASS_NAMED("VisualInstruction")
@interface MBVisualInstruction : NSObject <NSSecureCoding>
/// :nodoc:
/// Distance in meters from the beginning of the step at which the visual instruction should be visible.
@property (nonatomic, readonly) CLLocationDistance distanceAlongStep;
/// :nodoc:
/// A plain text representation of <code>primaryTextComponents</code>.
@property (nonatomic, readonly, copy) NSString * _Nonnull primaryText;
/// :nodoc:
/// Most important visual content to convey to the user about the <code>RouteStep</code>.
/// This is the structured representation of <code>primaryText</code>.
@property (nonatomic, readonly, copy) NSArray<MBVisualInstructionComponent *> * _Nonnull primaryTextComponents;
/// :nodoc:
/// A plain text representation of <code>secondaryTextComponents</code>.
@property (nonatomic, readonly, copy) NSString * _Nullable secondaryText;
/// :nodoc:
/// Ancillary visual information about the <code>RouteStep</code>.
/// This is the structured representation of <code>secondaryText</code>.
@property (nonatomic, readonly, copy) NSArray<MBVisualInstructionComponent *> * _Nullable secondaryTextComponents;
/// :nodoc:
/// Indicates what side of a bidirectional road the driver must be driving on. Also referred to as the rule of the road.
@property (nonatomic) enum MBDrivingSide drivingSide;
/// :nodoc:
/// Initialize a <code>VisualInstruction</code> from a dictionary given a <code>DrivingSide</code>.
- (nonnull instancetype)initWithJson:(NSDictionary<NSString *, id> * _Nonnull)json drivingSide:(enum MBDrivingSide)drivingSide;
/// :nodoc:
/// Initialize a <code>VisualInstruction</code>.
- (nonnull instancetype)initWithDistanceAlongStep:(CLLocationDistance)distanceAlongStep primaryText:(NSString * _Nonnull)primaryText primaryTextComponents:(NSArray<MBVisualInstructionComponent *> * _Nonnull)primaryTextComponents secondaryText:(NSString * _Nullable)secondaryText secondaryTextComponents:(NSArray<MBVisualInstructionComponent *> * _Nullable)secondaryTextComponents drivingSide:(enum MBDrivingSide)drivingSide OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL supportsSecureCoding;)
+ (BOOL)supportsSecureCoding SWIFT_WARN_UNUSED_RESULT;
+ (void)setSupportsSecureCoding:(BOOL)value;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

enum MBVisualInstructionComponentType : NSInteger;

/// :nodoc:
/// A component of a <code>VisualInstruction</code> that represents a single run of similarly formatted text or an image with a textual fallback representation.
SWIFT_CLASS_NAMED("VisualInstructionComponent")
@interface MBVisualInstructionComponent : NSObject <NSSecureCoding>
/// :nodoc:
/// The plain text representation of this component.
/// Use this property if <code>imageURLs</code> is an empty dictionary or if the URLs contained in that property are not yet available.
@property (nonatomic, readonly, copy) NSString * _Nullable text;
/// :nodoc:
/// The URL to an image representation of this component.
/// The URL refers to an image that uses the device’s native screen scale.
@property (nonatomic, copy) NSURL * _Nullable imageURL;
/// :nodoc:
/// The type of visual instruction component. You can display the component differently depending on its type.
@property (nonatomic) enum MBVisualInstructionComponentType type;
/// :nodoc:
/// The maneuver type for the <code>VisualInstruction</code>.
@property (nonatomic) enum MBManeuverType maneuverType;
/// :nodoc:
/// The modifier type for the <code>VisualInstruction</code>.
@property (nonatomic) enum MBManeuverDirection maneuverDirection;
/// An abbreviated version of the text for a given component.
@property (nonatomic, copy) NSString * _Nullable abbreviation;
/// The priority in which the component should be abbreviated. Lower numbers should be abbreviated first.
@property (nonatomic) NSInteger abbreviationPriority;
/// :nodoc:
/// Initialize A <code>VisualInstructionComponent</code>.
- (nonnull instancetype)initWithManeuverType:(enum MBManeuverType)maneuverType maneuverDirection:(enum MBManeuverDirection)maneuverDirection json:(NSDictionary<NSString *, id> * _Nonnull)json;
/// :nodoc:
/// Initialize A <code>VisualInstructionComponent</code>.
- (nonnull instancetype)initWithType:(enum MBVisualInstructionComponentType)type text:(NSString * _Nullable)text imageURL:(NSURL * _Nullable)imageURL maneuverType:(enum MBManeuverType)maneuverType maneuverDirection:(enum MBManeuverDirection)maneuverDirection abbreviation:(NSString * _Nullable)abbreviation abbreviationPriority:(NSInteger)abbreviationPriority OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL supportsSecureCoding;)
+ (BOOL)supportsSecureCoding SWIFT_WARN_UNUSED_RESULT;
+ (void)setSupportsSecureCoding:(BOOL)value;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

/// <code>VisualInstructionComponentType</code> describes the type of <code>VisualInstructionComponent</code>.
typedef SWIFT_ENUM_NAMED(NSInteger, MBVisualInstructionComponentType, "VisualInstructionComponentType", closed) {
/// The component separates two other destination components.
/// If the two adjacent components are both displayed as images, you can hide this delimiter component.
  MBVisualInstructionComponentTypeDelimiter = 0,
/// The component bears the name of a place or street.
  MBVisualInstructionComponentTypeText = 1,
/// Component contains an image that should be rendered.
  MBVisualInstructionComponentTypeImage = 2,
/// The compoment contains the localized word for “exit”.
/// This component may appear before or after an <code>.exitNumber</code> component, depending on the language.
  MBVisualInstructionComponentTypeExit = 3,
/// A component contains an exit number.
  MBVisualInstructionComponentTypeExitCode = 4,
};




#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#elif defined(__i386__) && __i386__
// Generated by Apple Swift version 5.0.1 effective-4.1.50 (swiftlang-1001.0.82.4 clang-1001.0.46.5)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreLocation;
@import Foundation;
@import ObjectiveC;
#endif

#import <MapboxDirections/MapboxDirections.h>

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="MapboxDirections",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif



/// A <code>CongestionLevel</code> indicates the level of traffic congestion along a road segment relative to the normal flow of traffic along that segment. You can color-code a route line according to the congestion level along each segment of the route.
typedef SWIFT_ENUM_NAMED(NSInteger, MBCongestionLevel, "CongestionLevel", closed) {
/// There is not enough data to determine the level of congestion along the road segment.
  MBCongestionLevelUnknown = 0,
/// The road segment has little or no congestion. Traffic is flowing smoothly.
/// Low congestion levels are conventionally highlighted in green or not highlighted at all.
  MBCongestionLevelLow = 1,
/// The road segment has moderate, stop-and-go congestion. Traffic is flowing but speed is impeded.
/// Moderate congestion levels are conventionally highlighted in yellow.
  MBCongestionLevelModerate = 2,
/// The road segment has heavy, bumper-to-bumper congestion. Traffic is barely moving.
/// Heavy congestion levels are conventionally highlighted in orange.
  MBCongestionLevelHeavy = 3,
/// The road segment has severe congestion. Traffic may be completely stopped.
/// Severe congestion levels are conventionally highlighted in red.
  MBCongestionLevelSevere = 4,
};

@class MBRouteOptions;
@class MBWaypoint;
@class MBRoute;
@class NSError;
@class NSURLSessionDataTask;
@class MBMatchOptions;
@class MBMatch;
@class MBDirectionsOptions;

/// A <code>Directions</code> object provides you with optimal directions between different locations, or waypoints. The directions object passes your request to the <a href="https://www.mapbox.com/api-documentation/?language=Swift#directions">Mapbox Directions API</a> and returns the requested information to a closure (block) that you provide. A directions object can handle multiple simultaneous requests. A <code>RouteOptions</code> object specifies criteria for the results, such as intermediate waypoints, a mode of transportation, or the level of detail to be returned.
/// Each result produced by the directions object is stored in a <code>Route</code> object. Depending on the <code>RouteOptions</code> object you provide, each route may include detailed information suitable for turn-by-turn directions, or it may include only high-level information such as the distance, estimated travel time, and name of each leg of the trip. The waypoints that form the request may be conflated with nearby locations, as appropriate; the resulting waypoints are provided to the closure.
SWIFT_CLASS_NAMED("Directions")
@interface MBDirections : NSObject
/// The shared directions object.
/// To use this object, a Mapbox <a href="https://www.mapbox.com/help/define-access-token/">access token</a> should be specified in the <code>MGLMapboxAccessToken</code> key in the main application bundle’s Info.plist.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) MBDirections * _Nonnull sharedDirections;)
+ (MBDirections * _Nonnull)sharedDirections SWIFT_WARN_UNUSED_RESULT;
/// Initializes a newly created directions object with an optional access token and host.
/// \param accessToken A Mapbox <a href="https://www.mapbox.com/help/define-access-token/">access token</a>. If an access token is not specified when initializing the directions object, it should be specified in the <code>MGLMapboxAccessToken</code> key in the main application bundle’s Info.plist.
///
/// \param host An optional hostname to the server API. The <a href="https://www.mapbox.com/api-documentation/?language=Swift#directions">Mapbox Directions API</a> endpoint is used by default.
///
- (nonnull instancetype)initWithAccessToken:(NSString * _Nullable)accessToken host:(NSString * _Nullable)host OBJC_DESIGNATED_INITIALIZER;
/// Initializes a newly created directions object with an optional access token.
/// The directions object sends requests to the <a href="https://www.mapbox.com/api-documentation/?language=Swift#directions">Mapbox Directions API</a> endpoint.
/// \param accessToken A Mapbox <a href="https://www.mapbox.com/help/define-access-token/">access token</a>. If an access token is not specified when initializing the directions object, it should be specified in the <code>MGLMapboxAccessToken</code> key in the main application bundle’s Info.plist.
///
- (nonnull instancetype)initWithAccessToken:(NSString * _Nullable)accessToken;
/// Begins asynchronously calculating the route or routes using the given options and delivers the results to a closure.
/// This method retrieves the routes asynchronously over a network connection. If a connection error or server error occurs, details about the error are passed into the given completion handler in lieu of the routes.
/// Routes may be displayed atop a <a href="https://www.mapbox.com/maps/">Mapbox map</a>. They may be cached but may not be stored permanently. To use the results in other contexts or store them permanently, <a href="https://www.mapbox.com/directions/#pricing">upgrade to a Mapbox enterprise plan</a>.
/// \param options A <code>RouteOptions</code> object specifying the requirements for the resulting routes.
///
/// \param completionHandler The closure (block) to call with the resulting routes. This closure is executed on the application’s main thread.
///
///
/// returns:
/// The data task used to perform the HTTP request. If, while waiting for the completion handler to execute, you no longer want the resulting routes, cancel this task.
- (NSURLSessionDataTask * _Nonnull)calculateDirectionsWithOptions:(MBRouteOptions * _Nonnull)options completionHandler:(void (^ _Nonnull)(NSArray<MBWaypoint *> * _Nullable, NSArray<MBRoute *> * _Nullable, NSError * _Nullable))completionHandler;
/// Begins asynchronously calculating a match using the given options and delivers the results to a closure.
/// \param options A <code>MatchOptions</code> object specifying the requirements for the resulting match.
///
/// \param completionHandler The closure (block) to call with the resulting routes. This closure is executed on the application’s main thread.
///
///
/// returns:
/// The data task used to perform the HTTP request. If, while waiting for the completion handler to execute, you no longer want the resulting routes, cancel this task.
- (NSURLSessionDataTask * _Nonnull)calculateMatchesWithOptions:(MBMatchOptions * _Nonnull)options completionHandler:(void (^ _Nonnull)(NSArray<MBMatch *> * _Nullable, NSError * _Nullable))completionHandler;
- (NSURLSessionDataTask * _Nonnull)calculateRoutesMatchingOptions:(MBMatchOptions * _Nonnull)options completionHandler:(void (^ _Nonnull)(NSArray<MBWaypoint *> * _Nullable, NSArray<MBRoute *> * _Nullable, NSError * _Nullable))completionHandler;
/// The HTTP URL used to fetch the routes from the API.
/// After requesting the URL returned by this method, you can parse the JSON data in the response and pass it into the <code>Route.init(json:waypoints:profileIdentifier:)</code> initializer.
- (NSURL * _Nonnull)URLForCalculatingDirectionsWithOptions:(MBDirectionsOptions * _Nonnull)options SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

@class NSCoder;
enum MBRouteShapeFormat : NSUInteger;
enum MBRouteShapeResolution : NSUInteger;
enum MBMeasurementSystem : NSUInteger;

/// Options for calculating results from the Mapbox Directions service.
/// You do not create instances of this class directly. Instead, create instances of <code>MatchOptions</code> or <code>RouteOptions</code>.
SWIFT_CLASS_NAMED("DirectionsOptions")
@interface MBDirectionsOptions : NSObject <NSCopying, NSSecureCoding>
/// Initializes a route options object for routes between the given waypoints and an optional profile identifier.
/// \param waypoints An array of <code>Waypoint</code> objects representing locations that the route should visit in chronological order. The array should contain at least two waypoints (the source and destination) and at most 25 waypoints. (Some profiles, such as <code>MBDirectionsProfileIdentifierAutomobileAvoidingTraffic</code>, <a href="https://www.mapbox.com/api-documentation/#directions">may have lower limits</a>.)
///
/// \param profileIdentifier A string specifying the primary mode of transportation for the routes. This parameter, if set, should be set to <code>MBDirectionsProfileIdentifierAutomobile</code>, <code>MBDirectionsProfileIdentifierAutomobileAvoidingTraffic</code>, <code>MBDirectionsProfileIdentifierCycling</code>, or <code>MBDirectionsProfileIdentifierWalking</code>. <code>MBDirectionsProfileIdentifierAutomobile</code> is used by default.
///
- (nonnull instancetype)initWithWaypoints:(NSArray<MBWaypoint *> * _Nonnull)waypoints profileIdentifier:(MBDirectionsProfileIdentifier _Nullable)profileIdentifier OBJC_DESIGNATED_INITIALIZER;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL supportsSecureCoding;)
+ (BOOL)supportsSecureCoding SWIFT_WARN_UNUSED_RESULT;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEqualToDirectionsOptions:(MBDirectionsOptions * _Nullable)directionsOptions SWIFT_WARN_UNUSED_RESULT;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
/// An array of <code>Waypoint</code> objects representing locations that the route should visit in chronological order.
/// A waypoint object indicates a location to visit, as well as an optional heading from which to approach the location.
/// The array should contain at least two waypoints (the source and destination) and at most 25 waypoints.
@property (nonatomic, copy) NSArray<MBWaypoint *> * _Nonnull waypoints;
/// A string specifying the primary mode of transportation for the routes.
/// This property should be set to <code>MBDirectionsProfileIdentifierAutomobile</code>, <code>MBDirectionsProfileIdentifierAutomobileAvoidingTraffic</code>, <code>MBDirectionsProfileIdentifierCycling</code>, or <code>MBDirectionsProfileIdentifierWalking</code>. The default value of this property is <code>MBDirectionsProfileIdentifierAutomobile</code>, which specifies driving directions.
@property (nonatomic) MBDirectionsProfileIdentifier _Nonnull profileIdentifier;
/// A Boolean value indicating whether <code>MBRouteStep</code> objects should be included in the response.
/// If the value of this property is <code>true</code>, the returned route contains turn-by-turn instructions. Each returned <code>MBRoute</code> object contains one or more <code>MBRouteLeg</code> object that in turn contains one or more <code>MBRouteStep</code> objects. On the other hand, if the value of this property is <code>false</code>, the <code>MBRouteLeg</code> objects contain no <code>MBRouteStep</code> objects.
/// If you only want to know the distance or estimated travel time to a destination, set this property to <code>false</code> to minimize the size of the response and the time it takes to calculate the response. If you need to display turn-by-turn instructions, set this property to <code>true</code>.
/// The default value of this property is <code>false</code>.
@property (nonatomic) BOOL includesSteps;
/// Format of the data from which the shapes of the returned route and its steps are derived.
/// This property has no effect on the returned shape objects, although the choice of format can significantly affect the size of the underlying HTTP response.
/// The default value of this property is <code>polyline</code>.
@property (nonatomic) enum MBRouteShapeFormat shapeFormat;
/// Resolution of the shape of the returned route.
/// This property has no effect on the shape of the returned route’s steps.
/// The default value of this property is <code>low</code>, specifying a low-resolution route shape.
@property (nonatomic) enum MBRouteShapeResolution routeShapeResolution;
/// AttributeOptions for the route. Any combination of <code>AttributeOptions</code> can be specified.
/// By default, no attribute options are specified. It is recommended that <code>routeShapeResolution</code> be set to <code>.full</code>.
@property (nonatomic) MBAttributeOptions attributeOptions;
/// The locale in which the route’s instructions are written.
/// If you use MapboxDirections.swift with the Mapbox Directions API or Map Matching API, this property affects the sentence contained within the <code>RouteStep.instructions</code> property, but it does not affect any road names contained in that property or other properties such as <code>RouteStep.name</code>.
/// The Directions API can provide instructions in <a href="https://www.mapbox.com/api-documentation/#instructions-languages">a number of languages</a>. Set this property to <code>Bundle.main.preferredLocalizations.first</code> or <code>Locale.autoupdatingCurrent</code> to match the application’s language or the system language, respectively.
/// By default, this property is set to the current system locale.
@property (nonatomic, copy) NSLocale * _Nonnull locale;
/// A Boolean value indicating whether each route step includes an array of <code>SpokenInstructions</code>.
/// If this option is set to true, the <code>RouteStep.instructionsSpokenAlongStep</code> property is set to an array of <code>SpokenInstructions</code>.
@property (nonatomic) BOOL includesSpokenInstructions;
/// The measurement system used in spoken instructions included in route steps.
/// If the <code>includesSpokenInstructions</code> property is set to <code>true</code>, this property determines the units used for measuring the distance remaining until an upcoming maneuver. If the <code>includesSpokenInstructions</code> property is set to <code>false</code>, this property has no effect.
/// You should choose a measurement system appropriate for the current region. You can also allow the user to indicate their preferred measurement system via a setting.
@property (nonatomic) enum MBMeasurementSystem distanceMeasurementSystem;
/// :nodoc:
/// If true, each <code>RouteStep</code> will contain the property <code>visualInstructionsAlongStep</code>.
/// <code>visualInstructionsAlongStep</code> contains an array of <code>VisualInstruction</code> used for visually conveying information about a given <code>RouteStep</code>.
@property (nonatomic) BOOL includesVisualInstructions;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

@class MBRouteLeg;

/// A <code>DirectionsResult</code> represents a result returned from either the Mapbox Directions service.
/// You do not create instances of this class directly. Instead, you receive <code>Route</code> or <code>Match</code> objects when you request directions using the <code>Directions.calculate(_:completionHandler:)</code> or <code>Directions.calculateRoutes(matching:completionHandler:)</code> method.
SWIFT_CLASS_NAMED("DirectionsResult")
@interface MBDirectionsResult : NSObject <NSSecureCoding>
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL supportsSecureCoding;)
+ (BOOL)supportsSecureCoding SWIFT_WARN_UNUSED_RESULT;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
/// An array of geographic coordinates defining the path of the route from start to finish.
/// This array may be <code>nil</code> or simplified depending on the <code>routeShapeResolution</code> property of the original <code>RouteOptions</code> object.
/// Using the <a href="https://www.mapbox.com/ios-sdk/">Mapbox Maps SDK for iOS</a> or <a href="https://github.com/mapbox/mapbox-gl-native/tree/master/platform/macos/">Mapbox Maps SDK for macOS</a>, you can create an <code>MGLPolyline</code> object using these coordinates to display an overview of the route on an <code>MGLMapView</code>.
@property (nonatomic, readonly, copy) NSArray<NSValue *> * _Nullable coordinates;
/// The number of coordinates.
/// The value of this property may be zero or reduced depending on the <code>routeShapeResolution</code> property of the original <code>RouteOptions</code> object.
/// note:
/// This initializer is intended for Objective-C usage. In Swift code, use the <code>coordinates.count</code> property.
@property (nonatomic, readonly) NSUInteger coordinateCount;
/// Retrieves the coordinates.
/// The array may be empty or simplified depending on the <code>routeShapeResolution</code> property of the original <code>RouteOptions</code> object.
/// Using the <a href="https://www.mapbox.com/ios-sdk/">Mapbox Maps SDK for iOS</a> or <a href="https://github.com/mapbox/mapbox-gl-native/tree/master/platform/macos/">Mapbox Maps SDK for macOS</a>, you can create an <code>MGLPolyline</code> object using these coordinates to display an overview of the route on an <code>MGLMapView</code>.
/// precondition:
/// <code>coordinates</code> must be large enough to hold <code>coordinateCount</code> instances of <code>CLLocationCoordinate2D</code>.
/// note:
/// This initializer is intended for Objective-C usage. In Swift code, use the <code>coordinates</code> property.
/// \param coordinates A pointer to a C array of <code>CLLocationCoordinate2D</code> instances. On output, this array contains all the vertices of the overlay.
///
- (void)getCoordinates:(CLLocationCoordinate2D * _Nonnull)coordinates;
/// An array of <code>RouteLeg</code> objects representing the legs of the route.
/// The number of legs in this array depends on the number of waypoints. A route with two waypoints (the source and destination) has one leg, a route with three waypoints (the source, an intermediate waypoint, and the destination) has two legs, and so on.
/// To determine the name of the route, concatenate the names of the route’s legs.
@property (nonatomic, readonly, copy) NSArray<MBRouteLeg *> * _Nonnull legs;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// The route’s distance, measured in meters.
/// The value of this property accounts for the distance that the user must travel to traverse the path of the route. It is the sum of the <code>distance</code> properties of the route’s legs, not the sum of the direct distances between the route’s waypoints. You should not assume that the user would travel along this distance at a fixed speed.
@property (nonatomic, readonly) CLLocationDistance distance;
/// The route’s expected travel time, measured in seconds.
/// The value of this property reflects the time it takes to traverse the entire route. It is the sum of the <code>expectedTravelTime</code> properties of the route’s legs. If the route was calculated using the <code>MBDirectionsProfileIdentifierAutomobileAvoidingTraffic</code> profile, this property reflects current traffic conditions at the time of the request, not necessarily the traffic conditions at the time the user would begin the route. For other profiles, this property reflects travel time under ideal conditions and does not account for traffic congestion. If the route makes use of a ferry or train, the actual travel time may additionally be subject to the schedules of those services.
/// Do not assume that the user would travel along the route at a fixed speed. For more granular travel times, use the <code>RouteLeg.expectedTravelTime</code> or <code>RouteStep.expectedTravelTime</code>. For even more granularity, specify the <code>AttributeOptions.expectedTravelTime</code> option and use the <code>RouteLeg.expectedSegmentTravelTimes</code> property.
@property (nonatomic, readonly) NSTimeInterval expectedTravelTime;
/// <code>RouteOptions</code> used to create the directions request.
/// The route options object’s profileIdentifier property reflects the primary mode of transportation used for the route. Individual steps along the route might use different modes of transportation as necessary.
@property (nonatomic, readonly, strong) MBDirectionsOptions * _Nonnull directionsOptions;
/// The <a href="https://www.mapbox.com/help/define-access-token/">access token</a> used to make the directions request.
/// This property is set automatically if a request is made via <code>Directions.calculate(_:completionHandler:)</code>.
@property (nonatomic, copy) NSString * _Nullable accessToken;
/// The endpoint used to make the directions request.
/// This property is set automatically if a request is made via <code>Directions.calculate(_:completionHandler:)</code>.
@property (nonatomic, copy) NSURL * _Nullable apiEndpoint;
/// A unique identifier for a directions request.
/// Each route produced by a single call to <code>Directions.calculate(_:completionHandler:)</code> has the same route identifier.
@property (nonatomic, copy) NSString * _Nullable routeIdentifier;
/// The locale to use for spoken instructions.
/// This locale is specific to Mapbox Voice API. If <code>nil</code> is returned, the instruction should be spoken with an alternative speech synthesizer.
@property (nonatomic, copy) NSLocale * _Nullable speechLocale;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

/// A <code>DrivingSide</code> indicates which side of the road cars and traffic flow.
typedef SWIFT_ENUM_NAMED(NSInteger, MBDrivingSide, "DrivingSide", closed) {
/// Indicates driving occurs on the <code>left</code> side.
  MBDrivingSideLeft = 0,
/// Indicates driving occurs on the <code>right</code> side.
  MBDrivingSideRight = 1,
};



/// A <code>RouteShapeFormat</code> indicates the format of a route’s shape in the raw HTTP response.
typedef SWIFT_ENUM_NAMED(NSUInteger, MBInstructionFormat, "InstructionFormat", closed) {
/// The route steps’ instructions are delivered in plain text format.
  MBInstructionFormatText = 0,
/// The route steps’ instructions are delivered in HTML format.
/// Key phrases are boldfaced.
  MBInstructionFormatHtml = 1,
};

@class MBLane;

/// A single cross street along a step.
SWIFT_CLASS_NAMED("Intersection")
@interface MBIntersection : NSObject <NSSecureCoding>
/// The geographic coordinates at the center of the intersection.
@property (nonatomic, readonly) CLLocationCoordinate2D location;
/// An array of <code>CLLocationDirection</code>s indicating the absolute headings of the roads that meet at the intersection.
/// A road is represented in this array by a heading indicating the direction from which the road meets the intersection. To get the direction of travel when leaving the intersection along the road, rotate the heading 180 degrees.
/// A single road that passes through this intersection is represented by two items in this array: one for the segment that enters the intersection and one for the segment that exits it.
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nonnull headings;
/// The indices of the items in the <code>headings</code> array that correspond to the roads that may be used to leave the intersection.
/// This index set effectively excludes any one-way road that leads toward the intersection.
@property (nonatomic, readonly, copy) NSIndexSet * _Nonnull outletIndexes;
/// The index of the item in the <code>headings</code> array that corresponds to the road that the containing route step uses to approach the intersection.
@property (nonatomic, readonly) NSInteger approachIndex;
/// The index of the item in the <code>headings</code> array that corresponds to the road that the containing route step uses to leave the intersection.
@property (nonatomic, readonly) NSInteger outletIndex;
/// An array of <code>Lane</code> objects representing all the lanes of the road that the containing route step uses to approach the intersection.
/// If no lane information is available for an intersection, this property’s value is <code>nil</code>. The first item corresponds to the leftmost lane, the second item corresponds to the second lane from the left, and so on, regardless of whether the surrounding country drives on the left or on the right.
@property (nonatomic, readonly, copy) NSArray<MBLane *> * _Nullable approachLanes;
/// The indices of the items in the <code>approachLanes</code> array that correspond to the roads that may be used to execute the maneuver.
/// If no lane information is available for an intersection, this property’s value is <code>nil</code>.
@property (nonatomic, readonly, copy) NSIndexSet * _Nullable usableApproachLanes;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL supportsSecureCoding;)
+ (BOOL)supportsSecureCoding SWIFT_WARN_UNUSED_RESULT;
+ (void)setSupportsSecureCoding:(BOOL)value;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// A lane on the road approaching an intersection.
SWIFT_CLASS_NAMED("Lane")
@interface MBLane : NSObject <NSSecureCoding>
/// The lane indications specifying the maneuvers that may be executed from the lane.
@property (nonatomic, readonly) MBLaneIndication indications;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL supportsSecureCoding;)
+ (BOOL)supportsSecureCoding SWIFT_WARN_UNUSED_RESULT;
+ (void)setSupportsSecureCoding:(BOOL)value;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

/// A <code>ManeuverDirection</code> clarifies a <code>ManeuverType</code> with directional information. The exact meaning of the maneuver direction for a given step depends on the step’s maneuver type; see the <code>ManeuverType</code> documentation for details.
typedef SWIFT_ENUM_NAMED(NSInteger, MBManeuverDirection, "ManeuverDirection", closed) {
/// The step does not have a particular maneuver direction associated with it.
/// This maneuver direction is used as a workaround for bridging to Objective-C which does not support nullable enumeration-typed values.
  MBManeuverDirectionNone = 0,
/// The maneuver requires a sharp turn to the right.
  MBManeuverDirectionSharpRight = 1,
/// The maneuver requires a turn to the right, a merge to the right, or an exit on the right, or the destination is on the right.
  MBManeuverDirectionRight = 2,
/// The maneuver requires a slight turn to the right.
  MBManeuverDirectionSlightRight = 3,
/// The maneuver requires no notable change in direction, or the destination is straight ahead.
  MBManeuverDirectionStraightAhead = 4,
/// The maneuver requires a slight turn to the left.
  MBManeuverDirectionSlightLeft = 5,
/// The maneuver requires a turn to the left, a merge to the left, or an exit on the left, or the destination is on the right.
  MBManeuverDirectionLeft = 6,
/// The maneuver requires a sharp turn to the left.
  MBManeuverDirectionSharpLeft = 7,
/// The maneuver requires a U-turn when possible.
/// Use the difference between the step’s initial and final headings to distinguish between a U-turn to the left (typical in countries that drive on the right) and a U-turn on the right (typical in countries that drive on the left). If the difference in headings is greater than 180 degrees, the maneuver requires a U-turn to the left. If the difference in headings is less than 180 degrees, the maneuver requires a U-turn to the right.
  MBManeuverDirectionUTurn = 8,
};

/// A <code>ManeuverType</code> specifies the type of maneuver required to complete the route step. You can pair a maneuver type with a <code>ManeuverDirection</code> to choose an appropriate visual or voice prompt to present the user.
/// In Swift, you can use pattern matching with a single switch statement on a tuple containing the maneuver type and maneuver direction to avoid a complex series of if-else-if statements or switch statements.
typedef SWIFT_ENUM_NAMED(NSInteger, MBManeuverType, "ManeuverType", closed) {
/// The step does not have a particular maneuver type associated with it.
/// This maneuver type is used as a workaround for bridging to Objective-C which does not support nullable enumeration-typed values.
  MBManeuverTypeNone = 0,
/// The step requires the user to depart from a waypoint.
/// If the waypoint is some distance away from the nearest road, the maneuver direction indicates the direction the user must turn upon reaching the road.
  MBManeuverTypeDepart = 1,
/// The step requires the user to turn.
/// The maneuver direction indicates the direction in which the user must turn relative to the current direction of travel. The exit index indicates the number of intersections, large or small, from the previous maneuver up to and including the intersection at which the user must turn.
  MBManeuverTypeTurn = 2,
/// The step requires the user to continue after a turn.
  MBManeuverTypeContinue = 3,
/// The step requires the user to continue on the current road as it changes names.
/// The step’s name contains the road’s new name. To get the road’s old name, use the previous step’s name.
  MBManeuverTypePassNameChange = 4,
/// The step requires the user to merge onto another road.
/// The maneuver direction indicates the side from which the other road approaches the intersection relative to the user.
  MBManeuverTypeMerge = 5,
/// The step requires the user to take a entrance ramp (slip road) onto a highway.
  MBManeuverTypeTakeOnRamp = 6,
/// The step requires the user to take an exit ramp (slip road) off a highway.
/// The maneuver direction indicates the side of the highway from which the user must exit. The exit index indicates the number of highway exits from the previous maneuver up to and including the exit that the user must take.
  MBManeuverTypeTakeOffRamp = 7,
/// The step requires the user to choose a fork at a Y-shaped fork in the road.
/// The maneuver direction indicates which fork to take.
  MBManeuverTypeReachFork = 8,
/// The step requires the user to turn at either a T-shaped three-way intersection or a sharp bend in the road where the road also changes names.
/// This maneuver type is called out separately so that the user may be able to proceed more confidently, without fear of having overshot the turn. If this distinction is unimportant to you, you may treat the maneuver as an ordinary <code>turn</code>.
  MBManeuverTypeReachEnd = 9,
/// The step requires the user to get into a specific lane in order to continue along the current road.
/// The maneuver direction is set to <code>straightAhead</code>. Each of the first intersection’s usable approach lanes also has an indication of <code>straightAhead</code>. A maneuver in a different direction would instead have a maneuver type of <code>turn</code>.
/// This maneuver type is called out separately so that the application can present the user with lane guidance based on the first element in the <code>intersections</code> property. If lane guidance is unimportant to you, you may treat the maneuver as an ordinary <code>continue</code> or ignore it.
  MBManeuverTypeUseLane = 10,
/// The step requires the user to enter and traverse a roundabout (traffic circle or rotary).
/// The step has no name, but the exit name is the name of the road to take to exit the roundabout. The exit index indicates the number of roundabout exits up to and including the exit to take.
/// If <code>RouteOptions.includesExitRoundaboutManeuver</code> is set to <code>true</code>, this step is followed by an <code>.exitRoundabout</code> maneuver. Otherwise, this step represents the entire roundabout maneuver, from the entrance to the exit.
  MBManeuverTypeTakeRoundabout = 11,
/// The step requires the user to enter and traverse a large, named roundabout (traffic circle or rotary).
/// The step’s name is the name of the roundabout. The exit name is the name of the road to take to exit the roundabout. The exit index indicates the number of rotary exits up to and including the exit that the user must take.
/// If <code>RouteOptions.includesExitRoundaboutManeuver</code> is set to <code>true</code>, this step is followed by an <code>.exitRotary</code> maneuver. Otherwise, this step represents the entire roundabout maneuver, from the entrance to the exit.
  MBManeuverTypeTakeRotary = 12,
/// The step requires the user to enter and exit a roundabout (traffic circle or rotary) that is compact enough to constitute a single intersection.
/// The step’s name is the name of the road to take after exiting the roundabout. This maneuver type is called out separately because the user may perceive the roundabout as an ordinary intersection with an island in the middle. If this distinction is unimportant to you, you may treat the maneuver as either an ordinary <code>turn</code> or as a <code>takeRoundabout</code>.
  MBManeuverTypeTurnAtRoundabout = 13,
/// The step requires the user to exit a roundabout (traffic circle or rotary).
/// This maneuver type follows a <code>.takeRoundabout</code> maneuver. It is only used when <code>RouteOptions.includesExitRoundaboutManeuver</code> is set to true.
  MBManeuverTypeExitRoundabout = 14,
/// The step requires the user to exit a large, named roundabout (traffic circle or rotary).
/// This maneuver type follows a <code>.takeRotary</code> maneuver. It is only used when <code>RouteOptions.includesExitRoundaboutManeuver</code> is set to true.
  MBManeuverTypeExitRotary = 15,
/// The step requires the user to respond to a change in travel conditions.
/// This maneuver type may occur for example when driving directions require the user to board a ferry, or when cycling directions require the user to dismount. The step’s transport type and instructions contains important contextual details that should be presented to the user at the maneuver location.
/// Similar changes can occur simultaneously with other maneuvers, such as when the road changes its name at the site of a movable bridge. In such cases, <code>heedWarning</code> is suppressed in favor of another maneuver type.
  MBManeuverTypeHeedWarning = 16,
/// The step requires the user to arrive at a waypoint.
/// The distance and expected travel time for this step are set to zero, indicating that the route or route leg is complete. The maneuver direction indicates the side of the road on which the waypoint can be found (or whether it is straight ahead).
  MBManeuverTypeArrive = 17,
/// The step requires the user to arrive at an intermediate waypoint.
/// This maneuver type is only used by version 4 of the Mapbox Directions API.
  MBManeuverTypePassWaypoint = 18,
};

@class MBTracepoint;

/// A <code>Match</code> object defines a single route that was created from a series of points that were matched against a road network.
/// Typically, you do not create instances of this class directly. Instead, you receive match objects when you pass a <code>MatchOptions</code> object into the <code>Directions.calculate(_:completionHandler:)</code> or <code>Directions.calculateRoutes(matching:completionHandler:)</code> method.
SWIFT_CLASS_NAMED("Match")
@interface MBMatch : MBDirectionsResult
/// Initializes a new match object with the given JSON dictionary representation and tracepoints.
/// \param json A JSON dictionary representation of the route as returned by the Mapbox Map Matching API.
///
/// \param tracepoints An array of <code>Tracepoint</code> that the match found in order.
///
/// \param matchOptions The <code>MatchOptions</code> used to create the request.
///
- (nonnull instancetype)initWithJson:(NSDictionary<NSString *, id> * _Nonnull)json tracepoints:(NSArray<MBTracepoint *> * _Nonnull)tracepoints waypointIndices:(NSIndexSet * _Nonnull)waypointIndices matchOptions:(MBMatchOptions * _Nonnull)matchOptions;
/// A number between 0 and 1 that indicates the Map Matching API’s confidence that the match is accurate. A higher confidence means the match is more likely to be accurate.
@property (nonatomic) float confidence;
/// Tracepoints on the road network that match the tracepoints in the match options.
/// Any outlier tracepoint is omitted from the match. This array represents an outlier tracepoint is a <code>Tracepoint</code> object whose <code>Tracepoint.coordinate</code> property is <code>kCLLocationCoordinate2DInvalid</code>.
@property (nonatomic, copy) NSArray<MBTracepoint *> * _Nonnull tracepoints;
/// Index of the waypoint inside the matched route.
@property (nonatomic, copy) NSIndexSet * _Nullable waypointIndices;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL supportsSecureCoding;)
+ (BOOL)supportsSecureCoding SWIFT_WARN_UNUSED_RESULT;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEqualToMatch:(MBMatch * _Nullable)match SWIFT_WARN_UNUSED_RESULT;
@end


/// A <code>MatchOptions</code> object is a structure that specifies the criteria for results returned by the Mapbox Map Matching API.
/// Pass an instance of this class into the <code>Directions.calculate(_:completionHandler:)</code> method.
SWIFT_CLASS_NAMED("MatchOptions")
@interface MBMatchOptions : MBDirectionsOptions
- (nonnull instancetype)initWithWaypoints:(NSArray<MBWaypoint *> * _Nonnull)waypoints profileIdentifier:(MBDirectionsProfileIdentifier _Nullable)profileIdentifier OBJC_DESIGNATED_INITIALIZER;
/// If true, the input locations are re-sampled for improved map matching results. The default is  <code>false</code>.
@property (nonatomic) BOOL resamplesTraces;
/// An index set containing indices of two or more items in <code>coordinates</code>. These will be represented by <code>Waypoint</code>s in the resulting <code>Match</code> objects.
/// Use this property when the <code>includesSteps</code> property is <code>true</code> or when <code>coordinates</code> represents a trace with a high sample rate. If this property is <code>nil</code>, the resulting <code>Match</code> objects contain a waypoint for each coordinate in the match options.
/// If specified, each index must correspond to a valid index in <code>coordinates</code>, and the index set must contain 0 and the last index (one less than <code>endIndex</code>) of <code>coordinates</code>.
@property (nonatomic, copy) NSIndexSet * _Nullable waypointIndices;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL supportsSecureCoding;)
+ (BOOL)supportsSecureCoding SWIFT_WARN_UNUSED_RESULT;
@end

/// A system of units of measuring distances and other quantities.
typedef SWIFT_ENUM_NAMED(NSUInteger, MBMeasurementSystem, "MeasurementSystem", closed) {
/// U.S. customary and British imperial units.
/// Distances are measured in miles and feet.
  MBMeasurementSystemImperial = 0,
/// The metric system.
/// Distances are measured in kilometers and meters.
  MBMeasurementSystemMetric = 1,
};


/// A <code>Route</code> object defines a single route that the user can follow to visit a series of waypoints in order. The route object includes information about the route, such as its distance and expected travel time. Depending on the criteria used to calculate the route, the route object may also include detailed turn-by-turn instructions.
/// Typically, you do not create instances of this class directly. Instead, you receive route objects when you request directions using the <code>Directions.calculate(_:completionHandler:)</code> method. However, if you use the <code>Directions.url(forCalculating:)</code> method instead, you can pass the results of the HTTP request into this class’s initializer.
SWIFT_CLASS_NAMED("Route")
@interface MBRoute : MBDirectionsResult
/// Initializes a new route object with the given JSON dictionary representation and waypoints.
/// This initializer is intended for use in conjunction with the <code>Directions.url(forCalculating:)</code> method.
/// \param json A JSON dictionary representation of the route as returned by the Mapbox Directions API.
///
/// \param waypoints An array of waypoints that the route visits in chronological order.
///
/// \param routeOptions The <code>RouteOptions</code> used to create the request.
///
- (nonnull instancetype)initWithJson:(NSDictionary<NSString *, id> * _Nonnull)json waypoints:(NSArray<MBWaypoint *> * _Nonnull)waypoints routeOptions:(MBRouteOptions * _Nonnull)routeOptions OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
@end

@class MBRouteStep;

/// A <code>RouteLeg</code> object defines a single leg of a route between two waypoints. If the overall route has only two waypoints, it has a single <code>RouteLeg</code> object that covers the entire route. The route leg object includes information about the leg, such as its name, distance, and expected travel time. Depending on the criteria used to calculate the route, the route leg object may also include detailed turn-by-turn instructions.
/// You do not create instances of this class directly. Instead, you receive route leg objects as part of route objects when you request directions using the <code>Directions.calculate(_:completionHandler:)</code> method.
SWIFT_CLASS_NAMED("RouteLeg")
@interface MBRouteLeg : NSObject <NSSecureCoding>
/// Initializes a new route leg object with the given JSON dictionary representation and waypoints.
/// Normally, you do not create instances of this class directly. Instead, you receive route leg objects as part of route objects when you request directions using the <code>Directions.calculateDirections(options:completionHandler:)</code> method.
/// \param json A JSON dictionary representation of a route leg object as returnd by the Mapbox Directions API.
///
/// \param source The waypoint at the beginning of the leg.
///
/// \param destination The waypoint at the end of the leg.
///
/// \param profileIdentifier The profile identifier used to request the routes.
///
- (nonnull instancetype)initWithJson:(NSDictionary<NSString *, id> * _Nonnull)json source:(MBWaypoint * _Nonnull)source destination:(MBWaypoint * _Nonnull)destination profileIdentifier:(MBDirectionsProfileIdentifier _Nonnull)profileIdentifier;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL supportsSecureCoding;)
+ (BOOL)supportsSecureCoding SWIFT_WARN_UNUSED_RESULT;
+ (void)setSupportsSecureCoding:(BOOL)value;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
/// The starting point of the route leg.
/// Unless this is the first leg of the route, the source of this leg is the same as the destination of the previous leg.
@property (nonatomic, readonly, strong) MBWaypoint * _Nonnull source;
/// The endpoint of the route leg.
/// Unless this is the last leg of the route, the destination of this leg is the same as the source of the next leg.
@property (nonatomic, readonly, strong) MBWaypoint * _Nonnull destination;
/// An array of one or more <code>RouteStep</code> objects representing the steps for traversing this leg of the route.
/// Each route step object corresponds to a distinct maneuver and the approach to the next maneuver.
/// This array is empty if the <code>includesSteps</code> property of the original <code>RouteOptions</code> object is set to <code>false</code>.
@property (nonatomic, readonly, copy) NSArray<MBRouteStep *> * _Nonnull steps;
/// An array containing <a href="https://wiki.openstreetmap.org/wiki/Node">OpenStreetMap node identifiers</a>, one for each coordinate along the route geometry.
/// This property is set if the <code>RouteOptions.attributeOptions</code> property contains <code>.openStreetMapNodeIdentifier</code>.
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nullable openStreetMapNodeIdentifiers;
/// An array containing the distance (measured in meters) between each coordinate in the route leg geometry.
/// This property is set if the <code>RouteOptions.attributeOptions</code> property contains <code>.distance</code>.
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nullable segmentDistances;
/// An array containing the expected travel time (measured in seconds) between each coordinate in the route leg geometry.
/// These values are dynamic, accounting for any conditions that may change along a segment, such as traffic congestion if the profile identifier is set to <code>.automobileAvoidingTraffic</code>.
/// This property is set if the <code>RouteOptions.attributeOptions</code> property contains <code>.expectedTravelTime</code>.
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nullable expectedSegmentTravelTimes;
/// An array containing the expected average speed (measured in meters per second) between each coordinate in the route leg geometry.
/// These values are dynamic; rather than speed limits, they account for the road’s classification and/or any traffic congestion (if the profile identifier is set to <code>.automobileAvoidingTraffic</code>).
/// This property is set if the <code>RouteOptions.attributeOptions</code> property contains <code>.speed</code>.
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nullable segmentSpeeds;
/// A name that describes the route leg.
/// The name describes the leg using the most significant roads or trails along the route leg. You can display this string to the user to help the user can distinguish one route from another based on how the legs of the routes are named.
/// The leg’s name does not identify the start and end points of the leg. To distinguish one leg from another within the same route, concatenate the <code>name</code> properties of the <code>source</code> and <code>destination</code> waypoints.
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// The route leg’s distance, measured in meters.
/// The value of this property accounts for the distance that the user must travel to arrive at the destination from the source. It is not the direct distance between the source and destination, nor should not assume that the user would travel along this distance at a fixed speed.
@property (nonatomic, readonly) CLLocationDistance distance;
/// The route leg’s expected travel time, measured in seconds.
/// The value of this property reflects the time it takes to traverse the route leg. If the route was calculated using the <code>MBDirectionsProfileIdentifierAutomobileAvoidingTraffic</code> profile, this property reflects current traffic conditions at the time of the request, not necessarily the traffic conditions at the time the user would begin this leg. For other profiles, this property reflects travel time under ideal conditions and does not account for traffic congestion. If the leg makes use of a ferry or train, the actual travel time may additionally be subject to the schedules of those services.
/// Do not assume that the user would travel along the leg at a fixed speed. For the expected travel time on each individual segment along the leg, use the <code>RouteStep.expectedTravelTimes</code> property. For more granularity, specify the <code>AttributeOptions.expectedTravelTime</code> option and use the <code>expectedSegmentTravelTimes</code> property.
@property (nonatomic, readonly) NSTimeInterval expectedTravelTime;
/// A string specifying the primary mode of transportation for the route leg.
/// The value of this property is <code>MBDirectionsProfileIdentifierAutomobile</code>, <code>MBDirectionsProfileIdentifierAutomobileAvoidingTraffic</code>, <code>MBDirectionsProfileIdentifierCycling</code>, or <code>MBDirectionsProfileIdentifierWalking</code>, depending on the <code>profileIdentifier</code> property of the original <code>RouteOptions</code> object. This property reflects the primary mode of transportation used for the route leg. Individual steps along the route leg might use different modes of transportation as necessary.
@property (nonatomic, readonly) MBDirectionsProfileIdentifier _Nonnull profileIdentifier;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// A <code>RouteOptions</code> object is a structure that specifies the criteria for results returned by the Mapbox Directions API.
/// Pass an instance of this class into the <code>Directions.calculate(_:completionHandler:)</code> method.
SWIFT_CLASS_NAMED("RouteOptions")
@interface MBRouteOptions : MBDirectionsOptions
/// Initializes a route options object for routes between the given locations and an optional profile identifier.
/// note:
/// This initializer is intended for <code>CLLocation</code> objects created using the <code>CLLocation.init(latitude:longitude:)</code> initializer. If you intend to use a <code>CLLocation</code> object obtained from a <code>CLLocationManager</code> object, consider increasing the <code>horizontalAccuracy</code> or set it to a negative value to avoid overfitting, since the <code>Waypoint</code> class’s <code>coordinateAccuracy</code> property represents the maximum allowed deviation from the waypoint.
/// \param locations An array of <code>CLLocation</code> objects representing locations that the route should visit in chronological order. The array should contain at least two locations (the source and destination) and at most 25 locations. Each location object is converted into a <code>Waypoint</code> object. This class respects the <code>CLLocation</code> class’s <code>coordinate</code> and <code>horizontalAccuracy</code> properties, converting them into the <code>Waypoint</code> class’s <code>coordinate</code> and <code>coordinateAccuracy</code> properties, respectively.
///
/// \param profileIdentifier A string specifying the primary mode of transportation for the routes. This parameter, if set, should be set to <code>MBDirectionsProfileIdentifierAutomobile</code>, <code>MBDirectionsProfileIdentifierAutomobileAvoidingTraffic</code>, <code>MBDirectionsProfileIdentifierCycling</code>, or <code>MBDirectionsProfileIdentifierWalking</code>. <code>MBDirectionsProfileIdentifierAutomobile</code> is used by default.
///
- (nonnull instancetype)initWithLocations:(NSArray<CLLocation *> * _Nonnull)locations profileIdentifier:(MBDirectionsProfileIdentifier _Nullable)profileIdentifier;
/// Initializes a route options object for routes between the given geographic coordinates and an optional profile identifier.
/// \param coordinates An array of geographic coordinates representing locations that the route should visit in chronological order. The array should contain at least two locations (the source and destination) and at most 25 locations. Each coordinate is converted into a <code>Waypoint</code> object.
///
/// \param profileIdentifier A string specifying the primary mode of transportation for the routes. This parameter, if set, should be set to <code>MBDirectionsProfileIdentifierAutomobile</code>, <code>MBDirectionsProfileIdentifierAutomobileAvoidingTraffic</code>, <code>MBDirectionsProfileIdentifierCycling</code>, or <code>MBDirectionsProfileIdentifierWalking</code>. <code>MBDirectionsProfileIdentifierAutomobile</code> is used by default.
///
- (nonnull instancetype)initWithCoordinates:(NSArray<NSValue *> * _Nonnull)coordinates profileIdentifier:(MBDirectionsProfileIdentifier _Nullable)profileIdentifier;
/// Initializes a route options object for routes between the given waypoints and an optional profile identifier.
/// \param waypoints An array of <code>Waypoint</code> objects representing locations that the route should visit in chronological order. The array should contain at least two waypoints (the source and destination) and at most 25 waypoints. (Some profiles, such as <code>MBDirectionsProfileIdentifierAutomobileAvoidingTraffic</code>, <a href="https://www.mapbox.com/api-documentation/#directions">may have lower limits</a>.)
///
/// \param profileIdentifier A string specifying the primary mode of transportation for the routes. This parameter, if set, should be set to <code>MBDirectionsProfileIdentifierAutomobile</code>, <code>MBDirectionsProfileIdentifierAutomobileAvoidingTraffic</code>, <code>MBDirectionsProfileIdentifierCycling</code>, or <code>MBDirectionsProfileIdentifierWalking</code>. <code>MBDirectionsProfileIdentifierAutomobile</code> is used by default.
///
- (nonnull instancetype)initWithWaypoints:(NSArray<MBWaypoint *> * _Nonnull)waypoints profileIdentifier:(MBDirectionsProfileIdentifier _Nullable)profileIdentifier OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
/// A Boolean value that indicates whether a returned route may require a point U-turn at an intermediate waypoint.
/// If the value of this property is <code>true</code>, a returned route may require an immediate U-turn at an intermediate waypoint. At an intermediate waypoint, if the value of this property is <code>false</code>, each returned route may continue straight ahead or turn to either side but may not U-turn. This property has no effect if only two waypoints are specified.
/// Set this property to <code>true</code> if you expect the user to traverse each leg of the trip separately. For example, it would be quite easy for the user to effectively “U-turn” at a waypoint if the user first parks the car and patronizes a restaurant there before embarking on the next leg of the trip. Set this property to <code>false</code> if you expect the user to proceed to the next waypoint immediately upon arrival. For example, if the user only needs to drop off a passenger or package at the waypoint before continuing, it would be inconvenient to perform a U-turn at that location.
/// The default value of this property is <code>false</code> when the profile identifier is <code>MBDirectionsProfileIdentifierAutomobile</code> or <code>MBDirectionsProfileIdentifierAutomobileAvoidingTraffic</code> and <code>true</code> otherwise.
@property (nonatomic) BOOL allowsUTurnAtWaypoint;
/// A Boolean value indicating whether alternative routes should be included in the response.
/// If the value of this property is <code>false</code>, the server only calculates a single route that visits each of the waypoints. If the value of this property is <code>true</code>, the server attempts to find additional reasonable routes that visit the waypoints. Regardless, multiple routes are only returned if it is possible to visit the waypoints by a different route without significantly increasing the distance or travel time. The alternative routes may partially overlap with the preferred route, especially if intermediate waypoints are specified.
/// Alternative routes may take longer to calculate and make the response significantly larger, so only request alternative routes if you intend to display them to the user or let the user choose them over the preferred route. For example, do not request alternative routes if you only want to know the distance or estimated travel time to a destination.
/// The default value of this property is <code>false</code>.
@property (nonatomic) BOOL includesAlternativeRoutes;
/// A Boolean value indicating whether the route includes a <code>ManeuverType.exitRoundabout</code> or <code>ManeuverType.exitRotary</code> step when traversing a roundabout or rotary, respectively.
/// If this option is set to <code>true</code>, a route that traverses a roundabout includes both a <code>ManeuverType.takeRoundabout</code> step and a <code>ManeuverType.exitRoundabout</code> step; likewise, a route that traverses a large, named roundabout includes both a <code>ManeuverType.takeRotary</code> step and a <code>ManeuverType.exitRotary</code> step. Otherwise, it only includes a <code>ManeuverType.takeRoundabout</code> or <code>ManeuverType.takeRotary</code> step. This option is set to <code>false</code> by default.
@property (nonatomic) BOOL includesExitRoundaboutManeuver;
/// The route classes that the calculated routes will avoid.
/// Currently, you can only specify a single road class to avoid.
@property (nonatomic) MBRoadClasses roadClassesToAvoid;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL supportsSecureCoding;)
+ (BOOL)supportsSecureCoding SWIFT_WARN_UNUSED_RESULT;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEqualToRouteOptions:(MBRouteOptions * _Nullable)routeOptions SWIFT_WARN_UNUSED_RESULT;
@end


/// A <code>RouteOptionsV4</code> object is a structure that specifies the criteria for results returned by the Mapbox Directions API v4.
/// Pass an instance of this class into the <code>Directions.calculate(_:completionHandler:)</code> method.
SWIFT_CLASS_NAMED("RouteOptionsV4")
@interface MBRouteOptionsV4 : MBRouteOptions
/// The format of the returned route steps’ instructions.
/// By default, the value of this property is <code>text</code>, specifying plain text instructions.
@property (nonatomic) enum MBInstructionFormat instructionFormat;
/// A Boolean value indicating whether the returned routes and their route steps should include any geographic coordinate data.
/// If the value of this property is <code>true</code>, the returned routes and their route steps include coordinates; if the value of this property is `false, they do not.
/// The default value of this property is <code>true</code>.
@property (nonatomic) BOOL includesShapes;
- (nonnull instancetype)initWithWaypoints:(NSArray<MBWaypoint *> * _Nonnull)waypoints profileIdentifier:(MBDirectionsProfileIdentifier _Nullable)profileIdentifier OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
@end

/// A <code>RouteShapeFormat</code> indicates the format of a route or match shape in the raw HTTP response.
typedef SWIFT_ENUM_NAMED(NSUInteger, MBRouteShapeFormat, "RouteShapeFormat", closed) {
/// The route’s shape is delivered in <a href="http://geojson.org/">GeoJSON</a> format.
/// This standard format is human-readable and can be parsed straightforwardly, but it is far more verbose than <code>polyline</code>.
  MBRouteShapeFormatGeoJSON = 0,
/// The route’s shape is delivered in <a href="https://developers.google.com/maps/documentation/utilities/polylinealgorithm">encoded polyline algorithm</a> format with 1×10<sup>−5</sup> precision.
/// This machine-readable format is considerably more compact than <code>geoJSON</code> but less precise than <code>polyline6</code>.
  MBRouteShapeFormatPolyline = 1,
/// The route’s shape is delivered in <a href="https://developers.google.com/maps/documentation/utilities/polylinealgorithm">encoded polyline algorithm</a> format with 1×10<sup>−6</sup> precision.
/// This format is an order of magnitude more precise than <code>polyline</code>.
  MBRouteShapeFormatPolyline6 = 2,
};

/// A <code>RouteShapeResolution</code> indicates the level of detail in a route’s shape, or whether the shape is present at all.
typedef SWIFT_ENUM_NAMED(NSUInteger, MBRouteShapeResolution, "RouteShapeResolution", closed) {
/// The route’s shape is omitted.
/// Specify this resolution if you do not intend to show the route line to the user or analyze the route line in any way.
  MBRouteShapeResolutionNone = 0,
/// The route’s shape is simplified.
/// This resolution considerably reduces the size of the response. The resulting shape is suitable for display at a low zoom level, but it lacks the detail necessary for focusing on individual segments of the route.
  MBRouteShapeResolutionLow = 1,
/// The route’s shape is as detailed as possible.
/// The resulting shape is equivalent to concatenating the shapes of all the route’s consitituent steps. You can focus on individual segments of this route while faithfully representing the path of the route. If you only intend to show a route overview and do not need to analyze the route line in any way, consider specifying <code>low</code> instead to considerably reduce the size of the response.
  MBRouteShapeResolutionFull = 2,
};

@class MBSpokenInstruction;
@class MBVisualInstruction;
enum MBTransportType : NSInteger;

/// A <code>RouteStep</code> object represents a single distinct maneuver along a route and the approach to the next maneuver. The route step object corresponds to a single instruction the user must follow to complete a portion of the route. For example, a step might require the user to turn then follow a road.
/// You do not create instances of this class directly. Instead, you receive route step objects as part of route objects when you request directions using the <code>Directions.calculate(_:completionHandler:)</code> method, setting the <code>includesSteps</code> option to <code>true</code> in the <code>RouteOptions</code> object that you pass into that method.
SWIFT_CLASS_NAMED("RouteStep")
@interface MBRouteStep : NSObject <NSSecureCoding>
/// Initializes a new route step object with the given JSON dictionary representation.
/// Normally, you do not create instances of this class directly. Instead, you receive route step objects as part of route objects when you request directions using the <code>Directions.calculateDirections(options:completionHandler:)</code> method, setting the <code>includesSteps</code> option to <code>true</code> in the <code>RouteOptions</code> object that you pass into that method.
/// \param json A JSON dictionary representation of a route step object as returnd by the Mapbox Directions API.
///
- (nonnull instancetype)initWithJson:(NSDictionary<NSString *, id> * _Nonnull)json;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL supportsSecureCoding;)
+ (BOOL)supportsSecureCoding SWIFT_WARN_UNUSED_RESULT;
+ (void)setSupportsSecureCoding:(BOOL)value;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
/// An array of geographic coordinates defining the path of the route step from the location of the maneuver to the location of the next step’s maneuver.
/// The value of this property may be <code>nil</code>, for example when the maneuver type is <code>arrive</code>.
/// Using the <a href="https://www.mapbox.com/ios-sdk/">Mapbox Maps SDK for iOS</a> or <a href="https://github.com/mapbox/mapbox-gl-native/tree/master/platform/macos/">Mapbox Maps SDK for macOS</a>, you can create an <code>MGLPolyline</code> object using these coordinates to display a portion of a route on an <code>MGLMapView</code>.
@property (nonatomic, readonly, copy) NSArray<NSValue *> * _Nullable coordinates;
/// The number of coordinates.
/// The value of this property may be zero, for example when the maneuver type is <code>arrive</code>.
/// note:
/// This initializer is intended for Objective-C usage. In Swift code, use the <code>coordinates.count</code> property.
@property (nonatomic, readonly) NSUInteger coordinateCount;
/// Retrieves the coordinates.
/// The array may be empty, for example when the maneuver type is <code>arrive</code>.
/// Using the <a href="https://www.mapbox.com/ios-sdk/">Mapbox Maps SDK for iOS</a> or <a href="https://github.com/mapbox/mapbox-gl-native/tree/master/platform/macos/">Mapbox Maps SDK for macOS</a>, you can create an <code>MGLPolyline</code> object using these coordinates to display a portion of a route on an <code>MGLMapView</code>.
/// precondition:
/// <code>coordinates</code> must be large enough to hold <code>coordinateCount</code> instances of <code>CLLocationCoordinate2D</code>.
/// note:
/// This initializer is intended for Objective-C usage. In Swift code, use the <code>coordinates</code> property.
/// \param coordinates A pointer to a C array of <code>CLLocationCoordinate2D</code> instances. On output, this array contains all the vertices of the overlay.
///
///
/// returns:
/// True if the step has coordinates and <code>coordinates</code> has been populated, or false if the step has no coordinates and <code>coordinates</code> has not been modified.
- (BOOL)getCoordinates:(CLLocationCoordinate2D * _Nonnull)coordinates SWIFT_WARN_UNUSED_RESULT;
/// A string with instructions explaining how to perform the step’s maneuver.
/// You can display this string or read it aloud to the user. The string does not include the distance to or from the maneuver. For instructions optimized for real-time delivery during turn-by-turn navigation, set the <code>RouteOptions.includesSpokenInstructions</code> option and use the <code>instructionsSpokenAlongStep</code> property. If you need customized instructions, you can construct them yourself from the step’s other properties or use <a href="https://github.com/Project-OSRM/osrm-text-instructions.swift/">OSRM Text Instructions</a>.
/// note:
/// If you use MapboxDirections.swift with the Mapbox Directions API, this property is formatted and localized for display to the user. If you use OSRM directly, this property contains a basic string that only includes the maneuver type and direction. Use <a href="https://github.com/Project-OSRM/osrm-text-instructions.swift/">OSRM Text Instructions</a> to construct a complete, localized instruction string for display.
@property (nonatomic, readonly, copy) NSString * _Nonnull instructions;
/// Instructions about the next step’s maneuver, optimized for speech synthesis.
/// As the user traverses this step, you can give them advance notice of the upcoming maneuver by reading aloud each item in this array in order as the user reaches the specified distances along this step. The text of the spoken instructions refers to the details in the next step, but the distances are measured from the beginning of this step.
/// This property is non-<code>nil</code> if the <code>RouteOptions.includesSpokenInstructions</code> option is set to <code>true</code>. For instructions designed for display, use the <code>instructions</code> property.
@property (nonatomic, readonly, copy) NSArray<MBSpokenInstruction *> * _Nullable instructionsSpokenAlongStep;
/// :nodoc:
/// Instructions about the next step’s maneuver, optimized for display in real time.
/// As the user traverses this step, you can give them advance notice of the upcoming maneuver by displaying each item in this array in order as the user reaches the specified distances along this step. The text and images of the visual instructions refer to the details in the next step, but the distances are measured from the beginning of this step.
/// This property is non-<code>nil</code> if the <code>RouteOptions.includesVisualInstructions</code> option is set to <code>true</code>. For instructions designed for speech synthesis, use the <code>instructionsSpokenAlongStep</code> property. For instructions designed for display in a static list, use the <code>instructions</code> property.
@property (nonatomic, readonly, copy) NSArray<MBVisualInstruction *> * _Nullable instructionsDisplayedAlongStep;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// The type of maneuver required for beginning this step.
@property (nonatomic, readonly) enum MBManeuverType maneuverType;
/// Additional directional information to clarify the maneuver type.
@property (nonatomic, readonly) enum MBManeuverDirection maneuverDirection;
/// The location of the maneuver at the beginning of this step.
@property (nonatomic, readonly) CLLocationCoordinate2D maneuverLocation;
/// Any <a href="https://en.wikipedia.org/wiki/Exit_number">exit numbers</a> assigned to the highway exit at the maneuver.
/// This property is only set when the <code>maneuverType</code> is <code>ManeuverType.takeOffRamp</code>. For the number of exits from the previous maneuver, regardless of the highway’s exit numbering scheme, use the <code>exitIndex</code> property. For the route reference codes associated with the connecting road, use the <code>destinationCodes</code> property. For the names associated with a roundabout exit, use the <code>exitNames</code> property.
/// An exit number is an alphanumeric identifier posted at or ahead of a highway off-ramp. Exit numbers may increase or decrease sequentially along a road, or they may correspond to distances from either end of the road. An alphabetic suffix may appear when multiple exits are located in the same interchange. If multiple exits are <a href="https://en.wikipedia.org/wiki/Local-express_lanes#Example_of_cloverleaf_interchanges">combined into a single exit</a>, the step may have multiple exit codes.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable exitCodes;
/// The names of the roundabout exit.
/// This property is only set for roundabout (traffic circle or rotary) maneuvers. For the signposted names associated with a highway exit, use the <code>destinations</code> property. For the signposted exit numbers, use the <code>exitCodes</code> property.
/// If you display a name to the user, you may need to abbreviate common words like “East” or “Boulevard” to ensure that it fits in the allotted space.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable exitNames;
/// A phonetic or phonemic transcription indicating how to pronounce the names in the <code>exitNames</code> property.
/// This property is only set for roundabout (traffic circle or rotary) maneuvers.
/// The transcription is written in the <a href="https://en.wikipedia.org/wiki/International_Phonetic_Alphabet">International Phonetic Alphabet</a>.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable phoneticExitNames;
/// The step’s distance, measured in meters.
/// The value of this property accounts for the distance that the user must travel to go from this step’s maneuver location to the next step’s maneuver location. It is not the sum of the direct distances between the route’s waypoints, nor should you assume that the user would travel along this distance at a fixed speed.
@property (nonatomic, readonly) CLLocationDistance distance;
/// The step’s expected travel time, measured in seconds.
/// The value of this property reflects the time it takes to go from this step’s maneuver location to the next step’s maneuver location. If the route was calculated using the <code>MBDirectionsProfileIdentifierAutomobileAvoidingTraffic</code> profile, this property reflects current traffic conditions at the time of the request, not necessarily the traffic conditions at the time the user would begin this step. For other profiles, this property reflects travel time under ideal conditions and does not account for traffic congestion. If the step makes use of a ferry or train, the actual travel time may additionally be subject to the schedules of those services.
/// Do not assume that the user would travel along the step at a fixed speed. For the expected travel time on each individual segment along the leg, specify the <code>AttributeOptions.expectedTravelTime</code> option and use the <code>RouteLeg.expectedSegmentTravelTimes</code> property.
@property (nonatomic, readonly) NSTimeInterval expectedTravelTime;
/// The names of the road or path leading from this step’s maneuver to the next step’s maneuver.
/// If the maneuver is a turning maneuver, the step’s names are the name of the road or path onto which the user turns. If you display a name to the user, you may need to abbreviate common words like “East” or “Boulevard” to ensure that it fits in the allotted space.
/// If the maneuver is a roundabout maneuver, the outlet to take is named in the <code>exitNames</code> property; the <code>names</code> property is only set for large roundabouts that have their own names.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable names;
/// A phonetic or phonemic transcription indicating how to pronounce the names in the <code>names</code> property.
/// The transcription is written in the <a href="https://en.wikipedia.org/wiki/International_Phonetic_Alphabet">International Phonetic Alphabet</a>.
/// If the maneuver traverses a large, named roundabout, the <code>exitPronunciationHints</code> property contains a hint about how to pronounce the names of the outlet to take.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable phoneticNames;
/// Any route reference codes assigned to the road or path leading from this step’s maneuver to the next step’s maneuver.
/// A route reference code commonly consists of an alphabetic network code, a space or hyphen, and a route number. You should not assume that the network code is globally unique: for example, a network code of “NH” may indicate a “National Highway” or “New Hampshire”. Moreover, a route number may not even uniquely identify a route within a given network.
/// If a highway ramp is part of a numbered route, its reference code is contained in this property. On the other hand, guide signage for a highway ramp usually indicates route reference codes of the adjoining road; use the <code>destinationCodes</code> property for those route reference codes.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable codes;
/// The mode of transportation used for the step.
/// This step may use a different mode of transportation than the overall route.
@property (nonatomic, readonly) enum MBTransportType transportType;
/// Any route reference codes that appear on guide signage for the road leading from this step’s maneuver to the next step’s maneuver.
/// This property is typically available in steps leading to or from a freeway or expressway. This property contains route reference codes associated with a road later in the route. If a highway ramp is itself part of a numbered route, its reference code is contained in the <code>codes</code> property. For the signposted exit numbers associated with a highway exit, use the <code>exitCodes</code> property.
/// A route reference code commonly consists of an alphabetic network code, a space or hyphen, and a route number. You should not assume that the network code is globally unique: for example, a network code of “NH” may indicate a “National Highway” or “New Hampshire”. Moreover, a route number may not even uniquely identify a route within a given network. A destination code for a divided road is often suffixed with the cardinal direction of travel, for example “I 80 East”.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable destinationCodes;
/// Destinations, such as <a href="https://en.wikipedia.org/wiki/Control_city">control cities</a>, that appear on guide signage for the road leading from this step’s maneuver to the next step’s maneuver.
/// This property is typically available in steps leading to or from a freeway or expressway.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable destinations;
/// An array of intersections along the step.
/// Each item in the array corresponds to a cross street, starting with the intersection at the maneuver location indicated by the coordinates property and continuing with each cross street along the step.
@property (nonatomic, readonly, copy) NSArray<MBIntersection *> * _Nullable intersections;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// An instruction about an upcoming <code>RouteStep</code>’s maneuver, optimized for speech synthesis.
/// The instruction is provided in two formats: plain text and text marked up according to the <a href="https://en.wikipedia.org/wiki/Speech_Synthesis_Markup_Language">Speech Synthesis Markup Language</a> (SSML). Use a speech synthesizer such as <code>AVSpeechSynthesizer</code> or Amazon Polly to read aloud the instruction.
/// The <code>distanceAlongStep</code> property is measured from the beginning of the step associated with this object. By contrast, the <code>text</code> and <code>ssmlText</code> properties refer to the details in the following step. It is also possible for the instruction to refer to two following steps simultaneously when needed for safe navigation.
SWIFT_CLASS_NAMED("SpokenInstruction")
@interface MBSpokenInstruction : NSObject <NSSecureCoding>
/// A distance along the associated <code>RouteStep</code> at which to read the instruction aloud.
/// The distance is measured in meters from the beginning of the associated step.
@property (nonatomic, readonly) CLLocationDistance distanceAlongStep;
/// A plain-text representation of the speech-optimized instruction.
/// This representation is appropriate for speech synthesizers that lack support for the <a href="https://en.wikipedia.org/wiki/Speech_Synthesis_Markup_Language">Speech Synthesis Markup Language</a> (SSML), such as <code>AVSpeechSynthesizer</code>. For speech synthesizers that support SSML, use the <code>ssmlText</code> property instead.
@property (nonatomic, readonly, copy) NSString * _Nonnull text;
/// A formatted representation of the speech-optimized instruction.
/// This representation is appropriate for speech synthesizers that support the <a href="https://en.wikipedia.org/wiki/Speech_Synthesis_Markup_Language">Speech Synthesis Markup Language</a> (SSML), such as <a href="https://aws.amazon.com/polly/">Amazon Polly</a>. Numbers and names are marked up to ensure correct pronunciation. For speech synthesizers that lack SSML support, use the <code>text</code> property instead.
@property (nonatomic, readonly, copy) NSString * _Nonnull ssmlText;
/// Initialize a <code>SpokenInstruction</code> from a dictionary.
- (nonnull instancetype)initWithJson:(NSDictionary<NSString *, id> * _Nonnull)json;
/// Initialize a <code>SpokenInstruction</code>.
/// \param distanceAlongStep A distance along the associated <code>RouteStep</code> at which to read the instruction aloud.
///
/// \param text A plain-text representation of the speech-optimized instruction.
///
/// \param ssmlText A formatted representation of the speech-optimized instruction.
///
- (nonnull instancetype)initWithDistanceAlongStep:(CLLocationDistance)distanceAlongStep text:(NSString * _Nonnull)text ssmlText:(NSString * _Nonnull)ssmlText OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL supportsSecureCoding;)
+ (BOOL)supportsSecureCoding SWIFT_WARN_UNUSED_RESULT;
+ (void)setSupportsSecureCoding:(BOOL)value;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

@class CLHeading;

/// A <code>Waypoint</code> object indicates a location along a route. It may be the route’s origin or destination, or it may be another location that the route visits. A waypoint object indicates the location’s geographic location along with other optional information, such as a name or the user’s direction approaching the waypoint. You create a <code>RouteOptions</code> object using waypoint objects and also receive waypoint objects in the completion handler of the <code>Directions.calculate(_:completionHandler:)</code> method.
SWIFT_CLASS_NAMED("Waypoint")
@interface MBWaypoint : NSObject <NSCopying, NSSecureCoding>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL supportsSecureCoding;)
+ (BOOL)supportsSecureCoding SWIFT_WARN_UNUSED_RESULT;
/// Initializes a new waypoint object with the given geographic coordinate and an optional accuracy and name.
/// \param coordinate The geographic coordinate of the waypoint.
///
/// \param coordinateAccuracy The maximum distance away from the waypoint that the route may come and still be considered viable. This parameter is measured in meters. A negative value means the route may be an indefinite number of meters away from the route and still be considered viable.
/// It is recommended that the value of this parameter be greater than the <code>horizontalAccuracy</code> property of a <code>CLLocation</code> object obtained from a <code>CLLocationManager</code> object. There is a high likelihood that the user may be located some distance away from a navigable road, for instance if the user is currently on a driveway or inside a building.
///
/// \param name The name of the waypoint. This parameter does not affect the route but may help you to distinguish one waypoint from another.
///
- (nonnull instancetype)initWithCoordinate:(CLLocationCoordinate2D)coordinate coordinateAccuracy:(CLLocationAccuracy)coordinateAccuracy name:(NSString * _Nullable)name OBJC_DESIGNATED_INITIALIZER;
/// Initializes a new waypoint object with the given <code>CLLocation</code> object and an optional <code>CLHeading</code> object and name.
/// note:
/// This initializer is intended for <code>CLLocation</code> objects created using the <code>CLLocation.init(latitude:longitude:)</code> initializer. If you intend to use a <code>CLLocation</code> object obtained from a <code>CLLocationManager</code> object, consider increasing the <code>horizontalAccuracy</code> or set it to a negative value to avoid overfitting, since the <code>Waypoint</code> class’s <code>coordinateAccuracy</code> property represents the maximum allowed deviation from the waypoint. There is a high likelihood that the user may be located some distance away from a navigable road, for instance if the user is currently on a driveway of inside a building.
/// \param location A <code>CLLocation</code> object representing the waypoint’s location. This initializer respects the <code>CLLocation</code> class’s <code>coordinate</code> and <code>horizontalAccuracy</code> properties, converting them into the <code>coordinate</code> and <code>coordinateAccuracy</code> properties, respectively.
///
/// \param heading A <code>CLHeading</code> object representing the direction from which the route must approach the waypoint in order to be considered viable. This initializer respects the <code>CLHeading</code> class’s <code>trueHeading</code> property or <code>magneticHeading</code> property, converting it into the <code>headingAccuracy</code> property.
///
/// \param name The name of the waypoint. This parameter does not affect the route but may help you to distinguish one waypoint from another.
///
- (nonnull instancetype)initWithLocation:(CLLocation * _Nonnull)location heading:(CLHeading * _Nullable)heading name:(NSString * _Nullable)name OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
/// The geographic coordinate of the waypoint.
@property (nonatomic, readonly) CLLocationCoordinate2D coordinate;
/// The radius of uncertainty for the waypoint, measured in meters.
/// For a route to be considered viable, it must enter this waypoint’s circle of uncertainty. The <code>coordinate</code> property identifies the center of the circle, while this property indicates the circle’s radius. If the value of this property is negative, a route is considered viable regardless of whether it enters this waypoint’s circle of uncertainty, subject to an undefined maximum distance.
/// By default, the value of this property is a negative number.
@property (nonatomic) CLLocationAccuracy coordinateAccuracy;
/// The direction from which a route must approach this waypoint in order to be considered viable.
/// This property is measured in degrees clockwise from true north. A value of 0 degrees means due north, 90 degrees means due east, 180 degrees means due south, and so on. If the value of this property is negative, a route is considered viable regardless of the direction from which it approaches this waypoint.
/// If this waypoint is the first waypoint (the source waypoint), the route must start out by heading in the direction specified by this property. You should always set the <code>headingAccuracy</code> property in conjunction with this property. If the <code>headingAccuracy</code> property is set to a negative value, this property is ignored.
/// For driving directions, this property can be useful for avoiding a route that begins by going in the direction opposite the current direction of travel. For example, if you know the user is moving eastwardly and the first waypoint is the user’s current location, specifying a heading of 90 degrees and a heading accuracy of 90 degrees for the first waypoint avoids a route that begins with a “head west” instruction.
/// You should be certain that the user is in motion before specifying a heading and heading accuracy; otherwise, you may be unnecessarily filtering out the best route. For example, suppose the user is sitting in a car parked in a driveway, facing due north, with the garage in front and the street to the rear. In that case, specifying a heading of 0 degrees and a heading accuracy of 90 degrees may result in a route that begins on the back alley or, worse, no route at all. For this reason, it is recommended that you only specify a heading and heading accuracy when automatically recalculating directions due to the user deviating from the route.
/// By default, the value of this property is a negative number, meaning that a route is considered viable regardless of the direction of approach.
@property (nonatomic) CLLocationDirection heading;
/// The maximum amount, in degrees, by which a route’s approach to a waypoint may differ from <code>heading</code> in either direction in order to be considered viable.
/// A value of 0 degrees means that the approach must match the specified <code>heading</code> exactly – an unlikely scenario. A value of 180 degrees or more means that the approach may be as much as 180 degrees in either direction from the specified <code>heading</code>, effectively allowing a candidate route to approach the waypoint from any direction.
/// If you set the <code>heading</code> property, you should set this property to a value such as 90 degrees, to avoid filtering out routes whose approaches differ only slightly from the specified <code>heading</code>. Otherwise, if the <code>heading</code> property is set to a negative value, this property is ignored.
/// By default, the value of this property is a negative number, meaning that a route is considered viable regardless of the direction of approach.
@property (nonatomic) CLLocationDirection headingAccuracy;
/// The name of the waypoint.
/// This parameter does not affect the route, but you can set the name of a waypoint you pass into a <code>RouteOptions</code> object to help you distinguish one waypoint from another in the array of waypoints passed into the completion handler of the <code>Directions.calculate(_:completionHandler:)</code> method.
@property (nonatomic, copy) NSString * _Nullable name;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// A <code>Tracepoint</code> represents a location matched to the road network.
SWIFT_CLASS_NAMED("Tracepoint")
@interface MBTracepoint : MBWaypoint
/// Number of probable alternative matchings for this tracepoint. A value of zero indicates that this point was matched unambiguously.
@property (nonatomic) NSInteger alternateCount;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL supportsSecureCoding;)
+ (BOOL)supportsSecureCoding SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithCoordinate:(CLLocationCoordinate2D)coordinate coordinateAccuracy:(CLLocationAccuracy)coordinateAccuracy name:(NSString * _Nullable)name SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithLocation:(CLLocation * _Nonnull)location heading:(CLHeading * _Nullable)heading name:(NSString * _Nullable)name SWIFT_UNAVAILABLE;
@end

/// A <code>TransportType</code> specifies the mode of transportation used for part of a route.
typedef SWIFT_ENUM_NAMED(NSInteger, MBTransportType, "TransportType", closed) {
/// The step does not have a particular transport type associated with it.
/// This transport type is used as a workaround for bridging to Objective-C which does not support nullable enumeration-typed values.
  MBTransportTypeNone = 0,
/// The route requires the user to drive or ride a car, truck, or motorcycle.
/// This is the usual transport type when the <code>profileIdentifier</code> is <code>MBDirectionsProfileIdentifierAutomobile</code> or <code>MBDirectionsProfileIdentifierAutomobileAvoidingTraffic</code>.
  MBTransportTypeAutomobile = 1,
/// The route requires the user to board a ferry.
/// The user should verify that the ferry is in operation. For driving and cycling directions, the user should also verify that his or her vehicle is permitted onboard the ferry.
  MBTransportTypeFerry = 2,
/// The route requires the user to cross a movable bridge.
/// The user may need to wait for the movable bridge to become passable before continuing.
  MBTransportTypeMovableBridge = 3,
/// The route becomes impassable at this point.
/// You should not encounter this transport type under normal circumstances.
  MBTransportTypeInaccessible = 4,
/// The route requires the user to walk.
/// This is the usual transport type when the <code>profileIdentifier</code> is <code>MBDirectionsProfileIdentifierWalking</code>. For cycling directions, this value indicates that the user is expected to dismount.
  MBTransportTypeWalking = 5,
/// The route requires the user to ride a bicycle.
/// This is the usual transport type when the <code>profileIdentifier</code> is <code>MBDirectionsProfileIdentifierCycling</code>.
  MBTransportTypeCycling = 6,
/// The route requires the user to board a train.
/// The user should consult the train’s timetable. For cycling directions, the user should also verify that bicycles are permitted onboard the train.
  MBTransportTypeTrain = 7,
};

@class MBVisualInstructionComponent;

/// :nodoc:
/// Encompasses all information necessary for creating a visual cue about a given <code>RouteStep</code>.
SWIFT_CLASS_NAMED("VisualInstruction")
@interface MBVisualInstruction : NSObject <NSSecureCoding>
/// :nodoc:
/// Distance in meters from the beginning of the step at which the visual instruction should be visible.
@property (nonatomic, readonly) CLLocationDistance distanceAlongStep;
/// :nodoc:
/// A plain text representation of <code>primaryTextComponents</code>.
@property (nonatomic, readonly, copy) NSString * _Nonnull primaryText;
/// :nodoc:
/// Most important visual content to convey to the user about the <code>RouteStep</code>.
/// This is the structured representation of <code>primaryText</code>.
@property (nonatomic, readonly, copy) NSArray<MBVisualInstructionComponent *> * _Nonnull primaryTextComponents;
/// :nodoc:
/// A plain text representation of <code>secondaryTextComponents</code>.
@property (nonatomic, readonly, copy) NSString * _Nullable secondaryText;
/// :nodoc:
/// Ancillary visual information about the <code>RouteStep</code>.
/// This is the structured representation of <code>secondaryText</code>.
@property (nonatomic, readonly, copy) NSArray<MBVisualInstructionComponent *> * _Nullable secondaryTextComponents;
/// :nodoc:
/// Indicates what side of a bidirectional road the driver must be driving on. Also referred to as the rule of the road.
@property (nonatomic) enum MBDrivingSide drivingSide;
/// :nodoc:
/// Initialize a <code>VisualInstruction</code> from a dictionary given a <code>DrivingSide</code>.
- (nonnull instancetype)initWithJson:(NSDictionary<NSString *, id> * _Nonnull)json drivingSide:(enum MBDrivingSide)drivingSide;
/// :nodoc:
/// Initialize a <code>VisualInstruction</code>.
- (nonnull instancetype)initWithDistanceAlongStep:(CLLocationDistance)distanceAlongStep primaryText:(NSString * _Nonnull)primaryText primaryTextComponents:(NSArray<MBVisualInstructionComponent *> * _Nonnull)primaryTextComponents secondaryText:(NSString * _Nullable)secondaryText secondaryTextComponents:(NSArray<MBVisualInstructionComponent *> * _Nullable)secondaryTextComponents drivingSide:(enum MBDrivingSide)drivingSide OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL supportsSecureCoding;)
+ (BOOL)supportsSecureCoding SWIFT_WARN_UNUSED_RESULT;
+ (void)setSupportsSecureCoding:(BOOL)value;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

enum MBVisualInstructionComponentType : NSInteger;

/// :nodoc:
/// A component of a <code>VisualInstruction</code> that represents a single run of similarly formatted text or an image with a textual fallback representation.
SWIFT_CLASS_NAMED("VisualInstructionComponent")
@interface MBVisualInstructionComponent : NSObject <NSSecureCoding>
/// :nodoc:
/// The plain text representation of this component.
/// Use this property if <code>imageURLs</code> is an empty dictionary or if the URLs contained in that property are not yet available.
@property (nonatomic, readonly, copy) NSString * _Nullable text;
/// :nodoc:
/// The URL to an image representation of this component.
/// The URL refers to an image that uses the device’s native screen scale.
@property (nonatomic, copy) NSURL * _Nullable imageURL;
/// :nodoc:
/// The type of visual instruction component. You can display the component differently depending on its type.
@property (nonatomic) enum MBVisualInstructionComponentType type;
/// :nodoc:
/// The maneuver type for the <code>VisualInstruction</code>.
@property (nonatomic) enum MBManeuverType maneuverType;
/// :nodoc:
/// The modifier type for the <code>VisualInstruction</code>.
@property (nonatomic) enum MBManeuverDirection maneuverDirection;
/// An abbreviated version of the text for a given component.
@property (nonatomic, copy) NSString * _Nullable abbreviation;
/// The priority in which the component should be abbreviated. Lower numbers should be abbreviated first.
@property (nonatomic) NSInteger abbreviationPriority;
/// :nodoc:
/// Initialize A <code>VisualInstructionComponent</code>.
- (nonnull instancetype)initWithManeuverType:(enum MBManeuverType)maneuverType maneuverDirection:(enum MBManeuverDirection)maneuverDirection json:(NSDictionary<NSString *, id> * _Nonnull)json;
/// :nodoc:
/// Initialize A <code>VisualInstructionComponent</code>.
- (nonnull instancetype)initWithType:(enum MBVisualInstructionComponentType)type text:(NSString * _Nullable)text imageURL:(NSURL * _Nullable)imageURL maneuverType:(enum MBManeuverType)maneuverType maneuverDirection:(enum MBManeuverDirection)maneuverDirection abbreviation:(NSString * _Nullable)abbreviation abbreviationPriority:(NSInteger)abbreviationPriority OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL supportsSecureCoding;)
+ (BOOL)supportsSecureCoding SWIFT_WARN_UNUSED_RESULT;
+ (void)setSupportsSecureCoding:(BOOL)value;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

/// <code>VisualInstructionComponentType</code> describes the type of <code>VisualInstructionComponent</code>.
typedef SWIFT_ENUM_NAMED(NSInteger, MBVisualInstructionComponentType, "VisualInstructionComponentType", closed) {
/// The component separates two other destination components.
/// If the two adjacent components are both displayed as images, you can hide this delimiter component.
  MBVisualInstructionComponentTypeDelimiter = 0,
/// The component bears the name of a place or street.
  MBVisualInstructionComponentTypeText = 1,
/// Component contains an image that should be rendered.
  MBVisualInstructionComponentTypeImage = 2,
/// The compoment contains the localized word for “exit”.
/// This component may appear before or after an <code>.exitNumber</code> component, depending on the language.
  MBVisualInstructionComponentTypeExit = 3,
/// A component contains an exit number.
  MBVisualInstructionComponentTypeExitCode = 4,
};




#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#endif

#else
#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.0.1 effective-4.1.50 (swiftlang-1001.0.82.4 clang-1001.0.46.5)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreLocation;
@import Foundation;
@import ObjectiveC;
#endif

#import <MapboxDirections/MapboxDirections.h>

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="MapboxDirections",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif



/// A <code>CongestionLevel</code> indicates the level of traffic congestion along a road segment relative to the normal flow of traffic along that segment. You can color-code a route line according to the congestion level along each segment of the route.
typedef SWIFT_ENUM_NAMED(NSInteger, MBCongestionLevel, "CongestionLevel", closed) {
/// There is not enough data to determine the level of congestion along the road segment.
  MBCongestionLevelUnknown = 0,
/// The road segment has little or no congestion. Traffic is flowing smoothly.
/// Low congestion levels are conventionally highlighted in green or not highlighted at all.
  MBCongestionLevelLow = 1,
/// The road segment has moderate, stop-and-go congestion. Traffic is flowing but speed is impeded.
/// Moderate congestion levels are conventionally highlighted in yellow.
  MBCongestionLevelModerate = 2,
/// The road segment has heavy, bumper-to-bumper congestion. Traffic is barely moving.
/// Heavy congestion levels are conventionally highlighted in orange.
  MBCongestionLevelHeavy = 3,
/// The road segment has severe congestion. Traffic may be completely stopped.
/// Severe congestion levels are conventionally highlighted in red.
  MBCongestionLevelSevere = 4,
};

@class MBRouteOptions;
@class MBWaypoint;
@class MBRoute;
@class NSError;
@class NSURLSessionDataTask;
@class MBMatchOptions;
@class MBMatch;
@class MBDirectionsOptions;

/// A <code>Directions</code> object provides you with optimal directions between different locations, or waypoints. The directions object passes your request to the <a href="https://www.mapbox.com/api-documentation/?language=Swift#directions">Mapbox Directions API</a> and returns the requested information to a closure (block) that you provide. A directions object can handle multiple simultaneous requests. A <code>RouteOptions</code> object specifies criteria for the results, such as intermediate waypoints, a mode of transportation, or the level of detail to be returned.
/// Each result produced by the directions object is stored in a <code>Route</code> object. Depending on the <code>RouteOptions</code> object you provide, each route may include detailed information suitable for turn-by-turn directions, or it may include only high-level information such as the distance, estimated travel time, and name of each leg of the trip. The waypoints that form the request may be conflated with nearby locations, as appropriate; the resulting waypoints are provided to the closure.
SWIFT_CLASS_NAMED("Directions")
@interface MBDirections : NSObject
/// The shared directions object.
/// To use this object, a Mapbox <a href="https://www.mapbox.com/help/define-access-token/">access token</a> should be specified in the <code>MGLMapboxAccessToken</code> key in the main application bundle’s Info.plist.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) MBDirections * _Nonnull sharedDirections;)
+ (MBDirections * _Nonnull)sharedDirections SWIFT_WARN_UNUSED_RESULT;
/// Initializes a newly created directions object with an optional access token and host.
/// \param accessToken A Mapbox <a href="https://www.mapbox.com/help/define-access-token/">access token</a>. If an access token is not specified when initializing the directions object, it should be specified in the <code>MGLMapboxAccessToken</code> key in the main application bundle’s Info.plist.
///
/// \param host An optional hostname to the server API. The <a href="https://www.mapbox.com/api-documentation/?language=Swift#directions">Mapbox Directions API</a> endpoint is used by default.
///
- (nonnull instancetype)initWithAccessToken:(NSString * _Nullable)accessToken host:(NSString * _Nullable)host OBJC_DESIGNATED_INITIALIZER;
/// Initializes a newly created directions object with an optional access token.
/// The directions object sends requests to the <a href="https://www.mapbox.com/api-documentation/?language=Swift#directions">Mapbox Directions API</a> endpoint.
/// \param accessToken A Mapbox <a href="https://www.mapbox.com/help/define-access-token/">access token</a>. If an access token is not specified when initializing the directions object, it should be specified in the <code>MGLMapboxAccessToken</code> key in the main application bundle’s Info.plist.
///
- (nonnull instancetype)initWithAccessToken:(NSString * _Nullable)accessToken;
/// Begins asynchronously calculating the route or routes using the given options and delivers the results to a closure.
/// This method retrieves the routes asynchronously over a network connection. If a connection error or server error occurs, details about the error are passed into the given completion handler in lieu of the routes.
/// Routes may be displayed atop a <a href="https://www.mapbox.com/maps/">Mapbox map</a>. They may be cached but may not be stored permanently. To use the results in other contexts or store them permanently, <a href="https://www.mapbox.com/directions/#pricing">upgrade to a Mapbox enterprise plan</a>.
/// \param options A <code>RouteOptions</code> object specifying the requirements for the resulting routes.
///
/// \param completionHandler The closure (block) to call with the resulting routes. This closure is executed on the application’s main thread.
///
///
/// returns:
/// The data task used to perform the HTTP request. If, while waiting for the completion handler to execute, you no longer want the resulting routes, cancel this task.
- (NSURLSessionDataTask * _Nonnull)calculateDirectionsWithOptions:(MBRouteOptions * _Nonnull)options completionHandler:(void (^ _Nonnull)(NSArray<MBWaypoint *> * _Nullable, NSArray<MBRoute *> * _Nullable, NSError * _Nullable))completionHandler;
/// Begins asynchronously calculating a match using the given options and delivers the results to a closure.
/// \param options A <code>MatchOptions</code> object specifying the requirements for the resulting match.
///
/// \param completionHandler The closure (block) to call with the resulting routes. This closure is executed on the application’s main thread.
///
///
/// returns:
/// The data task used to perform the HTTP request. If, while waiting for the completion handler to execute, you no longer want the resulting routes, cancel this task.
- (NSURLSessionDataTask * _Nonnull)calculateMatchesWithOptions:(MBMatchOptions * _Nonnull)options completionHandler:(void (^ _Nonnull)(NSArray<MBMatch *> * _Nullable, NSError * _Nullable))completionHandler;
- (NSURLSessionDataTask * _Nonnull)calculateRoutesMatchingOptions:(MBMatchOptions * _Nonnull)options completionHandler:(void (^ _Nonnull)(NSArray<MBWaypoint *> * _Nullable, NSArray<MBRoute *> * _Nullable, NSError * _Nullable))completionHandler;
/// The HTTP URL used to fetch the routes from the API.
/// After requesting the URL returned by this method, you can parse the JSON data in the response and pass it into the <code>Route.init(json:waypoints:profileIdentifier:)</code> initializer.
- (NSURL * _Nonnull)URLForCalculatingDirectionsWithOptions:(MBDirectionsOptions * _Nonnull)options SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

@class NSCoder;
enum MBRouteShapeFormat : NSUInteger;
enum MBRouteShapeResolution : NSUInteger;
enum MBMeasurementSystem : NSUInteger;

/// Options for calculating results from the Mapbox Directions service.
/// You do not create instances of this class directly. Instead, create instances of <code>MatchOptions</code> or <code>RouteOptions</code>.
SWIFT_CLASS_NAMED("DirectionsOptions")
@interface MBDirectionsOptions : NSObject <NSCopying, NSSecureCoding>
/// Initializes a route options object for routes between the given waypoints and an optional profile identifier.
/// \param waypoints An array of <code>Waypoint</code> objects representing locations that the route should visit in chronological order. The array should contain at least two waypoints (the source and destination) and at most 25 waypoints. (Some profiles, such as <code>MBDirectionsProfileIdentifierAutomobileAvoidingTraffic</code>, <a href="https://www.mapbox.com/api-documentation/#directions">may have lower limits</a>.)
///
/// \param profileIdentifier A string specifying the primary mode of transportation for the routes. This parameter, if set, should be set to <code>MBDirectionsProfileIdentifierAutomobile</code>, <code>MBDirectionsProfileIdentifierAutomobileAvoidingTraffic</code>, <code>MBDirectionsProfileIdentifierCycling</code>, or <code>MBDirectionsProfileIdentifierWalking</code>. <code>MBDirectionsProfileIdentifierAutomobile</code> is used by default.
///
- (nonnull instancetype)initWithWaypoints:(NSArray<MBWaypoint *> * _Nonnull)waypoints profileIdentifier:(MBDirectionsProfileIdentifier _Nullable)profileIdentifier OBJC_DESIGNATED_INITIALIZER;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL supportsSecureCoding;)
+ (BOOL)supportsSecureCoding SWIFT_WARN_UNUSED_RESULT;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEqualToDirectionsOptions:(MBDirectionsOptions * _Nullable)directionsOptions SWIFT_WARN_UNUSED_RESULT;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
/// An array of <code>Waypoint</code> objects representing locations that the route should visit in chronological order.
/// A waypoint object indicates a location to visit, as well as an optional heading from which to approach the location.
/// The array should contain at least two waypoints (the source and destination) and at most 25 waypoints.
@property (nonatomic, copy) NSArray<MBWaypoint *> * _Nonnull waypoints;
/// A string specifying the primary mode of transportation for the routes.
/// This property should be set to <code>MBDirectionsProfileIdentifierAutomobile</code>, <code>MBDirectionsProfileIdentifierAutomobileAvoidingTraffic</code>, <code>MBDirectionsProfileIdentifierCycling</code>, or <code>MBDirectionsProfileIdentifierWalking</code>. The default value of this property is <code>MBDirectionsProfileIdentifierAutomobile</code>, which specifies driving directions.
@property (nonatomic) MBDirectionsProfileIdentifier _Nonnull profileIdentifier;
/// A Boolean value indicating whether <code>MBRouteStep</code> objects should be included in the response.
/// If the value of this property is <code>true</code>, the returned route contains turn-by-turn instructions. Each returned <code>MBRoute</code> object contains one or more <code>MBRouteLeg</code> object that in turn contains one or more <code>MBRouteStep</code> objects. On the other hand, if the value of this property is <code>false</code>, the <code>MBRouteLeg</code> objects contain no <code>MBRouteStep</code> objects.
/// If you only want to know the distance or estimated travel time to a destination, set this property to <code>false</code> to minimize the size of the response and the time it takes to calculate the response. If you need to display turn-by-turn instructions, set this property to <code>true</code>.
/// The default value of this property is <code>false</code>.
@property (nonatomic) BOOL includesSteps;
/// Format of the data from which the shapes of the returned route and its steps are derived.
/// This property has no effect on the returned shape objects, although the choice of format can significantly affect the size of the underlying HTTP response.
/// The default value of this property is <code>polyline</code>.
@property (nonatomic) enum MBRouteShapeFormat shapeFormat;
/// Resolution of the shape of the returned route.
/// This property has no effect on the shape of the returned route’s steps.
/// The default value of this property is <code>low</code>, specifying a low-resolution route shape.
@property (nonatomic) enum MBRouteShapeResolution routeShapeResolution;
/// AttributeOptions for the route. Any combination of <code>AttributeOptions</code> can be specified.
/// By default, no attribute options are specified. It is recommended that <code>routeShapeResolution</code> be set to <code>.full</code>.
@property (nonatomic) MBAttributeOptions attributeOptions;
/// The locale in which the route’s instructions are written.
/// If you use MapboxDirections.swift with the Mapbox Directions API or Map Matching API, this property affects the sentence contained within the <code>RouteStep.instructions</code> property, but it does not affect any road names contained in that property or other properties such as <code>RouteStep.name</code>.
/// The Directions API can provide instructions in <a href="https://www.mapbox.com/api-documentation/#instructions-languages">a number of languages</a>. Set this property to <code>Bundle.main.preferredLocalizations.first</code> or <code>Locale.autoupdatingCurrent</code> to match the application’s language or the system language, respectively.
/// By default, this property is set to the current system locale.
@property (nonatomic, copy) NSLocale * _Nonnull locale;
/// A Boolean value indicating whether each route step includes an array of <code>SpokenInstructions</code>.
/// If this option is set to true, the <code>RouteStep.instructionsSpokenAlongStep</code> property is set to an array of <code>SpokenInstructions</code>.
@property (nonatomic) BOOL includesSpokenInstructions;
/// The measurement system used in spoken instructions included in route steps.
/// If the <code>includesSpokenInstructions</code> property is set to <code>true</code>, this property determines the units used for measuring the distance remaining until an upcoming maneuver. If the <code>includesSpokenInstructions</code> property is set to <code>false</code>, this property has no effect.
/// You should choose a measurement system appropriate for the current region. You can also allow the user to indicate their preferred measurement system via a setting.
@property (nonatomic) enum MBMeasurementSystem distanceMeasurementSystem;
/// :nodoc:
/// If true, each <code>RouteStep</code> will contain the property <code>visualInstructionsAlongStep</code>.
/// <code>visualInstructionsAlongStep</code> contains an array of <code>VisualInstruction</code> used for visually conveying information about a given <code>RouteStep</code>.
@property (nonatomic) BOOL includesVisualInstructions;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

@class MBRouteLeg;

/// A <code>DirectionsResult</code> represents a result returned from either the Mapbox Directions service.
/// You do not create instances of this class directly. Instead, you receive <code>Route</code> or <code>Match</code> objects when you request directions using the <code>Directions.calculate(_:completionHandler:)</code> or <code>Directions.calculateRoutes(matching:completionHandler:)</code> method.
SWIFT_CLASS_NAMED("DirectionsResult")
@interface MBDirectionsResult : NSObject <NSSecureCoding>
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL supportsSecureCoding;)
+ (BOOL)supportsSecureCoding SWIFT_WARN_UNUSED_RESULT;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
/// An array of geographic coordinates defining the path of the route from start to finish.
/// This array may be <code>nil</code> or simplified depending on the <code>routeShapeResolution</code> property of the original <code>RouteOptions</code> object.
/// Using the <a href="https://www.mapbox.com/ios-sdk/">Mapbox Maps SDK for iOS</a> or <a href="https://github.com/mapbox/mapbox-gl-native/tree/master/platform/macos/">Mapbox Maps SDK for macOS</a>, you can create an <code>MGLPolyline</code> object using these coordinates to display an overview of the route on an <code>MGLMapView</code>.
@property (nonatomic, readonly, copy) NSArray<NSValue *> * _Nullable coordinates;
/// The number of coordinates.
/// The value of this property may be zero or reduced depending on the <code>routeShapeResolution</code> property of the original <code>RouteOptions</code> object.
/// note:
/// This initializer is intended for Objective-C usage. In Swift code, use the <code>coordinates.count</code> property.
@property (nonatomic, readonly) NSUInteger coordinateCount;
/// Retrieves the coordinates.
/// The array may be empty or simplified depending on the <code>routeShapeResolution</code> property of the original <code>RouteOptions</code> object.
/// Using the <a href="https://www.mapbox.com/ios-sdk/">Mapbox Maps SDK for iOS</a> or <a href="https://github.com/mapbox/mapbox-gl-native/tree/master/platform/macos/">Mapbox Maps SDK for macOS</a>, you can create an <code>MGLPolyline</code> object using these coordinates to display an overview of the route on an <code>MGLMapView</code>.
/// precondition:
/// <code>coordinates</code> must be large enough to hold <code>coordinateCount</code> instances of <code>CLLocationCoordinate2D</code>.
/// note:
/// This initializer is intended for Objective-C usage. In Swift code, use the <code>coordinates</code> property.
/// \param coordinates A pointer to a C array of <code>CLLocationCoordinate2D</code> instances. On output, this array contains all the vertices of the overlay.
///
- (void)getCoordinates:(CLLocationCoordinate2D * _Nonnull)coordinates;
/// An array of <code>RouteLeg</code> objects representing the legs of the route.
/// The number of legs in this array depends on the number of waypoints. A route with two waypoints (the source and destination) has one leg, a route with three waypoints (the source, an intermediate waypoint, and the destination) has two legs, and so on.
/// To determine the name of the route, concatenate the names of the route’s legs.
@property (nonatomic, readonly, copy) NSArray<MBRouteLeg *> * _Nonnull legs;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// The route’s distance, measured in meters.
/// The value of this property accounts for the distance that the user must travel to traverse the path of the route. It is the sum of the <code>distance</code> properties of the route’s legs, not the sum of the direct distances between the route’s waypoints. You should not assume that the user would travel along this distance at a fixed speed.
@property (nonatomic, readonly) CLLocationDistance distance;
/// The route’s expected travel time, measured in seconds.
/// The value of this property reflects the time it takes to traverse the entire route. It is the sum of the <code>expectedTravelTime</code> properties of the route’s legs. If the route was calculated using the <code>MBDirectionsProfileIdentifierAutomobileAvoidingTraffic</code> profile, this property reflects current traffic conditions at the time of the request, not necessarily the traffic conditions at the time the user would begin the route. For other profiles, this property reflects travel time under ideal conditions and does not account for traffic congestion. If the route makes use of a ferry or train, the actual travel time may additionally be subject to the schedules of those services.
/// Do not assume that the user would travel along the route at a fixed speed. For more granular travel times, use the <code>RouteLeg.expectedTravelTime</code> or <code>RouteStep.expectedTravelTime</code>. For even more granularity, specify the <code>AttributeOptions.expectedTravelTime</code> option and use the <code>RouteLeg.expectedSegmentTravelTimes</code> property.
@property (nonatomic, readonly) NSTimeInterval expectedTravelTime;
/// <code>RouteOptions</code> used to create the directions request.
/// The route options object’s profileIdentifier property reflects the primary mode of transportation used for the route. Individual steps along the route might use different modes of transportation as necessary.
@property (nonatomic, readonly, strong) MBDirectionsOptions * _Nonnull directionsOptions;
/// The <a href="https://www.mapbox.com/help/define-access-token/">access token</a> used to make the directions request.
/// This property is set automatically if a request is made via <code>Directions.calculate(_:completionHandler:)</code>.
@property (nonatomic, copy) NSString * _Nullable accessToken;
/// The endpoint used to make the directions request.
/// This property is set automatically if a request is made via <code>Directions.calculate(_:completionHandler:)</code>.
@property (nonatomic, copy) NSURL * _Nullable apiEndpoint;
/// A unique identifier for a directions request.
/// Each route produced by a single call to <code>Directions.calculate(_:completionHandler:)</code> has the same route identifier.
@property (nonatomic, copy) NSString * _Nullable routeIdentifier;
/// The locale to use for spoken instructions.
/// This locale is specific to Mapbox Voice API. If <code>nil</code> is returned, the instruction should be spoken with an alternative speech synthesizer.
@property (nonatomic, copy) NSLocale * _Nullable speechLocale;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

/// A <code>DrivingSide</code> indicates which side of the road cars and traffic flow.
typedef SWIFT_ENUM_NAMED(NSInteger, MBDrivingSide, "DrivingSide", closed) {
/// Indicates driving occurs on the <code>left</code> side.
  MBDrivingSideLeft = 0,
/// Indicates driving occurs on the <code>right</code> side.
  MBDrivingSideRight = 1,
};



/// A <code>RouteShapeFormat</code> indicates the format of a route’s shape in the raw HTTP response.
typedef SWIFT_ENUM_NAMED(NSUInteger, MBInstructionFormat, "InstructionFormat", closed) {
/// The route steps’ instructions are delivered in plain text format.
  MBInstructionFormatText = 0,
/// The route steps’ instructions are delivered in HTML format.
/// Key phrases are boldfaced.
  MBInstructionFormatHtml = 1,
};

@class MBLane;

/// A single cross street along a step.
SWIFT_CLASS_NAMED("Intersection")
@interface MBIntersection : NSObject <NSSecureCoding>
/// The geographic coordinates at the center of the intersection.
@property (nonatomic, readonly) CLLocationCoordinate2D location;
/// An array of <code>CLLocationDirection</code>s indicating the absolute headings of the roads that meet at the intersection.
/// A road is represented in this array by a heading indicating the direction from which the road meets the intersection. To get the direction of travel when leaving the intersection along the road, rotate the heading 180 degrees.
/// A single road that passes through this intersection is represented by two items in this array: one for the segment that enters the intersection and one for the segment that exits it.
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nonnull headings;
/// The indices of the items in the <code>headings</code> array that correspond to the roads that may be used to leave the intersection.
/// This index set effectively excludes any one-way road that leads toward the intersection.
@property (nonatomic, readonly, copy) NSIndexSet * _Nonnull outletIndexes;
/// The index of the item in the <code>headings</code> array that corresponds to the road that the containing route step uses to approach the intersection.
@property (nonatomic, readonly) NSInteger approachIndex;
/// The index of the item in the <code>headings</code> array that corresponds to the road that the containing route step uses to leave the intersection.
@property (nonatomic, readonly) NSInteger outletIndex;
/// An array of <code>Lane</code> objects representing all the lanes of the road that the containing route step uses to approach the intersection.
/// If no lane information is available for an intersection, this property’s value is <code>nil</code>. The first item corresponds to the leftmost lane, the second item corresponds to the second lane from the left, and so on, regardless of whether the surrounding country drives on the left or on the right.
@property (nonatomic, readonly, copy) NSArray<MBLane *> * _Nullable approachLanes;
/// The indices of the items in the <code>approachLanes</code> array that correspond to the roads that may be used to execute the maneuver.
/// If no lane information is available for an intersection, this property’s value is <code>nil</code>.
@property (nonatomic, readonly, copy) NSIndexSet * _Nullable usableApproachLanes;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL supportsSecureCoding;)
+ (BOOL)supportsSecureCoding SWIFT_WARN_UNUSED_RESULT;
+ (void)setSupportsSecureCoding:(BOOL)value;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// A lane on the road approaching an intersection.
SWIFT_CLASS_NAMED("Lane")
@interface MBLane : NSObject <NSSecureCoding>
/// The lane indications specifying the maneuvers that may be executed from the lane.
@property (nonatomic, readonly) MBLaneIndication indications;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL supportsSecureCoding;)
+ (BOOL)supportsSecureCoding SWIFT_WARN_UNUSED_RESULT;
+ (void)setSupportsSecureCoding:(BOOL)value;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

/// A <code>ManeuverDirection</code> clarifies a <code>ManeuverType</code> with directional information. The exact meaning of the maneuver direction for a given step depends on the step’s maneuver type; see the <code>ManeuverType</code> documentation for details.
typedef SWIFT_ENUM_NAMED(NSInteger, MBManeuverDirection, "ManeuverDirection", closed) {
/// The step does not have a particular maneuver direction associated with it.
/// This maneuver direction is used as a workaround for bridging to Objective-C which does not support nullable enumeration-typed values.
  MBManeuverDirectionNone = 0,
/// The maneuver requires a sharp turn to the right.
  MBManeuverDirectionSharpRight = 1,
/// The maneuver requires a turn to the right, a merge to the right, or an exit on the right, or the destination is on the right.
  MBManeuverDirectionRight = 2,
/// The maneuver requires a slight turn to the right.
  MBManeuverDirectionSlightRight = 3,
/// The maneuver requires no notable change in direction, or the destination is straight ahead.
  MBManeuverDirectionStraightAhead = 4,
/// The maneuver requires a slight turn to the left.
  MBManeuverDirectionSlightLeft = 5,
/// The maneuver requires a turn to the left, a merge to the left, or an exit on the left, or the destination is on the right.
  MBManeuverDirectionLeft = 6,
/// The maneuver requires a sharp turn to the left.
  MBManeuverDirectionSharpLeft = 7,
/// The maneuver requires a U-turn when possible.
/// Use the difference between the step’s initial and final headings to distinguish between a U-turn to the left (typical in countries that drive on the right) and a U-turn on the right (typical in countries that drive on the left). If the difference in headings is greater than 180 degrees, the maneuver requires a U-turn to the left. If the difference in headings is less than 180 degrees, the maneuver requires a U-turn to the right.
  MBManeuverDirectionUTurn = 8,
};

/// A <code>ManeuverType</code> specifies the type of maneuver required to complete the route step. You can pair a maneuver type with a <code>ManeuverDirection</code> to choose an appropriate visual or voice prompt to present the user.
/// In Swift, you can use pattern matching with a single switch statement on a tuple containing the maneuver type and maneuver direction to avoid a complex series of if-else-if statements or switch statements.
typedef SWIFT_ENUM_NAMED(NSInteger, MBManeuverType, "ManeuverType", closed) {
/// The step does not have a particular maneuver type associated with it.
/// This maneuver type is used as a workaround for bridging to Objective-C which does not support nullable enumeration-typed values.
  MBManeuverTypeNone = 0,
/// The step requires the user to depart from a waypoint.
/// If the waypoint is some distance away from the nearest road, the maneuver direction indicates the direction the user must turn upon reaching the road.
  MBManeuverTypeDepart = 1,
/// The step requires the user to turn.
/// The maneuver direction indicates the direction in which the user must turn relative to the current direction of travel. The exit index indicates the number of intersections, large or small, from the previous maneuver up to and including the intersection at which the user must turn.
  MBManeuverTypeTurn = 2,
/// The step requires the user to continue after a turn.
  MBManeuverTypeContinue = 3,
/// The step requires the user to continue on the current road as it changes names.
/// The step’s name contains the road’s new name. To get the road’s old name, use the previous step’s name.
  MBManeuverTypePassNameChange = 4,
/// The step requires the user to merge onto another road.
/// The maneuver direction indicates the side from which the other road approaches the intersection relative to the user.
  MBManeuverTypeMerge = 5,
/// The step requires the user to take a entrance ramp (slip road) onto a highway.
  MBManeuverTypeTakeOnRamp = 6,
/// The step requires the user to take an exit ramp (slip road) off a highway.
/// The maneuver direction indicates the side of the highway from which the user must exit. The exit index indicates the number of highway exits from the previous maneuver up to and including the exit that the user must take.
  MBManeuverTypeTakeOffRamp = 7,
/// The step requires the user to choose a fork at a Y-shaped fork in the road.
/// The maneuver direction indicates which fork to take.
  MBManeuverTypeReachFork = 8,
/// The step requires the user to turn at either a T-shaped three-way intersection or a sharp bend in the road where the road also changes names.
/// This maneuver type is called out separately so that the user may be able to proceed more confidently, without fear of having overshot the turn. If this distinction is unimportant to you, you may treat the maneuver as an ordinary <code>turn</code>.
  MBManeuverTypeReachEnd = 9,
/// The step requires the user to get into a specific lane in order to continue along the current road.
/// The maneuver direction is set to <code>straightAhead</code>. Each of the first intersection’s usable approach lanes also has an indication of <code>straightAhead</code>. A maneuver in a different direction would instead have a maneuver type of <code>turn</code>.
/// This maneuver type is called out separately so that the application can present the user with lane guidance based on the first element in the <code>intersections</code> property. If lane guidance is unimportant to you, you may treat the maneuver as an ordinary <code>continue</code> or ignore it.
  MBManeuverTypeUseLane = 10,
/// The step requires the user to enter and traverse a roundabout (traffic circle or rotary).
/// The step has no name, but the exit name is the name of the road to take to exit the roundabout. The exit index indicates the number of roundabout exits up to and including the exit to take.
/// If <code>RouteOptions.includesExitRoundaboutManeuver</code> is set to <code>true</code>, this step is followed by an <code>.exitRoundabout</code> maneuver. Otherwise, this step represents the entire roundabout maneuver, from the entrance to the exit.
  MBManeuverTypeTakeRoundabout = 11,
/// The step requires the user to enter and traverse a large, named roundabout (traffic circle or rotary).
/// The step’s name is the name of the roundabout. The exit name is the name of the road to take to exit the roundabout. The exit index indicates the number of rotary exits up to and including the exit that the user must take.
/// If <code>RouteOptions.includesExitRoundaboutManeuver</code> is set to <code>true</code>, this step is followed by an <code>.exitRotary</code> maneuver. Otherwise, this step represents the entire roundabout maneuver, from the entrance to the exit.
  MBManeuverTypeTakeRotary = 12,
/// The step requires the user to enter and exit a roundabout (traffic circle or rotary) that is compact enough to constitute a single intersection.
/// The step’s name is the name of the road to take after exiting the roundabout. This maneuver type is called out separately because the user may perceive the roundabout as an ordinary intersection with an island in the middle. If this distinction is unimportant to you, you may treat the maneuver as either an ordinary <code>turn</code> or as a <code>takeRoundabout</code>.
  MBManeuverTypeTurnAtRoundabout = 13,
/// The step requires the user to exit a roundabout (traffic circle or rotary).
/// This maneuver type follows a <code>.takeRoundabout</code> maneuver. It is only used when <code>RouteOptions.includesExitRoundaboutManeuver</code> is set to true.
  MBManeuverTypeExitRoundabout = 14,
/// The step requires the user to exit a large, named roundabout (traffic circle or rotary).
/// This maneuver type follows a <code>.takeRotary</code> maneuver. It is only used when <code>RouteOptions.includesExitRoundaboutManeuver</code> is set to true.
  MBManeuverTypeExitRotary = 15,
/// The step requires the user to respond to a change in travel conditions.
/// This maneuver type may occur for example when driving directions require the user to board a ferry, or when cycling directions require the user to dismount. The step’s transport type and instructions contains important contextual details that should be presented to the user at the maneuver location.
/// Similar changes can occur simultaneously with other maneuvers, such as when the road changes its name at the site of a movable bridge. In such cases, <code>heedWarning</code> is suppressed in favor of another maneuver type.
  MBManeuverTypeHeedWarning = 16,
/// The step requires the user to arrive at a waypoint.
/// The distance and expected travel time for this step are set to zero, indicating that the route or route leg is complete. The maneuver direction indicates the side of the road on which the waypoint can be found (or whether it is straight ahead).
  MBManeuverTypeArrive = 17,
/// The step requires the user to arrive at an intermediate waypoint.
/// This maneuver type is only used by version 4 of the Mapbox Directions API.
  MBManeuverTypePassWaypoint = 18,
};

@class MBTracepoint;

/// A <code>Match</code> object defines a single route that was created from a series of points that were matched against a road network.
/// Typically, you do not create instances of this class directly. Instead, you receive match objects when you pass a <code>MatchOptions</code> object into the <code>Directions.calculate(_:completionHandler:)</code> or <code>Directions.calculateRoutes(matching:completionHandler:)</code> method.
SWIFT_CLASS_NAMED("Match")
@interface MBMatch : MBDirectionsResult
/// Initializes a new match object with the given JSON dictionary representation and tracepoints.
/// \param json A JSON dictionary representation of the route as returned by the Mapbox Map Matching API.
///
/// \param tracepoints An array of <code>Tracepoint</code> that the match found in order.
///
/// \param matchOptions The <code>MatchOptions</code> used to create the request.
///
- (nonnull instancetype)initWithJson:(NSDictionary<NSString *, id> * _Nonnull)json tracepoints:(NSArray<MBTracepoint *> * _Nonnull)tracepoints waypointIndices:(NSIndexSet * _Nonnull)waypointIndices matchOptions:(MBMatchOptions * _Nonnull)matchOptions;
/// A number between 0 and 1 that indicates the Map Matching API’s confidence that the match is accurate. A higher confidence means the match is more likely to be accurate.
@property (nonatomic) float confidence;
/// Tracepoints on the road network that match the tracepoints in the match options.
/// Any outlier tracepoint is omitted from the match. This array represents an outlier tracepoint is a <code>Tracepoint</code> object whose <code>Tracepoint.coordinate</code> property is <code>kCLLocationCoordinate2DInvalid</code>.
@property (nonatomic, copy) NSArray<MBTracepoint *> * _Nonnull tracepoints;
/// Index of the waypoint inside the matched route.
@property (nonatomic, copy) NSIndexSet * _Nullable waypointIndices;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL supportsSecureCoding;)
+ (BOOL)supportsSecureCoding SWIFT_WARN_UNUSED_RESULT;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEqualToMatch:(MBMatch * _Nullable)match SWIFT_WARN_UNUSED_RESULT;
@end


/// A <code>MatchOptions</code> object is a structure that specifies the criteria for results returned by the Mapbox Map Matching API.
/// Pass an instance of this class into the <code>Directions.calculate(_:completionHandler:)</code> method.
SWIFT_CLASS_NAMED("MatchOptions")
@interface MBMatchOptions : MBDirectionsOptions
- (nonnull instancetype)initWithWaypoints:(NSArray<MBWaypoint *> * _Nonnull)waypoints profileIdentifier:(MBDirectionsProfileIdentifier _Nullable)profileIdentifier OBJC_DESIGNATED_INITIALIZER;
/// If true, the input locations are re-sampled for improved map matching results. The default is  <code>false</code>.
@property (nonatomic) BOOL resamplesTraces;
/// An index set containing indices of two or more items in <code>coordinates</code>. These will be represented by <code>Waypoint</code>s in the resulting <code>Match</code> objects.
/// Use this property when the <code>includesSteps</code> property is <code>true</code> or when <code>coordinates</code> represents a trace with a high sample rate. If this property is <code>nil</code>, the resulting <code>Match</code> objects contain a waypoint for each coordinate in the match options.
/// If specified, each index must correspond to a valid index in <code>coordinates</code>, and the index set must contain 0 and the last index (one less than <code>endIndex</code>) of <code>coordinates</code>.
@property (nonatomic, copy) NSIndexSet * _Nullable waypointIndices;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL supportsSecureCoding;)
+ (BOOL)supportsSecureCoding SWIFT_WARN_UNUSED_RESULT;
@end

/// A system of units of measuring distances and other quantities.
typedef SWIFT_ENUM_NAMED(NSUInteger, MBMeasurementSystem, "MeasurementSystem", closed) {
/// U.S. customary and British imperial units.
/// Distances are measured in miles and feet.
  MBMeasurementSystemImperial = 0,
/// The metric system.
/// Distances are measured in kilometers and meters.
  MBMeasurementSystemMetric = 1,
};


/// A <code>Route</code> object defines a single route that the user can follow to visit a series of waypoints in order. The route object includes information about the route, such as its distance and expected travel time. Depending on the criteria used to calculate the route, the route object may also include detailed turn-by-turn instructions.
/// Typically, you do not create instances of this class directly. Instead, you receive route objects when you request directions using the <code>Directions.calculate(_:completionHandler:)</code> method. However, if you use the <code>Directions.url(forCalculating:)</code> method instead, you can pass the results of the HTTP request into this class’s initializer.
SWIFT_CLASS_NAMED("Route")
@interface MBRoute : MBDirectionsResult
/// Initializes a new route object with the given JSON dictionary representation and waypoints.
/// This initializer is intended for use in conjunction with the <code>Directions.url(forCalculating:)</code> method.
/// \param json A JSON dictionary representation of the route as returned by the Mapbox Directions API.
///
/// \param waypoints An array of waypoints that the route visits in chronological order.
///
/// \param routeOptions The <code>RouteOptions</code> used to create the request.
///
- (nonnull instancetype)initWithJson:(NSDictionary<NSString *, id> * _Nonnull)json waypoints:(NSArray<MBWaypoint *> * _Nonnull)waypoints routeOptions:(MBRouteOptions * _Nonnull)routeOptions OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
@end

@class MBRouteStep;

/// A <code>RouteLeg</code> object defines a single leg of a route between two waypoints. If the overall route has only two waypoints, it has a single <code>RouteLeg</code> object that covers the entire route. The route leg object includes information about the leg, such as its name, distance, and expected travel time. Depending on the criteria used to calculate the route, the route leg object may also include detailed turn-by-turn instructions.
/// You do not create instances of this class directly. Instead, you receive route leg objects as part of route objects when you request directions using the <code>Directions.calculate(_:completionHandler:)</code> method.
SWIFT_CLASS_NAMED("RouteLeg")
@interface MBRouteLeg : NSObject <NSSecureCoding>
/// Initializes a new route leg object with the given JSON dictionary representation and waypoints.
/// Normally, you do not create instances of this class directly. Instead, you receive route leg objects as part of route objects when you request directions using the <code>Directions.calculateDirections(options:completionHandler:)</code> method.
/// \param json A JSON dictionary representation of a route leg object as returnd by the Mapbox Directions API.
///
/// \param source The waypoint at the beginning of the leg.
///
/// \param destination The waypoint at the end of the leg.
///
/// \param profileIdentifier The profile identifier used to request the routes.
///
- (nonnull instancetype)initWithJson:(NSDictionary<NSString *, id> * _Nonnull)json source:(MBWaypoint * _Nonnull)source destination:(MBWaypoint * _Nonnull)destination profileIdentifier:(MBDirectionsProfileIdentifier _Nonnull)profileIdentifier;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL supportsSecureCoding;)
+ (BOOL)supportsSecureCoding SWIFT_WARN_UNUSED_RESULT;
+ (void)setSupportsSecureCoding:(BOOL)value;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
/// The starting point of the route leg.
/// Unless this is the first leg of the route, the source of this leg is the same as the destination of the previous leg.
@property (nonatomic, readonly, strong) MBWaypoint * _Nonnull source;
/// The endpoint of the route leg.
/// Unless this is the last leg of the route, the destination of this leg is the same as the source of the next leg.
@property (nonatomic, readonly, strong) MBWaypoint * _Nonnull destination;
/// An array of one or more <code>RouteStep</code> objects representing the steps for traversing this leg of the route.
/// Each route step object corresponds to a distinct maneuver and the approach to the next maneuver.
/// This array is empty if the <code>includesSteps</code> property of the original <code>RouteOptions</code> object is set to <code>false</code>.
@property (nonatomic, readonly, copy) NSArray<MBRouteStep *> * _Nonnull steps;
/// An array containing <a href="https://wiki.openstreetmap.org/wiki/Node">OpenStreetMap node identifiers</a>, one for each coordinate along the route geometry.
/// This property is set if the <code>RouteOptions.attributeOptions</code> property contains <code>.openStreetMapNodeIdentifier</code>.
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nullable openStreetMapNodeIdentifiers;
/// An array containing the distance (measured in meters) between each coordinate in the route leg geometry.
/// This property is set if the <code>RouteOptions.attributeOptions</code> property contains <code>.distance</code>.
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nullable segmentDistances;
/// An array containing the expected travel time (measured in seconds) between each coordinate in the route leg geometry.
/// These values are dynamic, accounting for any conditions that may change along a segment, such as traffic congestion if the profile identifier is set to <code>.automobileAvoidingTraffic</code>.
/// This property is set if the <code>RouteOptions.attributeOptions</code> property contains <code>.expectedTravelTime</code>.
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nullable expectedSegmentTravelTimes;
/// An array containing the expected average speed (measured in meters per second) between each coordinate in the route leg geometry.
/// These values are dynamic; rather than speed limits, they account for the road’s classification and/or any traffic congestion (if the profile identifier is set to <code>.automobileAvoidingTraffic</code>).
/// This property is set if the <code>RouteOptions.attributeOptions</code> property contains <code>.speed</code>.
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nullable segmentSpeeds;
/// A name that describes the route leg.
/// The name describes the leg using the most significant roads or trails along the route leg. You can display this string to the user to help the user can distinguish one route from another based on how the legs of the routes are named.
/// The leg’s name does not identify the start and end points of the leg. To distinguish one leg from another within the same route, concatenate the <code>name</code> properties of the <code>source</code> and <code>destination</code> waypoints.
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// The route leg’s distance, measured in meters.
/// The value of this property accounts for the distance that the user must travel to arrive at the destination from the source. It is not the direct distance between the source and destination, nor should not assume that the user would travel along this distance at a fixed speed.
@property (nonatomic, readonly) CLLocationDistance distance;
/// The route leg’s expected travel time, measured in seconds.
/// The value of this property reflects the time it takes to traverse the route leg. If the route was calculated using the <code>MBDirectionsProfileIdentifierAutomobileAvoidingTraffic</code> profile, this property reflects current traffic conditions at the time of the request, not necessarily the traffic conditions at the time the user would begin this leg. For other profiles, this property reflects travel time under ideal conditions and does not account for traffic congestion. If the leg makes use of a ferry or train, the actual travel time may additionally be subject to the schedules of those services.
/// Do not assume that the user would travel along the leg at a fixed speed. For the expected travel time on each individual segment along the leg, use the <code>RouteStep.expectedTravelTimes</code> property. For more granularity, specify the <code>AttributeOptions.expectedTravelTime</code> option and use the <code>expectedSegmentTravelTimes</code> property.
@property (nonatomic, readonly) NSTimeInterval expectedTravelTime;
/// A string specifying the primary mode of transportation for the route leg.
/// The value of this property is <code>MBDirectionsProfileIdentifierAutomobile</code>, <code>MBDirectionsProfileIdentifierAutomobileAvoidingTraffic</code>, <code>MBDirectionsProfileIdentifierCycling</code>, or <code>MBDirectionsProfileIdentifierWalking</code>, depending on the <code>profileIdentifier</code> property of the original <code>RouteOptions</code> object. This property reflects the primary mode of transportation used for the route leg. Individual steps along the route leg might use different modes of transportation as necessary.
@property (nonatomic, readonly) MBDirectionsProfileIdentifier _Nonnull profileIdentifier;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// A <code>RouteOptions</code> object is a structure that specifies the criteria for results returned by the Mapbox Directions API.
/// Pass an instance of this class into the <code>Directions.calculate(_:completionHandler:)</code> method.
SWIFT_CLASS_NAMED("RouteOptions")
@interface MBRouteOptions : MBDirectionsOptions
/// Initializes a route options object for routes between the given locations and an optional profile identifier.
/// note:
/// This initializer is intended for <code>CLLocation</code> objects created using the <code>CLLocation.init(latitude:longitude:)</code> initializer. If you intend to use a <code>CLLocation</code> object obtained from a <code>CLLocationManager</code> object, consider increasing the <code>horizontalAccuracy</code> or set it to a negative value to avoid overfitting, since the <code>Waypoint</code> class’s <code>coordinateAccuracy</code> property represents the maximum allowed deviation from the waypoint.
/// \param locations An array of <code>CLLocation</code> objects representing locations that the route should visit in chronological order. The array should contain at least two locations (the source and destination) and at most 25 locations. Each location object is converted into a <code>Waypoint</code> object. This class respects the <code>CLLocation</code> class’s <code>coordinate</code> and <code>horizontalAccuracy</code> properties, converting them into the <code>Waypoint</code> class’s <code>coordinate</code> and <code>coordinateAccuracy</code> properties, respectively.
///
/// \param profileIdentifier A string specifying the primary mode of transportation for the routes. This parameter, if set, should be set to <code>MBDirectionsProfileIdentifierAutomobile</code>, <code>MBDirectionsProfileIdentifierAutomobileAvoidingTraffic</code>, <code>MBDirectionsProfileIdentifierCycling</code>, or <code>MBDirectionsProfileIdentifierWalking</code>. <code>MBDirectionsProfileIdentifierAutomobile</code> is used by default.
///
- (nonnull instancetype)initWithLocations:(NSArray<CLLocation *> * _Nonnull)locations profileIdentifier:(MBDirectionsProfileIdentifier _Nullable)profileIdentifier;
/// Initializes a route options object for routes between the given geographic coordinates and an optional profile identifier.
/// \param coordinates An array of geographic coordinates representing locations that the route should visit in chronological order. The array should contain at least two locations (the source and destination) and at most 25 locations. Each coordinate is converted into a <code>Waypoint</code> object.
///
/// \param profileIdentifier A string specifying the primary mode of transportation for the routes. This parameter, if set, should be set to <code>MBDirectionsProfileIdentifierAutomobile</code>, <code>MBDirectionsProfileIdentifierAutomobileAvoidingTraffic</code>, <code>MBDirectionsProfileIdentifierCycling</code>, or <code>MBDirectionsProfileIdentifierWalking</code>. <code>MBDirectionsProfileIdentifierAutomobile</code> is used by default.
///
- (nonnull instancetype)initWithCoordinates:(NSArray<NSValue *> * _Nonnull)coordinates profileIdentifier:(MBDirectionsProfileIdentifier _Nullable)profileIdentifier;
/// Initializes a route options object for routes between the given waypoints and an optional profile identifier.
/// \param waypoints An array of <code>Waypoint</code> objects representing locations that the route should visit in chronological order. The array should contain at least two waypoints (the source and destination) and at most 25 waypoints. (Some profiles, such as <code>MBDirectionsProfileIdentifierAutomobileAvoidingTraffic</code>, <a href="https://www.mapbox.com/api-documentation/#directions">may have lower limits</a>.)
///
/// \param profileIdentifier A string specifying the primary mode of transportation for the routes. This parameter, if set, should be set to <code>MBDirectionsProfileIdentifierAutomobile</code>, <code>MBDirectionsProfileIdentifierAutomobileAvoidingTraffic</code>, <code>MBDirectionsProfileIdentifierCycling</code>, or <code>MBDirectionsProfileIdentifierWalking</code>. <code>MBDirectionsProfileIdentifierAutomobile</code> is used by default.
///
- (nonnull instancetype)initWithWaypoints:(NSArray<MBWaypoint *> * _Nonnull)waypoints profileIdentifier:(MBDirectionsProfileIdentifier _Nullable)profileIdentifier OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
/// A Boolean value that indicates whether a returned route may require a point U-turn at an intermediate waypoint.
/// If the value of this property is <code>true</code>, a returned route may require an immediate U-turn at an intermediate waypoint. At an intermediate waypoint, if the value of this property is <code>false</code>, each returned route may continue straight ahead or turn to either side but may not U-turn. This property has no effect if only two waypoints are specified.
/// Set this property to <code>true</code> if you expect the user to traverse each leg of the trip separately. For example, it would be quite easy for the user to effectively “U-turn” at a waypoint if the user first parks the car and patronizes a restaurant there before embarking on the next leg of the trip. Set this property to <code>false</code> if you expect the user to proceed to the next waypoint immediately upon arrival. For example, if the user only needs to drop off a passenger or package at the waypoint before continuing, it would be inconvenient to perform a U-turn at that location.
/// The default value of this property is <code>false</code> when the profile identifier is <code>MBDirectionsProfileIdentifierAutomobile</code> or <code>MBDirectionsProfileIdentifierAutomobileAvoidingTraffic</code> and <code>true</code> otherwise.
@property (nonatomic) BOOL allowsUTurnAtWaypoint;
/// A Boolean value indicating whether alternative routes should be included in the response.
/// If the value of this property is <code>false</code>, the server only calculates a single route that visits each of the waypoints. If the value of this property is <code>true</code>, the server attempts to find additional reasonable routes that visit the waypoints. Regardless, multiple routes are only returned if it is possible to visit the waypoints by a different route without significantly increasing the distance or travel time. The alternative routes may partially overlap with the preferred route, especially if intermediate waypoints are specified.
/// Alternative routes may take longer to calculate and make the response significantly larger, so only request alternative routes if you intend to display them to the user or let the user choose them over the preferred route. For example, do not request alternative routes if you only want to know the distance or estimated travel time to a destination.
/// The default value of this property is <code>false</code>.
@property (nonatomic) BOOL includesAlternativeRoutes;
/// A Boolean value indicating whether the route includes a <code>ManeuverType.exitRoundabout</code> or <code>ManeuverType.exitRotary</code> step when traversing a roundabout or rotary, respectively.
/// If this option is set to <code>true</code>, a route that traverses a roundabout includes both a <code>ManeuverType.takeRoundabout</code> step and a <code>ManeuverType.exitRoundabout</code> step; likewise, a route that traverses a large, named roundabout includes both a <code>ManeuverType.takeRotary</code> step and a <code>ManeuverType.exitRotary</code> step. Otherwise, it only includes a <code>ManeuverType.takeRoundabout</code> or <code>ManeuverType.takeRotary</code> step. This option is set to <code>false</code> by default.
@property (nonatomic) BOOL includesExitRoundaboutManeuver;
/// The route classes that the calculated routes will avoid.
/// Currently, you can only specify a single road class to avoid.
@property (nonatomic) MBRoadClasses roadClassesToAvoid;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL supportsSecureCoding;)
+ (BOOL)supportsSecureCoding SWIFT_WARN_UNUSED_RESULT;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEqualToRouteOptions:(MBRouteOptions * _Nullable)routeOptions SWIFT_WARN_UNUSED_RESULT;
@end


/// A <code>RouteOptionsV4</code> object is a structure that specifies the criteria for results returned by the Mapbox Directions API v4.
/// Pass an instance of this class into the <code>Directions.calculate(_:completionHandler:)</code> method.
SWIFT_CLASS_NAMED("RouteOptionsV4")
@interface MBRouteOptionsV4 : MBRouteOptions
/// The format of the returned route steps’ instructions.
/// By default, the value of this property is <code>text</code>, specifying plain text instructions.
@property (nonatomic) enum MBInstructionFormat instructionFormat;
/// A Boolean value indicating whether the returned routes and their route steps should include any geographic coordinate data.
/// If the value of this property is <code>true</code>, the returned routes and their route steps include coordinates; if the value of this property is `false, they do not.
/// The default value of this property is <code>true</code>.
@property (nonatomic) BOOL includesShapes;
- (nonnull instancetype)initWithWaypoints:(NSArray<MBWaypoint *> * _Nonnull)waypoints profileIdentifier:(MBDirectionsProfileIdentifier _Nullable)profileIdentifier OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
@end

/// A <code>RouteShapeFormat</code> indicates the format of a route or match shape in the raw HTTP response.
typedef SWIFT_ENUM_NAMED(NSUInteger, MBRouteShapeFormat, "RouteShapeFormat", closed) {
/// The route’s shape is delivered in <a href="http://geojson.org/">GeoJSON</a> format.
/// This standard format is human-readable and can be parsed straightforwardly, but it is far more verbose than <code>polyline</code>.
  MBRouteShapeFormatGeoJSON = 0,
/// The route’s shape is delivered in <a href="https://developers.google.com/maps/documentation/utilities/polylinealgorithm">encoded polyline algorithm</a> format with 1×10<sup>−5</sup> precision.
/// This machine-readable format is considerably more compact than <code>geoJSON</code> but less precise than <code>polyline6</code>.
  MBRouteShapeFormatPolyline = 1,
/// The route’s shape is delivered in <a href="https://developers.google.com/maps/documentation/utilities/polylinealgorithm">encoded polyline algorithm</a> format with 1×10<sup>−6</sup> precision.
/// This format is an order of magnitude more precise than <code>polyline</code>.
  MBRouteShapeFormatPolyline6 = 2,
};

/// A <code>RouteShapeResolution</code> indicates the level of detail in a route’s shape, or whether the shape is present at all.
typedef SWIFT_ENUM_NAMED(NSUInteger, MBRouteShapeResolution, "RouteShapeResolution", closed) {
/// The route’s shape is omitted.
/// Specify this resolution if you do not intend to show the route line to the user or analyze the route line in any way.
  MBRouteShapeResolutionNone = 0,
/// The route’s shape is simplified.
/// This resolution considerably reduces the size of the response. The resulting shape is suitable for display at a low zoom level, but it lacks the detail necessary for focusing on individual segments of the route.
  MBRouteShapeResolutionLow = 1,
/// The route’s shape is as detailed as possible.
/// The resulting shape is equivalent to concatenating the shapes of all the route’s consitituent steps. You can focus on individual segments of this route while faithfully representing the path of the route. If you only intend to show a route overview and do not need to analyze the route line in any way, consider specifying <code>low</code> instead to considerably reduce the size of the response.
  MBRouteShapeResolutionFull = 2,
};

@class MBSpokenInstruction;
@class MBVisualInstruction;
enum MBTransportType : NSInteger;

/// A <code>RouteStep</code> object represents a single distinct maneuver along a route and the approach to the next maneuver. The route step object corresponds to a single instruction the user must follow to complete a portion of the route. For example, a step might require the user to turn then follow a road.
/// You do not create instances of this class directly. Instead, you receive route step objects as part of route objects when you request directions using the <code>Directions.calculate(_:completionHandler:)</code> method, setting the <code>includesSteps</code> option to <code>true</code> in the <code>RouteOptions</code> object that you pass into that method.
SWIFT_CLASS_NAMED("RouteStep")
@interface MBRouteStep : NSObject <NSSecureCoding>
/// Initializes a new route step object with the given JSON dictionary representation.
/// Normally, you do not create instances of this class directly. Instead, you receive route step objects as part of route objects when you request directions using the <code>Directions.calculateDirections(options:completionHandler:)</code> method, setting the <code>includesSteps</code> option to <code>true</code> in the <code>RouteOptions</code> object that you pass into that method.
/// \param json A JSON dictionary representation of a route step object as returnd by the Mapbox Directions API.
///
- (nonnull instancetype)initWithJson:(NSDictionary<NSString *, id> * _Nonnull)json;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL supportsSecureCoding;)
+ (BOOL)supportsSecureCoding SWIFT_WARN_UNUSED_RESULT;
+ (void)setSupportsSecureCoding:(BOOL)value;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
/// An array of geographic coordinates defining the path of the route step from the location of the maneuver to the location of the next step’s maneuver.
/// The value of this property may be <code>nil</code>, for example when the maneuver type is <code>arrive</code>.
/// Using the <a href="https://www.mapbox.com/ios-sdk/">Mapbox Maps SDK for iOS</a> or <a href="https://github.com/mapbox/mapbox-gl-native/tree/master/platform/macos/">Mapbox Maps SDK for macOS</a>, you can create an <code>MGLPolyline</code> object using these coordinates to display a portion of a route on an <code>MGLMapView</code>.
@property (nonatomic, readonly, copy) NSArray<NSValue *> * _Nullable coordinates;
/// The number of coordinates.
/// The value of this property may be zero, for example when the maneuver type is <code>arrive</code>.
/// note:
/// This initializer is intended for Objective-C usage. In Swift code, use the <code>coordinates.count</code> property.
@property (nonatomic, readonly) NSUInteger coordinateCount;
/// Retrieves the coordinates.
/// The array may be empty, for example when the maneuver type is <code>arrive</code>.
/// Using the <a href="https://www.mapbox.com/ios-sdk/">Mapbox Maps SDK for iOS</a> or <a href="https://github.com/mapbox/mapbox-gl-native/tree/master/platform/macos/">Mapbox Maps SDK for macOS</a>, you can create an <code>MGLPolyline</code> object using these coordinates to display a portion of a route on an <code>MGLMapView</code>.
/// precondition:
/// <code>coordinates</code> must be large enough to hold <code>coordinateCount</code> instances of <code>CLLocationCoordinate2D</code>.
/// note:
/// This initializer is intended for Objective-C usage. In Swift code, use the <code>coordinates</code> property.
/// \param coordinates A pointer to a C array of <code>CLLocationCoordinate2D</code> instances. On output, this array contains all the vertices of the overlay.
///
///
/// returns:
/// True if the step has coordinates and <code>coordinates</code> has been populated, or false if the step has no coordinates and <code>coordinates</code> has not been modified.
- (BOOL)getCoordinates:(CLLocationCoordinate2D * _Nonnull)coordinates SWIFT_WARN_UNUSED_RESULT;
/// A string with instructions explaining how to perform the step’s maneuver.
/// You can display this string or read it aloud to the user. The string does not include the distance to or from the maneuver. For instructions optimized for real-time delivery during turn-by-turn navigation, set the <code>RouteOptions.includesSpokenInstructions</code> option and use the <code>instructionsSpokenAlongStep</code> property. If you need customized instructions, you can construct them yourself from the step’s other properties or use <a href="https://github.com/Project-OSRM/osrm-text-instructions.swift/">OSRM Text Instructions</a>.
/// note:
/// If you use MapboxDirections.swift with the Mapbox Directions API, this property is formatted and localized for display to the user. If you use OSRM directly, this property contains a basic string that only includes the maneuver type and direction. Use <a href="https://github.com/Project-OSRM/osrm-text-instructions.swift/">OSRM Text Instructions</a> to construct a complete, localized instruction string for display.
@property (nonatomic, readonly, copy) NSString * _Nonnull instructions;
/// Instructions about the next step’s maneuver, optimized for speech synthesis.
/// As the user traverses this step, you can give them advance notice of the upcoming maneuver by reading aloud each item in this array in order as the user reaches the specified distances along this step. The text of the spoken instructions refers to the details in the next step, but the distances are measured from the beginning of this step.
/// This property is non-<code>nil</code> if the <code>RouteOptions.includesSpokenInstructions</code> option is set to <code>true</code>. For instructions designed for display, use the <code>instructions</code> property.
@property (nonatomic, readonly, copy) NSArray<MBSpokenInstruction *> * _Nullable instructionsSpokenAlongStep;
/// :nodoc:
/// Instructions about the next step’s maneuver, optimized for display in real time.
/// As the user traverses this step, you can give them advance notice of the upcoming maneuver by displaying each item in this array in order as the user reaches the specified distances along this step. The text and images of the visual instructions refer to the details in the next step, but the distances are measured from the beginning of this step.
/// This property is non-<code>nil</code> if the <code>RouteOptions.includesVisualInstructions</code> option is set to <code>true</code>. For instructions designed for speech synthesis, use the <code>instructionsSpokenAlongStep</code> property. For instructions designed for display in a static list, use the <code>instructions</code> property.
@property (nonatomic, readonly, copy) NSArray<MBVisualInstruction *> * _Nullable instructionsDisplayedAlongStep;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// The type of maneuver required for beginning this step.
@property (nonatomic, readonly) enum MBManeuverType maneuverType;
/// Additional directional information to clarify the maneuver type.
@property (nonatomic, readonly) enum MBManeuverDirection maneuverDirection;
/// The location of the maneuver at the beginning of this step.
@property (nonatomic, readonly) CLLocationCoordinate2D maneuverLocation;
/// Any <a href="https://en.wikipedia.org/wiki/Exit_number">exit numbers</a> assigned to the highway exit at the maneuver.
/// This property is only set when the <code>maneuverType</code> is <code>ManeuverType.takeOffRamp</code>. For the number of exits from the previous maneuver, regardless of the highway’s exit numbering scheme, use the <code>exitIndex</code> property. For the route reference codes associated with the connecting road, use the <code>destinationCodes</code> property. For the names associated with a roundabout exit, use the <code>exitNames</code> property.
/// An exit number is an alphanumeric identifier posted at or ahead of a highway off-ramp. Exit numbers may increase or decrease sequentially along a road, or they may correspond to distances from either end of the road. An alphabetic suffix may appear when multiple exits are located in the same interchange. If multiple exits are <a href="https://en.wikipedia.org/wiki/Local-express_lanes#Example_of_cloverleaf_interchanges">combined into a single exit</a>, the step may have multiple exit codes.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable exitCodes;
/// The names of the roundabout exit.
/// This property is only set for roundabout (traffic circle or rotary) maneuvers. For the signposted names associated with a highway exit, use the <code>destinations</code> property. For the signposted exit numbers, use the <code>exitCodes</code> property.
/// If you display a name to the user, you may need to abbreviate common words like “East” or “Boulevard” to ensure that it fits in the allotted space.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable exitNames;
/// A phonetic or phonemic transcription indicating how to pronounce the names in the <code>exitNames</code> property.
/// This property is only set for roundabout (traffic circle or rotary) maneuvers.
/// The transcription is written in the <a href="https://en.wikipedia.org/wiki/International_Phonetic_Alphabet">International Phonetic Alphabet</a>.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable phoneticExitNames;
/// The step’s distance, measured in meters.
/// The value of this property accounts for the distance that the user must travel to go from this step’s maneuver location to the next step’s maneuver location. It is not the sum of the direct distances between the route’s waypoints, nor should you assume that the user would travel along this distance at a fixed speed.
@property (nonatomic, readonly) CLLocationDistance distance;
/// The step’s expected travel time, measured in seconds.
/// The value of this property reflects the time it takes to go from this step’s maneuver location to the next step’s maneuver location. If the route was calculated using the <code>MBDirectionsProfileIdentifierAutomobileAvoidingTraffic</code> profile, this property reflects current traffic conditions at the time of the request, not necessarily the traffic conditions at the time the user would begin this step. For other profiles, this property reflects travel time under ideal conditions and does not account for traffic congestion. If the step makes use of a ferry or train, the actual travel time may additionally be subject to the schedules of those services.
/// Do not assume that the user would travel along the step at a fixed speed. For the expected travel time on each individual segment along the leg, specify the <code>AttributeOptions.expectedTravelTime</code> option and use the <code>RouteLeg.expectedSegmentTravelTimes</code> property.
@property (nonatomic, readonly) NSTimeInterval expectedTravelTime;
/// The names of the road or path leading from this step’s maneuver to the next step’s maneuver.
/// If the maneuver is a turning maneuver, the step’s names are the name of the road or path onto which the user turns. If you display a name to the user, you may need to abbreviate common words like “East” or “Boulevard” to ensure that it fits in the allotted space.
/// If the maneuver is a roundabout maneuver, the outlet to take is named in the <code>exitNames</code> property; the <code>names</code> property is only set for large roundabouts that have their own names.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable names;
/// A phonetic or phonemic transcription indicating how to pronounce the names in the <code>names</code> property.
/// The transcription is written in the <a href="https://en.wikipedia.org/wiki/International_Phonetic_Alphabet">International Phonetic Alphabet</a>.
/// If the maneuver traverses a large, named roundabout, the <code>exitPronunciationHints</code> property contains a hint about how to pronounce the names of the outlet to take.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable phoneticNames;
/// Any route reference codes assigned to the road or path leading from this step’s maneuver to the next step’s maneuver.
/// A route reference code commonly consists of an alphabetic network code, a space or hyphen, and a route number. You should not assume that the network code is globally unique: for example, a network code of “NH” may indicate a “National Highway” or “New Hampshire”. Moreover, a route number may not even uniquely identify a route within a given network.
/// If a highway ramp is part of a numbered route, its reference code is contained in this property. On the other hand, guide signage for a highway ramp usually indicates route reference codes of the adjoining road; use the <code>destinationCodes</code> property for those route reference codes.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable codes;
/// The mode of transportation used for the step.
/// This step may use a different mode of transportation than the overall route.
@property (nonatomic, readonly) enum MBTransportType transportType;
/// Any route reference codes that appear on guide signage for the road leading from this step’s maneuver to the next step’s maneuver.
/// This property is typically available in steps leading to or from a freeway or expressway. This property contains route reference codes associated with a road later in the route. If a highway ramp is itself part of a numbered route, its reference code is contained in the <code>codes</code> property. For the signposted exit numbers associated with a highway exit, use the <code>exitCodes</code> property.
/// A route reference code commonly consists of an alphabetic network code, a space or hyphen, and a route number. You should not assume that the network code is globally unique: for example, a network code of “NH” may indicate a “National Highway” or “New Hampshire”. Moreover, a route number may not even uniquely identify a route within a given network. A destination code for a divided road is often suffixed with the cardinal direction of travel, for example “I 80 East”.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable destinationCodes;
/// Destinations, such as <a href="https://en.wikipedia.org/wiki/Control_city">control cities</a>, that appear on guide signage for the road leading from this step’s maneuver to the next step’s maneuver.
/// This property is typically available in steps leading to or from a freeway or expressway.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable destinations;
/// An array of intersections along the step.
/// Each item in the array corresponds to a cross street, starting with the intersection at the maneuver location indicated by the coordinates property and continuing with each cross street along the step.
@property (nonatomic, readonly, copy) NSArray<MBIntersection *> * _Nullable intersections;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// An instruction about an upcoming <code>RouteStep</code>’s maneuver, optimized for speech synthesis.
/// The instruction is provided in two formats: plain text and text marked up according to the <a href="https://en.wikipedia.org/wiki/Speech_Synthesis_Markup_Language">Speech Synthesis Markup Language</a> (SSML). Use a speech synthesizer such as <code>AVSpeechSynthesizer</code> or Amazon Polly to read aloud the instruction.
/// The <code>distanceAlongStep</code> property is measured from the beginning of the step associated with this object. By contrast, the <code>text</code> and <code>ssmlText</code> properties refer to the details in the following step. It is also possible for the instruction to refer to two following steps simultaneously when needed for safe navigation.
SWIFT_CLASS_NAMED("SpokenInstruction")
@interface MBSpokenInstruction : NSObject <NSSecureCoding>
/// A distance along the associated <code>RouteStep</code> at which to read the instruction aloud.
/// The distance is measured in meters from the beginning of the associated step.
@property (nonatomic, readonly) CLLocationDistance distanceAlongStep;
/// A plain-text representation of the speech-optimized instruction.
/// This representation is appropriate for speech synthesizers that lack support for the <a href="https://en.wikipedia.org/wiki/Speech_Synthesis_Markup_Language">Speech Synthesis Markup Language</a> (SSML), such as <code>AVSpeechSynthesizer</code>. For speech synthesizers that support SSML, use the <code>ssmlText</code> property instead.
@property (nonatomic, readonly, copy) NSString * _Nonnull text;
/// A formatted representation of the speech-optimized instruction.
/// This representation is appropriate for speech synthesizers that support the <a href="https://en.wikipedia.org/wiki/Speech_Synthesis_Markup_Language">Speech Synthesis Markup Language</a> (SSML), such as <a href="https://aws.amazon.com/polly/">Amazon Polly</a>. Numbers and names are marked up to ensure correct pronunciation. For speech synthesizers that lack SSML support, use the <code>text</code> property instead.
@property (nonatomic, readonly, copy) NSString * _Nonnull ssmlText;
/// Initialize a <code>SpokenInstruction</code> from a dictionary.
- (nonnull instancetype)initWithJson:(NSDictionary<NSString *, id> * _Nonnull)json;
/// Initialize a <code>SpokenInstruction</code>.
/// \param distanceAlongStep A distance along the associated <code>RouteStep</code> at which to read the instruction aloud.
///
/// \param text A plain-text representation of the speech-optimized instruction.
///
/// \param ssmlText A formatted representation of the speech-optimized instruction.
///
- (nonnull instancetype)initWithDistanceAlongStep:(CLLocationDistance)distanceAlongStep text:(NSString * _Nonnull)text ssmlText:(NSString * _Nonnull)ssmlText OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL supportsSecureCoding;)
+ (BOOL)supportsSecureCoding SWIFT_WARN_UNUSED_RESULT;
+ (void)setSupportsSecureCoding:(BOOL)value;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

@class CLHeading;

/// A <code>Waypoint</code> object indicates a location along a route. It may be the route’s origin or destination, or it may be another location that the route visits. A waypoint object indicates the location’s geographic location along with other optional information, such as a name or the user’s direction approaching the waypoint. You create a <code>RouteOptions</code> object using waypoint objects and also receive waypoint objects in the completion handler of the <code>Directions.calculate(_:completionHandler:)</code> method.
SWIFT_CLASS_NAMED("Waypoint")
@interface MBWaypoint : NSObject <NSCopying, NSSecureCoding>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL supportsSecureCoding;)
+ (BOOL)supportsSecureCoding SWIFT_WARN_UNUSED_RESULT;
/// Initializes a new waypoint object with the given geographic coordinate and an optional accuracy and name.
/// \param coordinate The geographic coordinate of the waypoint.
///
/// \param coordinateAccuracy The maximum distance away from the waypoint that the route may come and still be considered viable. This parameter is measured in meters. A negative value means the route may be an indefinite number of meters away from the route and still be considered viable.
/// It is recommended that the value of this parameter be greater than the <code>horizontalAccuracy</code> property of a <code>CLLocation</code> object obtained from a <code>CLLocationManager</code> object. There is a high likelihood that the user may be located some distance away from a navigable road, for instance if the user is currently on a driveway or inside a building.
///
/// \param name The name of the waypoint. This parameter does not affect the route but may help you to distinguish one waypoint from another.
///
- (nonnull instancetype)initWithCoordinate:(CLLocationCoordinate2D)coordinate coordinateAccuracy:(CLLocationAccuracy)coordinateAccuracy name:(NSString * _Nullable)name OBJC_DESIGNATED_INITIALIZER;
/// Initializes a new waypoint object with the given <code>CLLocation</code> object and an optional <code>CLHeading</code> object and name.
/// note:
/// This initializer is intended for <code>CLLocation</code> objects created using the <code>CLLocation.init(latitude:longitude:)</code> initializer. If you intend to use a <code>CLLocation</code> object obtained from a <code>CLLocationManager</code> object, consider increasing the <code>horizontalAccuracy</code> or set it to a negative value to avoid overfitting, since the <code>Waypoint</code> class’s <code>coordinateAccuracy</code> property represents the maximum allowed deviation from the waypoint. There is a high likelihood that the user may be located some distance away from a navigable road, for instance if the user is currently on a driveway of inside a building.
/// \param location A <code>CLLocation</code> object representing the waypoint’s location. This initializer respects the <code>CLLocation</code> class’s <code>coordinate</code> and <code>horizontalAccuracy</code> properties, converting them into the <code>coordinate</code> and <code>coordinateAccuracy</code> properties, respectively.
///
/// \param heading A <code>CLHeading</code> object representing the direction from which the route must approach the waypoint in order to be considered viable. This initializer respects the <code>CLHeading</code> class’s <code>trueHeading</code> property or <code>magneticHeading</code> property, converting it into the <code>headingAccuracy</code> property.
///
/// \param name The name of the waypoint. This parameter does not affect the route but may help you to distinguish one waypoint from another.
///
- (nonnull instancetype)initWithLocation:(CLLocation * _Nonnull)location heading:(CLHeading * _Nullable)heading name:(NSString * _Nullable)name OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
/// The geographic coordinate of the waypoint.
@property (nonatomic, readonly) CLLocationCoordinate2D coordinate;
/// The radius of uncertainty for the waypoint, measured in meters.
/// For a route to be considered viable, it must enter this waypoint’s circle of uncertainty. The <code>coordinate</code> property identifies the center of the circle, while this property indicates the circle’s radius. If the value of this property is negative, a route is considered viable regardless of whether it enters this waypoint’s circle of uncertainty, subject to an undefined maximum distance.
/// By default, the value of this property is a negative number.
@property (nonatomic) CLLocationAccuracy coordinateAccuracy;
/// The direction from which a route must approach this waypoint in order to be considered viable.
/// This property is measured in degrees clockwise from true north. A value of 0 degrees means due north, 90 degrees means due east, 180 degrees means due south, and so on. If the value of this property is negative, a route is considered viable regardless of the direction from which it approaches this waypoint.
/// If this waypoint is the first waypoint (the source waypoint), the route must start out by heading in the direction specified by this property. You should always set the <code>headingAccuracy</code> property in conjunction with this property. If the <code>headingAccuracy</code> property is set to a negative value, this property is ignored.
/// For driving directions, this property can be useful for avoiding a route that begins by going in the direction opposite the current direction of travel. For example, if you know the user is moving eastwardly and the first waypoint is the user’s current location, specifying a heading of 90 degrees and a heading accuracy of 90 degrees for the first waypoint avoids a route that begins with a “head west” instruction.
/// You should be certain that the user is in motion before specifying a heading and heading accuracy; otherwise, you may be unnecessarily filtering out the best route. For example, suppose the user is sitting in a car parked in a driveway, facing due north, with the garage in front and the street to the rear. In that case, specifying a heading of 0 degrees and a heading accuracy of 90 degrees may result in a route that begins on the back alley or, worse, no route at all. For this reason, it is recommended that you only specify a heading and heading accuracy when automatically recalculating directions due to the user deviating from the route.
/// By default, the value of this property is a negative number, meaning that a route is considered viable regardless of the direction of approach.
@property (nonatomic) CLLocationDirection heading;
/// The maximum amount, in degrees, by which a route’s approach to a waypoint may differ from <code>heading</code> in either direction in order to be considered viable.
/// A value of 0 degrees means that the approach must match the specified <code>heading</code> exactly – an unlikely scenario. A value of 180 degrees or more means that the approach may be as much as 180 degrees in either direction from the specified <code>heading</code>, effectively allowing a candidate route to approach the waypoint from any direction.
/// If you set the <code>heading</code> property, you should set this property to a value such as 90 degrees, to avoid filtering out routes whose approaches differ only slightly from the specified <code>heading</code>. Otherwise, if the <code>heading</code> property is set to a negative value, this property is ignored.
/// By default, the value of this property is a negative number, meaning that a route is considered viable regardless of the direction of approach.
@property (nonatomic) CLLocationDirection headingAccuracy;
/// The name of the waypoint.
/// This parameter does not affect the route, but you can set the name of a waypoint you pass into a <code>RouteOptions</code> object to help you distinguish one waypoint from another in the array of waypoints passed into the completion handler of the <code>Directions.calculate(_:completionHandler:)</code> method.
@property (nonatomic, copy) NSString * _Nullable name;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// A <code>Tracepoint</code> represents a location matched to the road network.
SWIFT_CLASS_NAMED("Tracepoint")
@interface MBTracepoint : MBWaypoint
/// Number of probable alternative matchings for this tracepoint. A value of zero indicates that this point was matched unambiguously.
@property (nonatomic) NSInteger alternateCount;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL supportsSecureCoding;)
+ (BOOL)supportsSecureCoding SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithCoordinate:(CLLocationCoordinate2D)coordinate coordinateAccuracy:(CLLocationAccuracy)coordinateAccuracy name:(NSString * _Nullable)name SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithLocation:(CLLocation * _Nonnull)location heading:(CLHeading * _Nullable)heading name:(NSString * _Nullable)name SWIFT_UNAVAILABLE;
@end

/// A <code>TransportType</code> specifies the mode of transportation used for part of a route.
typedef SWIFT_ENUM_NAMED(NSInteger, MBTransportType, "TransportType", closed) {
/// The step does not have a particular transport type associated with it.
/// This transport type is used as a workaround for bridging to Objective-C which does not support nullable enumeration-typed values.
  MBTransportTypeNone = 0,
/// The route requires the user to drive or ride a car, truck, or motorcycle.
/// This is the usual transport type when the <code>profileIdentifier</code> is <code>MBDirectionsProfileIdentifierAutomobile</code> or <code>MBDirectionsProfileIdentifierAutomobileAvoidingTraffic</code>.
  MBTransportTypeAutomobile = 1,
/// The route requires the user to board a ferry.
/// The user should verify that the ferry is in operation. For driving and cycling directions, the user should also verify that his or her vehicle is permitted onboard the ferry.
  MBTransportTypeFerry = 2,
/// The route requires the user to cross a movable bridge.
/// The user may need to wait for the movable bridge to become passable before continuing.
  MBTransportTypeMovableBridge = 3,
/// The route becomes impassable at this point.
/// You should not encounter this transport type under normal circumstances.
  MBTransportTypeInaccessible = 4,
/// The route requires the user to walk.
/// This is the usual transport type when the <code>profileIdentifier</code> is <code>MBDirectionsProfileIdentifierWalking</code>. For cycling directions, this value indicates that the user is expected to dismount.
  MBTransportTypeWalking = 5,
/// The route requires the user to ride a bicycle.
/// This is the usual transport type when the <code>profileIdentifier</code> is <code>MBDirectionsProfileIdentifierCycling</code>.
  MBTransportTypeCycling = 6,
/// The route requires the user to board a train.
/// The user should consult the train’s timetable. For cycling directions, the user should also verify that bicycles are permitted onboard the train.
  MBTransportTypeTrain = 7,
};

@class MBVisualInstructionComponent;

/// :nodoc:
/// Encompasses all information necessary for creating a visual cue about a given <code>RouteStep</code>.
SWIFT_CLASS_NAMED("VisualInstruction")
@interface MBVisualInstruction : NSObject <NSSecureCoding>
/// :nodoc:
/// Distance in meters from the beginning of the step at which the visual instruction should be visible.
@property (nonatomic, readonly) CLLocationDistance distanceAlongStep;
/// :nodoc:
/// A plain text representation of <code>primaryTextComponents</code>.
@property (nonatomic, readonly, copy) NSString * _Nonnull primaryText;
/// :nodoc:
/// Most important visual content to convey to the user about the <code>RouteStep</code>.
/// This is the structured representation of <code>primaryText</code>.
@property (nonatomic, readonly, copy) NSArray<MBVisualInstructionComponent *> * _Nonnull primaryTextComponents;
/// :nodoc:
/// A plain text representation of <code>secondaryTextComponents</code>.
@property (nonatomic, readonly, copy) NSString * _Nullable secondaryText;
/// :nodoc:
/// Ancillary visual information about the <code>RouteStep</code>.
/// This is the structured representation of <code>secondaryText</code>.
@property (nonatomic, readonly, copy) NSArray<MBVisualInstructionComponent *> * _Nullable secondaryTextComponents;
/// :nodoc:
/// Indicates what side of a bidirectional road the driver must be driving on. Also referred to as the rule of the road.
@property (nonatomic) enum MBDrivingSide drivingSide;
/// :nodoc:
/// Initialize a <code>VisualInstruction</code> from a dictionary given a <code>DrivingSide</code>.
- (nonnull instancetype)initWithJson:(NSDictionary<NSString *, id> * _Nonnull)json drivingSide:(enum MBDrivingSide)drivingSide;
/// :nodoc:
/// Initialize a <code>VisualInstruction</code>.
- (nonnull instancetype)initWithDistanceAlongStep:(CLLocationDistance)distanceAlongStep primaryText:(NSString * _Nonnull)primaryText primaryTextComponents:(NSArray<MBVisualInstructionComponent *> * _Nonnull)primaryTextComponents secondaryText:(NSString * _Nullable)secondaryText secondaryTextComponents:(NSArray<MBVisualInstructionComponent *> * _Nullable)secondaryTextComponents drivingSide:(enum MBDrivingSide)drivingSide OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL supportsSecureCoding;)
+ (BOOL)supportsSecureCoding SWIFT_WARN_UNUSED_RESULT;
+ (void)setSupportsSecureCoding:(BOOL)value;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

enum MBVisualInstructionComponentType : NSInteger;

/// :nodoc:
/// A component of a <code>VisualInstruction</code> that represents a single run of similarly formatted text or an image with a textual fallback representation.
SWIFT_CLASS_NAMED("VisualInstructionComponent")
@interface MBVisualInstructionComponent : NSObject <NSSecureCoding>
/// :nodoc:
/// The plain text representation of this component.
/// Use this property if <code>imageURLs</code> is an empty dictionary or if the URLs contained in that property are not yet available.
@property (nonatomic, readonly, copy) NSString * _Nullable text;
/// :nodoc:
/// The URL to an image representation of this component.
/// The URL refers to an image that uses the device’s native screen scale.
@property (nonatomic, copy) NSURL * _Nullable imageURL;
/// :nodoc:
/// The type of visual instruction component. You can display the component differently depending on its type.
@property (nonatomic) enum MBVisualInstructionComponentType type;
/// :nodoc:
/// The maneuver type for the <code>VisualInstruction</code>.
@property (nonatomic) enum MBManeuverType maneuverType;
/// :nodoc:
/// The modifier type for the <code>VisualInstruction</code>.
@property (nonatomic) enum MBManeuverDirection maneuverDirection;
/// An abbreviated version of the text for a given component.
@property (nonatomic, copy) NSString * _Nullable abbreviation;
/// The priority in which the component should be abbreviated. Lower numbers should be abbreviated first.
@property (nonatomic) NSInteger abbreviationPriority;
/// :nodoc:
/// Initialize A <code>VisualInstructionComponent</code>.
- (nonnull instancetype)initWithManeuverType:(enum MBManeuverType)maneuverType maneuverDirection:(enum MBManeuverDirection)maneuverDirection json:(NSDictionary<NSString *, id> * _Nonnull)json;
/// :nodoc:
/// Initialize A <code>VisualInstructionComponent</code>.
- (nonnull instancetype)initWithType:(enum MBVisualInstructionComponentType)type text:(NSString * _Nullable)text imageURL:(NSURL * _Nullable)imageURL maneuverType:(enum MBManeuverType)maneuverType maneuverDirection:(enum MBManeuverDirection)maneuverDirection abbreviation:(NSString * _Nullable)abbreviation abbreviationPriority:(NSInteger)abbreviationPriority OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL supportsSecureCoding;)
+ (BOOL)supportsSecureCoding SWIFT_WARN_UNUSED_RESULT;
+ (void)setSupportsSecureCoding:(BOOL)value;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

/// <code>VisualInstructionComponentType</code> describes the type of <code>VisualInstructionComponent</code>.
typedef SWIFT_ENUM_NAMED(NSInteger, MBVisualInstructionComponentType, "VisualInstructionComponentType", closed) {
/// The component separates two other destination components.
/// If the two adjacent components are both displayed as images, you can hide this delimiter component.
  MBVisualInstructionComponentTypeDelimiter = 0,
/// The component bears the name of a place or street.
  MBVisualInstructionComponentTypeText = 1,
/// Component contains an image that should be rendered.
  MBVisualInstructionComponentTypeImage = 2,
/// The compoment contains the localized word for “exit”.
/// This component may appear before or after an <code>.exitNumber</code> component, depending on the language.
  MBVisualInstructionComponentTypeExit = 3,
/// A component contains an exit number.
  MBVisualInstructionComponentTypeExitCode = 4,
};




#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#elif defined(__ARM_ARCH_7A__) && __ARM_ARCH_7A__
// Generated by Apple Swift version 5.0.1 effective-4.1.50 (swiftlang-1001.0.82.4 clang-1001.0.46.5)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreLocation;
@import Foundation;
@import ObjectiveC;
#endif

#import <MapboxDirections/MapboxDirections.h>

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="MapboxDirections",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif



/// A <code>CongestionLevel</code> indicates the level of traffic congestion along a road segment relative to the normal flow of traffic along that segment. You can color-code a route line according to the congestion level along each segment of the route.
typedef SWIFT_ENUM_NAMED(NSInteger, MBCongestionLevel, "CongestionLevel", closed) {
/// There is not enough data to determine the level of congestion along the road segment.
  MBCongestionLevelUnknown = 0,
/// The road segment has little or no congestion. Traffic is flowing smoothly.
/// Low congestion levels are conventionally highlighted in green or not highlighted at all.
  MBCongestionLevelLow = 1,
/// The road segment has moderate, stop-and-go congestion. Traffic is flowing but speed is impeded.
/// Moderate congestion levels are conventionally highlighted in yellow.
  MBCongestionLevelModerate = 2,
/// The road segment has heavy, bumper-to-bumper congestion. Traffic is barely moving.
/// Heavy congestion levels are conventionally highlighted in orange.
  MBCongestionLevelHeavy = 3,
/// The road segment has severe congestion. Traffic may be completely stopped.
/// Severe congestion levels are conventionally highlighted in red.
  MBCongestionLevelSevere = 4,
};

@class MBRouteOptions;
@class MBWaypoint;
@class MBRoute;
@class NSError;
@class NSURLSessionDataTask;
@class MBMatchOptions;
@class MBMatch;
@class MBDirectionsOptions;

/// A <code>Directions</code> object provides you with optimal directions between different locations, or waypoints. The directions object passes your request to the <a href="https://www.mapbox.com/api-documentation/?language=Swift#directions">Mapbox Directions API</a> and returns the requested information to a closure (block) that you provide. A directions object can handle multiple simultaneous requests. A <code>RouteOptions</code> object specifies criteria for the results, such as intermediate waypoints, a mode of transportation, or the level of detail to be returned.
/// Each result produced by the directions object is stored in a <code>Route</code> object. Depending on the <code>RouteOptions</code> object you provide, each route may include detailed information suitable for turn-by-turn directions, or it may include only high-level information such as the distance, estimated travel time, and name of each leg of the trip. The waypoints that form the request may be conflated with nearby locations, as appropriate; the resulting waypoints are provided to the closure.
SWIFT_CLASS_NAMED("Directions")
@interface MBDirections : NSObject
/// The shared directions object.
/// To use this object, a Mapbox <a href="https://www.mapbox.com/help/define-access-token/">access token</a> should be specified in the <code>MGLMapboxAccessToken</code> key in the main application bundle’s Info.plist.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) MBDirections * _Nonnull sharedDirections;)
+ (MBDirections * _Nonnull)sharedDirections SWIFT_WARN_UNUSED_RESULT;
/// Initializes a newly created directions object with an optional access token and host.
/// \param accessToken A Mapbox <a href="https://www.mapbox.com/help/define-access-token/">access token</a>. If an access token is not specified when initializing the directions object, it should be specified in the <code>MGLMapboxAccessToken</code> key in the main application bundle’s Info.plist.
///
/// \param host An optional hostname to the server API. The <a href="https://www.mapbox.com/api-documentation/?language=Swift#directions">Mapbox Directions API</a> endpoint is used by default.
///
- (nonnull instancetype)initWithAccessToken:(NSString * _Nullable)accessToken host:(NSString * _Nullable)host OBJC_DESIGNATED_INITIALIZER;
/// Initializes a newly created directions object with an optional access token.
/// The directions object sends requests to the <a href="https://www.mapbox.com/api-documentation/?language=Swift#directions">Mapbox Directions API</a> endpoint.
/// \param accessToken A Mapbox <a href="https://www.mapbox.com/help/define-access-token/">access token</a>. If an access token is not specified when initializing the directions object, it should be specified in the <code>MGLMapboxAccessToken</code> key in the main application bundle’s Info.plist.
///
- (nonnull instancetype)initWithAccessToken:(NSString * _Nullable)accessToken;
/// Begins asynchronously calculating the route or routes using the given options and delivers the results to a closure.
/// This method retrieves the routes asynchronously over a network connection. If a connection error or server error occurs, details about the error are passed into the given completion handler in lieu of the routes.
/// Routes may be displayed atop a <a href="https://www.mapbox.com/maps/">Mapbox map</a>. They may be cached but may not be stored permanently. To use the results in other contexts or store them permanently, <a href="https://www.mapbox.com/directions/#pricing">upgrade to a Mapbox enterprise plan</a>.
/// \param options A <code>RouteOptions</code> object specifying the requirements for the resulting routes.
///
/// \param completionHandler The closure (block) to call with the resulting routes. This closure is executed on the application’s main thread.
///
///
/// returns:
/// The data task used to perform the HTTP request. If, while waiting for the completion handler to execute, you no longer want the resulting routes, cancel this task.
- (NSURLSessionDataTask * _Nonnull)calculateDirectionsWithOptions:(MBRouteOptions * _Nonnull)options completionHandler:(void (^ _Nonnull)(NSArray<MBWaypoint *> * _Nullable, NSArray<MBRoute *> * _Nullable, NSError * _Nullable))completionHandler;
/// Begins asynchronously calculating a match using the given options and delivers the results to a closure.
/// \param options A <code>MatchOptions</code> object specifying the requirements for the resulting match.
///
/// \param completionHandler The closure (block) to call with the resulting routes. This closure is executed on the application’s main thread.
///
///
/// returns:
/// The data task used to perform the HTTP request. If, while waiting for the completion handler to execute, you no longer want the resulting routes, cancel this task.
- (NSURLSessionDataTask * _Nonnull)calculateMatchesWithOptions:(MBMatchOptions * _Nonnull)options completionHandler:(void (^ _Nonnull)(NSArray<MBMatch *> * _Nullable, NSError * _Nullable))completionHandler;
- (NSURLSessionDataTask * _Nonnull)calculateRoutesMatchingOptions:(MBMatchOptions * _Nonnull)options completionHandler:(void (^ _Nonnull)(NSArray<MBWaypoint *> * _Nullable, NSArray<MBRoute *> * _Nullable, NSError * _Nullable))completionHandler;
/// The HTTP URL used to fetch the routes from the API.
/// After requesting the URL returned by this method, you can parse the JSON data in the response and pass it into the <code>Route.init(json:waypoints:profileIdentifier:)</code> initializer.
- (NSURL * _Nonnull)URLForCalculatingDirectionsWithOptions:(MBDirectionsOptions * _Nonnull)options SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

@class NSCoder;
enum MBRouteShapeFormat : NSUInteger;
enum MBRouteShapeResolution : NSUInteger;
enum MBMeasurementSystem : NSUInteger;

/// Options for calculating results from the Mapbox Directions service.
/// You do not create instances of this class directly. Instead, create instances of <code>MatchOptions</code> or <code>RouteOptions</code>.
SWIFT_CLASS_NAMED("DirectionsOptions")
@interface MBDirectionsOptions : NSObject <NSCopying, NSSecureCoding>
/// Initializes a route options object for routes between the given waypoints and an optional profile identifier.
/// \param waypoints An array of <code>Waypoint</code> objects representing locations that the route should visit in chronological order. The array should contain at least two waypoints (the source and destination) and at most 25 waypoints. (Some profiles, such as <code>MBDirectionsProfileIdentifierAutomobileAvoidingTraffic</code>, <a href="https://www.mapbox.com/api-documentation/#directions">may have lower limits</a>.)
///
/// \param profileIdentifier A string specifying the primary mode of transportation for the routes. This parameter, if set, should be set to <code>MBDirectionsProfileIdentifierAutomobile</code>, <code>MBDirectionsProfileIdentifierAutomobileAvoidingTraffic</code>, <code>MBDirectionsProfileIdentifierCycling</code>, or <code>MBDirectionsProfileIdentifierWalking</code>. <code>MBDirectionsProfileIdentifierAutomobile</code> is used by default.
///
- (nonnull instancetype)initWithWaypoints:(NSArray<MBWaypoint *> * _Nonnull)waypoints profileIdentifier:(MBDirectionsProfileIdentifier _Nullable)profileIdentifier OBJC_DESIGNATED_INITIALIZER;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL supportsSecureCoding;)
+ (BOOL)supportsSecureCoding SWIFT_WARN_UNUSED_RESULT;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEqualToDirectionsOptions:(MBDirectionsOptions * _Nullable)directionsOptions SWIFT_WARN_UNUSED_RESULT;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
/// An array of <code>Waypoint</code> objects representing locations that the route should visit in chronological order.
/// A waypoint object indicates a location to visit, as well as an optional heading from which to approach the location.
/// The array should contain at least two waypoints (the source and destination) and at most 25 waypoints.
@property (nonatomic, copy) NSArray<MBWaypoint *> * _Nonnull waypoints;
/// A string specifying the primary mode of transportation for the routes.
/// This property should be set to <code>MBDirectionsProfileIdentifierAutomobile</code>, <code>MBDirectionsProfileIdentifierAutomobileAvoidingTraffic</code>, <code>MBDirectionsProfileIdentifierCycling</code>, or <code>MBDirectionsProfileIdentifierWalking</code>. The default value of this property is <code>MBDirectionsProfileIdentifierAutomobile</code>, which specifies driving directions.
@property (nonatomic) MBDirectionsProfileIdentifier _Nonnull profileIdentifier;
/// A Boolean value indicating whether <code>MBRouteStep</code> objects should be included in the response.
/// If the value of this property is <code>true</code>, the returned route contains turn-by-turn instructions. Each returned <code>MBRoute</code> object contains one or more <code>MBRouteLeg</code> object that in turn contains one or more <code>MBRouteStep</code> objects. On the other hand, if the value of this property is <code>false</code>, the <code>MBRouteLeg</code> objects contain no <code>MBRouteStep</code> objects.
/// If you only want to know the distance or estimated travel time to a destination, set this property to <code>false</code> to minimize the size of the response and the time it takes to calculate the response. If you need to display turn-by-turn instructions, set this property to <code>true</code>.
/// The default value of this property is <code>false</code>.
@property (nonatomic) BOOL includesSteps;
/// Format of the data from which the shapes of the returned route and its steps are derived.
/// This property has no effect on the returned shape objects, although the choice of format can significantly affect the size of the underlying HTTP response.
/// The default value of this property is <code>polyline</code>.
@property (nonatomic) enum MBRouteShapeFormat shapeFormat;
/// Resolution of the shape of the returned route.
/// This property has no effect on the shape of the returned route’s steps.
/// The default value of this property is <code>low</code>, specifying a low-resolution route shape.
@property (nonatomic) enum MBRouteShapeResolution routeShapeResolution;
/// AttributeOptions for the route. Any combination of <code>AttributeOptions</code> can be specified.
/// By default, no attribute options are specified. It is recommended that <code>routeShapeResolution</code> be set to <code>.full</code>.
@property (nonatomic) MBAttributeOptions attributeOptions;
/// The locale in which the route’s instructions are written.
/// If you use MapboxDirections.swift with the Mapbox Directions API or Map Matching API, this property affects the sentence contained within the <code>RouteStep.instructions</code> property, but it does not affect any road names contained in that property or other properties such as <code>RouteStep.name</code>.
/// The Directions API can provide instructions in <a href="https://www.mapbox.com/api-documentation/#instructions-languages">a number of languages</a>. Set this property to <code>Bundle.main.preferredLocalizations.first</code> or <code>Locale.autoupdatingCurrent</code> to match the application’s language or the system language, respectively.
/// By default, this property is set to the current system locale.
@property (nonatomic, copy) NSLocale * _Nonnull locale;
/// A Boolean value indicating whether each route step includes an array of <code>SpokenInstructions</code>.
/// If this option is set to true, the <code>RouteStep.instructionsSpokenAlongStep</code> property is set to an array of <code>SpokenInstructions</code>.
@property (nonatomic) BOOL includesSpokenInstructions;
/// The measurement system used in spoken instructions included in route steps.
/// If the <code>includesSpokenInstructions</code> property is set to <code>true</code>, this property determines the units used for measuring the distance remaining until an upcoming maneuver. If the <code>includesSpokenInstructions</code> property is set to <code>false</code>, this property has no effect.
/// You should choose a measurement system appropriate for the current region. You can also allow the user to indicate their preferred measurement system via a setting.
@property (nonatomic) enum MBMeasurementSystem distanceMeasurementSystem;
/// :nodoc:
/// If true, each <code>RouteStep</code> will contain the property <code>visualInstructionsAlongStep</code>.
/// <code>visualInstructionsAlongStep</code> contains an array of <code>VisualInstruction</code> used for visually conveying information about a given <code>RouteStep</code>.
@property (nonatomic) BOOL includesVisualInstructions;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

@class MBRouteLeg;

/// A <code>DirectionsResult</code> represents a result returned from either the Mapbox Directions service.
/// You do not create instances of this class directly. Instead, you receive <code>Route</code> or <code>Match</code> objects when you request directions using the <code>Directions.calculate(_:completionHandler:)</code> or <code>Directions.calculateRoutes(matching:completionHandler:)</code> method.
SWIFT_CLASS_NAMED("DirectionsResult")
@interface MBDirectionsResult : NSObject <NSSecureCoding>
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL supportsSecureCoding;)
+ (BOOL)supportsSecureCoding SWIFT_WARN_UNUSED_RESULT;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
/// An array of geographic coordinates defining the path of the route from start to finish.
/// This array may be <code>nil</code> or simplified depending on the <code>routeShapeResolution</code> property of the original <code>RouteOptions</code> object.
/// Using the <a href="https://www.mapbox.com/ios-sdk/">Mapbox Maps SDK for iOS</a> or <a href="https://github.com/mapbox/mapbox-gl-native/tree/master/platform/macos/">Mapbox Maps SDK for macOS</a>, you can create an <code>MGLPolyline</code> object using these coordinates to display an overview of the route on an <code>MGLMapView</code>.
@property (nonatomic, readonly, copy) NSArray<NSValue *> * _Nullable coordinates;
/// The number of coordinates.
/// The value of this property may be zero or reduced depending on the <code>routeShapeResolution</code> property of the original <code>RouteOptions</code> object.
/// note:
/// This initializer is intended for Objective-C usage. In Swift code, use the <code>coordinates.count</code> property.
@property (nonatomic, readonly) NSUInteger coordinateCount;
/// Retrieves the coordinates.
/// The array may be empty or simplified depending on the <code>routeShapeResolution</code> property of the original <code>RouteOptions</code> object.
/// Using the <a href="https://www.mapbox.com/ios-sdk/">Mapbox Maps SDK for iOS</a> or <a href="https://github.com/mapbox/mapbox-gl-native/tree/master/platform/macos/">Mapbox Maps SDK for macOS</a>, you can create an <code>MGLPolyline</code> object using these coordinates to display an overview of the route on an <code>MGLMapView</code>.
/// precondition:
/// <code>coordinates</code> must be large enough to hold <code>coordinateCount</code> instances of <code>CLLocationCoordinate2D</code>.
/// note:
/// This initializer is intended for Objective-C usage. In Swift code, use the <code>coordinates</code> property.
/// \param coordinates A pointer to a C array of <code>CLLocationCoordinate2D</code> instances. On output, this array contains all the vertices of the overlay.
///
- (void)getCoordinates:(CLLocationCoordinate2D * _Nonnull)coordinates;
/// An array of <code>RouteLeg</code> objects representing the legs of the route.
/// The number of legs in this array depends on the number of waypoints. A route with two waypoints (the source and destination) has one leg, a route with three waypoints (the source, an intermediate waypoint, and the destination) has two legs, and so on.
/// To determine the name of the route, concatenate the names of the route’s legs.
@property (nonatomic, readonly, copy) NSArray<MBRouteLeg *> * _Nonnull legs;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// The route’s distance, measured in meters.
/// The value of this property accounts for the distance that the user must travel to traverse the path of the route. It is the sum of the <code>distance</code> properties of the route’s legs, not the sum of the direct distances between the route’s waypoints. You should not assume that the user would travel along this distance at a fixed speed.
@property (nonatomic, readonly) CLLocationDistance distance;
/// The route’s expected travel time, measured in seconds.
/// The value of this property reflects the time it takes to traverse the entire route. It is the sum of the <code>expectedTravelTime</code> properties of the route’s legs. If the route was calculated using the <code>MBDirectionsProfileIdentifierAutomobileAvoidingTraffic</code> profile, this property reflects current traffic conditions at the time of the request, not necessarily the traffic conditions at the time the user would begin the route. For other profiles, this property reflects travel time under ideal conditions and does not account for traffic congestion. If the route makes use of a ferry or train, the actual travel time may additionally be subject to the schedules of those services.
/// Do not assume that the user would travel along the route at a fixed speed. For more granular travel times, use the <code>RouteLeg.expectedTravelTime</code> or <code>RouteStep.expectedTravelTime</code>. For even more granularity, specify the <code>AttributeOptions.expectedTravelTime</code> option and use the <code>RouteLeg.expectedSegmentTravelTimes</code> property.
@property (nonatomic, readonly) NSTimeInterval expectedTravelTime;
/// <code>RouteOptions</code> used to create the directions request.
/// The route options object’s profileIdentifier property reflects the primary mode of transportation used for the route. Individual steps along the route might use different modes of transportation as necessary.
@property (nonatomic, readonly, strong) MBDirectionsOptions * _Nonnull directionsOptions;
/// The <a href="https://www.mapbox.com/help/define-access-token/">access token</a> used to make the directions request.
/// This property is set automatically if a request is made via <code>Directions.calculate(_:completionHandler:)</code>.
@property (nonatomic, copy) NSString * _Nullable accessToken;
/// The endpoint used to make the directions request.
/// This property is set automatically if a request is made via <code>Directions.calculate(_:completionHandler:)</code>.
@property (nonatomic, copy) NSURL * _Nullable apiEndpoint;
/// A unique identifier for a directions request.
/// Each route produced by a single call to <code>Directions.calculate(_:completionHandler:)</code> has the same route identifier.
@property (nonatomic, copy) NSString * _Nullable routeIdentifier;
/// The locale to use for spoken instructions.
/// This locale is specific to Mapbox Voice API. If <code>nil</code> is returned, the instruction should be spoken with an alternative speech synthesizer.
@property (nonatomic, copy) NSLocale * _Nullable speechLocale;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

/// A <code>DrivingSide</code> indicates which side of the road cars and traffic flow.
typedef SWIFT_ENUM_NAMED(NSInteger, MBDrivingSide, "DrivingSide", closed) {
/// Indicates driving occurs on the <code>left</code> side.
  MBDrivingSideLeft = 0,
/// Indicates driving occurs on the <code>right</code> side.
  MBDrivingSideRight = 1,
};



/// A <code>RouteShapeFormat</code> indicates the format of a route’s shape in the raw HTTP response.
typedef SWIFT_ENUM_NAMED(NSUInteger, MBInstructionFormat, "InstructionFormat", closed) {
/// The route steps’ instructions are delivered in plain text format.
  MBInstructionFormatText = 0,
/// The route steps’ instructions are delivered in HTML format.
/// Key phrases are boldfaced.
  MBInstructionFormatHtml = 1,
};

@class MBLane;

/// A single cross street along a step.
SWIFT_CLASS_NAMED("Intersection")
@interface MBIntersection : NSObject <NSSecureCoding>
/// The geographic coordinates at the center of the intersection.
@property (nonatomic, readonly) CLLocationCoordinate2D location;
/// An array of <code>CLLocationDirection</code>s indicating the absolute headings of the roads that meet at the intersection.
/// A road is represented in this array by a heading indicating the direction from which the road meets the intersection. To get the direction of travel when leaving the intersection along the road, rotate the heading 180 degrees.
/// A single road that passes through this intersection is represented by two items in this array: one for the segment that enters the intersection and one for the segment that exits it.
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nonnull headings;
/// The indices of the items in the <code>headings</code> array that correspond to the roads that may be used to leave the intersection.
/// This index set effectively excludes any one-way road that leads toward the intersection.
@property (nonatomic, readonly, copy) NSIndexSet * _Nonnull outletIndexes;
/// The index of the item in the <code>headings</code> array that corresponds to the road that the containing route step uses to approach the intersection.
@property (nonatomic, readonly) NSInteger approachIndex;
/// The index of the item in the <code>headings</code> array that corresponds to the road that the containing route step uses to leave the intersection.
@property (nonatomic, readonly) NSInteger outletIndex;
/// An array of <code>Lane</code> objects representing all the lanes of the road that the containing route step uses to approach the intersection.
/// If no lane information is available for an intersection, this property’s value is <code>nil</code>. The first item corresponds to the leftmost lane, the second item corresponds to the second lane from the left, and so on, regardless of whether the surrounding country drives on the left or on the right.
@property (nonatomic, readonly, copy) NSArray<MBLane *> * _Nullable approachLanes;
/// The indices of the items in the <code>approachLanes</code> array that correspond to the roads that may be used to execute the maneuver.
/// If no lane information is available for an intersection, this property’s value is <code>nil</code>.
@property (nonatomic, readonly, copy) NSIndexSet * _Nullable usableApproachLanes;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL supportsSecureCoding;)
+ (BOOL)supportsSecureCoding SWIFT_WARN_UNUSED_RESULT;
+ (void)setSupportsSecureCoding:(BOOL)value;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// A lane on the road approaching an intersection.
SWIFT_CLASS_NAMED("Lane")
@interface MBLane : NSObject <NSSecureCoding>
/// The lane indications specifying the maneuvers that may be executed from the lane.
@property (nonatomic, readonly) MBLaneIndication indications;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL supportsSecureCoding;)
+ (BOOL)supportsSecureCoding SWIFT_WARN_UNUSED_RESULT;
+ (void)setSupportsSecureCoding:(BOOL)value;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

/// A <code>ManeuverDirection</code> clarifies a <code>ManeuverType</code> with directional information. The exact meaning of the maneuver direction for a given step depends on the step’s maneuver type; see the <code>ManeuverType</code> documentation for details.
typedef SWIFT_ENUM_NAMED(NSInteger, MBManeuverDirection, "ManeuverDirection", closed) {
/// The step does not have a particular maneuver direction associated with it.
/// This maneuver direction is used as a workaround for bridging to Objective-C which does not support nullable enumeration-typed values.
  MBManeuverDirectionNone = 0,
/// The maneuver requires a sharp turn to the right.
  MBManeuverDirectionSharpRight = 1,
/// The maneuver requires a turn to the right, a merge to the right, or an exit on the right, or the destination is on the right.
  MBManeuverDirectionRight = 2,
/// The maneuver requires a slight turn to the right.
  MBManeuverDirectionSlightRight = 3,
/// The maneuver requires no notable change in direction, or the destination is straight ahead.
  MBManeuverDirectionStraightAhead = 4,
/// The maneuver requires a slight turn to the left.
  MBManeuverDirectionSlightLeft = 5,
/// The maneuver requires a turn to the left, a merge to the left, or an exit on the left, or the destination is on the right.
  MBManeuverDirectionLeft = 6,
/// The maneuver requires a sharp turn to the left.
  MBManeuverDirectionSharpLeft = 7,
/// The maneuver requires a U-turn when possible.
/// Use the difference between the step’s initial and final headings to distinguish between a U-turn to the left (typical in countries that drive on the right) and a U-turn on the right (typical in countries that drive on the left). If the difference in headings is greater than 180 degrees, the maneuver requires a U-turn to the left. If the difference in headings is less than 180 degrees, the maneuver requires a U-turn to the right.
  MBManeuverDirectionUTurn = 8,
};

/// A <code>ManeuverType</code> specifies the type of maneuver required to complete the route step. You can pair a maneuver type with a <code>ManeuverDirection</code> to choose an appropriate visual or voice prompt to present the user.
/// In Swift, you can use pattern matching with a single switch statement on a tuple containing the maneuver type and maneuver direction to avoid a complex series of if-else-if statements or switch statements.
typedef SWIFT_ENUM_NAMED(NSInteger, MBManeuverType, "ManeuverType", closed) {
/// The step does not have a particular maneuver type associated with it.
/// This maneuver type is used as a workaround for bridging to Objective-C which does not support nullable enumeration-typed values.
  MBManeuverTypeNone = 0,
/// The step requires the user to depart from a waypoint.
/// If the waypoint is some distance away from the nearest road, the maneuver direction indicates the direction the user must turn upon reaching the road.
  MBManeuverTypeDepart = 1,
/// The step requires the user to turn.
/// The maneuver direction indicates the direction in which the user must turn relative to the current direction of travel. The exit index indicates the number of intersections, large or small, from the previous maneuver up to and including the intersection at which the user must turn.
  MBManeuverTypeTurn = 2,
/// The step requires the user to continue after a turn.
  MBManeuverTypeContinue = 3,
/// The step requires the user to continue on the current road as it changes names.
/// The step’s name contains the road’s new name. To get the road’s old name, use the previous step’s name.
  MBManeuverTypePassNameChange = 4,
/// The step requires the user to merge onto another road.
/// The maneuver direction indicates the side from which the other road approaches the intersection relative to the user.
  MBManeuverTypeMerge = 5,
/// The step requires the user to take a entrance ramp (slip road) onto a highway.
  MBManeuverTypeTakeOnRamp = 6,
/// The step requires the user to take an exit ramp (slip road) off a highway.
/// The maneuver direction indicates the side of the highway from which the user must exit. The exit index indicates the number of highway exits from the previous maneuver up to and including the exit that the user must take.
  MBManeuverTypeTakeOffRamp = 7,
/// The step requires the user to choose a fork at a Y-shaped fork in the road.
/// The maneuver direction indicates which fork to take.
  MBManeuverTypeReachFork = 8,
/// The step requires the user to turn at either a T-shaped three-way intersection or a sharp bend in the road where the road also changes names.
/// This maneuver type is called out separately so that the user may be able to proceed more confidently, without fear of having overshot the turn. If this distinction is unimportant to you, you may treat the maneuver as an ordinary <code>turn</code>.
  MBManeuverTypeReachEnd = 9,
/// The step requires the user to get into a specific lane in order to continue along the current road.
/// The maneuver direction is set to <code>straightAhead</code>. Each of the first intersection’s usable approach lanes also has an indication of <code>straightAhead</code>. A maneuver in a different direction would instead have a maneuver type of <code>turn</code>.
/// This maneuver type is called out separately so that the application can present the user with lane guidance based on the first element in the <code>intersections</code> property. If lane guidance is unimportant to you, you may treat the maneuver as an ordinary <code>continue</code> or ignore it.
  MBManeuverTypeUseLane = 10,
/// The step requires the user to enter and traverse a roundabout (traffic circle or rotary).
/// The step has no name, but the exit name is the name of the road to take to exit the roundabout. The exit index indicates the number of roundabout exits up to and including the exit to take.
/// If <code>RouteOptions.includesExitRoundaboutManeuver</code> is set to <code>true</code>, this step is followed by an <code>.exitRoundabout</code> maneuver. Otherwise, this step represents the entire roundabout maneuver, from the entrance to the exit.
  MBManeuverTypeTakeRoundabout = 11,
/// The step requires the user to enter and traverse a large, named roundabout (traffic circle or rotary).
/// The step’s name is the name of the roundabout. The exit name is the name of the road to take to exit the roundabout. The exit index indicates the number of rotary exits up to and including the exit that the user must take.
/// If <code>RouteOptions.includesExitRoundaboutManeuver</code> is set to <code>true</code>, this step is followed by an <code>.exitRotary</code> maneuver. Otherwise, this step represents the entire roundabout maneuver, from the entrance to the exit.
  MBManeuverTypeTakeRotary = 12,
/// The step requires the user to enter and exit a roundabout (traffic circle or rotary) that is compact enough to constitute a single intersection.
/// The step’s name is the name of the road to take after exiting the roundabout. This maneuver type is called out separately because the user may perceive the roundabout as an ordinary intersection with an island in the middle. If this distinction is unimportant to you, you may treat the maneuver as either an ordinary <code>turn</code> or as a <code>takeRoundabout</code>.
  MBManeuverTypeTurnAtRoundabout = 13,
/// The step requires the user to exit a roundabout (traffic circle or rotary).
/// This maneuver type follows a <code>.takeRoundabout</code> maneuver. It is only used when <code>RouteOptions.includesExitRoundaboutManeuver</code> is set to true.
  MBManeuverTypeExitRoundabout = 14,
/// The step requires the user to exit a large, named roundabout (traffic circle or rotary).
/// This maneuver type follows a <code>.takeRotary</code> maneuver. It is only used when <code>RouteOptions.includesExitRoundaboutManeuver</code> is set to true.
  MBManeuverTypeExitRotary = 15,
/// The step requires the user to respond to a change in travel conditions.
/// This maneuver type may occur for example when driving directions require the user to board a ferry, or when cycling directions require the user to dismount. The step’s transport type and instructions contains important contextual details that should be presented to the user at the maneuver location.
/// Similar changes can occur simultaneously with other maneuvers, such as when the road changes its name at the site of a movable bridge. In such cases, <code>heedWarning</code> is suppressed in favor of another maneuver type.
  MBManeuverTypeHeedWarning = 16,
/// The step requires the user to arrive at a waypoint.
/// The distance and expected travel time for this step are set to zero, indicating that the route or route leg is complete. The maneuver direction indicates the side of the road on which the waypoint can be found (or whether it is straight ahead).
  MBManeuverTypeArrive = 17,
/// The step requires the user to arrive at an intermediate waypoint.
/// This maneuver type is only used by version 4 of the Mapbox Directions API.
  MBManeuverTypePassWaypoint = 18,
};

@class MBTracepoint;

/// A <code>Match</code> object defines a single route that was created from a series of points that were matched against a road network.
/// Typically, you do not create instances of this class directly. Instead, you receive match objects when you pass a <code>MatchOptions</code> object into the <code>Directions.calculate(_:completionHandler:)</code> or <code>Directions.calculateRoutes(matching:completionHandler:)</code> method.
SWIFT_CLASS_NAMED("Match")
@interface MBMatch : MBDirectionsResult
/// Initializes a new match object with the given JSON dictionary representation and tracepoints.
/// \param json A JSON dictionary representation of the route as returned by the Mapbox Map Matching API.
///
/// \param tracepoints An array of <code>Tracepoint</code> that the match found in order.
///
/// \param matchOptions The <code>MatchOptions</code> used to create the request.
///
- (nonnull instancetype)initWithJson:(NSDictionary<NSString *, id> * _Nonnull)json tracepoints:(NSArray<MBTracepoint *> * _Nonnull)tracepoints waypointIndices:(NSIndexSet * _Nonnull)waypointIndices matchOptions:(MBMatchOptions * _Nonnull)matchOptions;
/// A number between 0 and 1 that indicates the Map Matching API’s confidence that the match is accurate. A higher confidence means the match is more likely to be accurate.
@property (nonatomic) float confidence;
/// Tracepoints on the road network that match the tracepoints in the match options.
/// Any outlier tracepoint is omitted from the match. This array represents an outlier tracepoint is a <code>Tracepoint</code> object whose <code>Tracepoint.coordinate</code> property is <code>kCLLocationCoordinate2DInvalid</code>.
@property (nonatomic, copy) NSArray<MBTracepoint *> * _Nonnull tracepoints;
/// Index of the waypoint inside the matched route.
@property (nonatomic, copy) NSIndexSet * _Nullable waypointIndices;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL supportsSecureCoding;)
+ (BOOL)supportsSecureCoding SWIFT_WARN_UNUSED_RESULT;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEqualToMatch:(MBMatch * _Nullable)match SWIFT_WARN_UNUSED_RESULT;
@end


/// A <code>MatchOptions</code> object is a structure that specifies the criteria for results returned by the Mapbox Map Matching API.
/// Pass an instance of this class into the <code>Directions.calculate(_:completionHandler:)</code> method.
SWIFT_CLASS_NAMED("MatchOptions")
@interface MBMatchOptions : MBDirectionsOptions
- (nonnull instancetype)initWithWaypoints:(NSArray<MBWaypoint *> * _Nonnull)waypoints profileIdentifier:(MBDirectionsProfileIdentifier _Nullable)profileIdentifier OBJC_DESIGNATED_INITIALIZER;
/// If true, the input locations are re-sampled for improved map matching results. The default is  <code>false</code>.
@property (nonatomic) BOOL resamplesTraces;
/// An index set containing indices of two or more items in <code>coordinates</code>. These will be represented by <code>Waypoint</code>s in the resulting <code>Match</code> objects.
/// Use this property when the <code>includesSteps</code> property is <code>true</code> or when <code>coordinates</code> represents a trace with a high sample rate. If this property is <code>nil</code>, the resulting <code>Match</code> objects contain a waypoint for each coordinate in the match options.
/// If specified, each index must correspond to a valid index in <code>coordinates</code>, and the index set must contain 0 and the last index (one less than <code>endIndex</code>) of <code>coordinates</code>.
@property (nonatomic, copy) NSIndexSet * _Nullable waypointIndices;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL supportsSecureCoding;)
+ (BOOL)supportsSecureCoding SWIFT_WARN_UNUSED_RESULT;
@end

/// A system of units of measuring distances and other quantities.
typedef SWIFT_ENUM_NAMED(NSUInteger, MBMeasurementSystem, "MeasurementSystem", closed) {
/// U.S. customary and British imperial units.
/// Distances are measured in miles and feet.
  MBMeasurementSystemImperial = 0,
/// The metric system.
/// Distances are measured in kilometers and meters.
  MBMeasurementSystemMetric = 1,
};


/// A <code>Route</code> object defines a single route that the user can follow to visit a series of waypoints in order. The route object includes information about the route, such as its distance and expected travel time. Depending on the criteria used to calculate the route, the route object may also include detailed turn-by-turn instructions.
/// Typically, you do not create instances of this class directly. Instead, you receive route objects when you request directions using the <code>Directions.calculate(_:completionHandler:)</code> method. However, if you use the <code>Directions.url(forCalculating:)</code> method instead, you can pass the results of the HTTP request into this class’s initializer.
SWIFT_CLASS_NAMED("Route")
@interface MBRoute : MBDirectionsResult
/// Initializes a new route object with the given JSON dictionary representation and waypoints.
/// This initializer is intended for use in conjunction with the <code>Directions.url(forCalculating:)</code> method.
/// \param json A JSON dictionary representation of the route as returned by the Mapbox Directions API.
///
/// \param waypoints An array of waypoints that the route visits in chronological order.
///
/// \param routeOptions The <code>RouteOptions</code> used to create the request.
///
- (nonnull instancetype)initWithJson:(NSDictionary<NSString *, id> * _Nonnull)json waypoints:(NSArray<MBWaypoint *> * _Nonnull)waypoints routeOptions:(MBRouteOptions * _Nonnull)routeOptions OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
@end

@class MBRouteStep;

/// A <code>RouteLeg</code> object defines a single leg of a route between two waypoints. If the overall route has only two waypoints, it has a single <code>RouteLeg</code> object that covers the entire route. The route leg object includes information about the leg, such as its name, distance, and expected travel time. Depending on the criteria used to calculate the route, the route leg object may also include detailed turn-by-turn instructions.
/// You do not create instances of this class directly. Instead, you receive route leg objects as part of route objects when you request directions using the <code>Directions.calculate(_:completionHandler:)</code> method.
SWIFT_CLASS_NAMED("RouteLeg")
@interface MBRouteLeg : NSObject <NSSecureCoding>
/// Initializes a new route leg object with the given JSON dictionary representation and waypoints.
/// Normally, you do not create instances of this class directly. Instead, you receive route leg objects as part of route objects when you request directions using the <code>Directions.calculateDirections(options:completionHandler:)</code> method.
/// \param json A JSON dictionary representation of a route leg object as returnd by the Mapbox Directions API.
///
/// \param source The waypoint at the beginning of the leg.
///
/// \param destination The waypoint at the end of the leg.
///
/// \param profileIdentifier The profile identifier used to request the routes.
///
- (nonnull instancetype)initWithJson:(NSDictionary<NSString *, id> * _Nonnull)json source:(MBWaypoint * _Nonnull)source destination:(MBWaypoint * _Nonnull)destination profileIdentifier:(MBDirectionsProfileIdentifier _Nonnull)profileIdentifier;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL supportsSecureCoding;)
+ (BOOL)supportsSecureCoding SWIFT_WARN_UNUSED_RESULT;
+ (void)setSupportsSecureCoding:(BOOL)value;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
/// The starting point of the route leg.
/// Unless this is the first leg of the route, the source of this leg is the same as the destination of the previous leg.
@property (nonatomic, readonly, strong) MBWaypoint * _Nonnull source;
/// The endpoint of the route leg.
/// Unless this is the last leg of the route, the destination of this leg is the same as the source of the next leg.
@property (nonatomic, readonly, strong) MBWaypoint * _Nonnull destination;
/// An array of one or more <code>RouteStep</code> objects representing the steps for traversing this leg of the route.
/// Each route step object corresponds to a distinct maneuver and the approach to the next maneuver.
/// This array is empty if the <code>includesSteps</code> property of the original <code>RouteOptions</code> object is set to <code>false</code>.
@property (nonatomic, readonly, copy) NSArray<MBRouteStep *> * _Nonnull steps;
/// An array containing <a href="https://wiki.openstreetmap.org/wiki/Node">OpenStreetMap node identifiers</a>, one for each coordinate along the route geometry.
/// This property is set if the <code>RouteOptions.attributeOptions</code> property contains <code>.openStreetMapNodeIdentifier</code>.
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nullable openStreetMapNodeIdentifiers;
/// An array containing the distance (measured in meters) between each coordinate in the route leg geometry.
/// This property is set if the <code>RouteOptions.attributeOptions</code> property contains <code>.distance</code>.
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nullable segmentDistances;
/// An array containing the expected travel time (measured in seconds) between each coordinate in the route leg geometry.
/// These values are dynamic, accounting for any conditions that may change along a segment, such as traffic congestion if the profile identifier is set to <code>.automobileAvoidingTraffic</code>.
/// This property is set if the <code>RouteOptions.attributeOptions</code> property contains <code>.expectedTravelTime</code>.
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nullable expectedSegmentTravelTimes;
/// An array containing the expected average speed (measured in meters per second) between each coordinate in the route leg geometry.
/// These values are dynamic; rather than speed limits, they account for the road’s classification and/or any traffic congestion (if the profile identifier is set to <code>.automobileAvoidingTraffic</code>).
/// This property is set if the <code>RouteOptions.attributeOptions</code> property contains <code>.speed</code>.
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nullable segmentSpeeds;
/// A name that describes the route leg.
/// The name describes the leg using the most significant roads or trails along the route leg. You can display this string to the user to help the user can distinguish one route from another based on how the legs of the routes are named.
/// The leg’s name does not identify the start and end points of the leg. To distinguish one leg from another within the same route, concatenate the <code>name</code> properties of the <code>source</code> and <code>destination</code> waypoints.
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// The route leg’s distance, measured in meters.
/// The value of this property accounts for the distance that the user must travel to arrive at the destination from the source. It is not the direct distance between the source and destination, nor should not assume that the user would travel along this distance at a fixed speed.
@property (nonatomic, readonly) CLLocationDistance distance;
/// The route leg’s expected travel time, measured in seconds.
/// The value of this property reflects the time it takes to traverse the route leg. If the route was calculated using the <code>MBDirectionsProfileIdentifierAutomobileAvoidingTraffic</code> profile, this property reflects current traffic conditions at the time of the request, not necessarily the traffic conditions at the time the user would begin this leg. For other profiles, this property reflects travel time under ideal conditions and does not account for traffic congestion. If the leg makes use of a ferry or train, the actual travel time may additionally be subject to the schedules of those services.
/// Do not assume that the user would travel along the leg at a fixed speed. For the expected travel time on each individual segment along the leg, use the <code>RouteStep.expectedTravelTimes</code> property. For more granularity, specify the <code>AttributeOptions.expectedTravelTime</code> option and use the <code>expectedSegmentTravelTimes</code> property.
@property (nonatomic, readonly) NSTimeInterval expectedTravelTime;
/// A string specifying the primary mode of transportation for the route leg.
/// The value of this property is <code>MBDirectionsProfileIdentifierAutomobile</code>, <code>MBDirectionsProfileIdentifierAutomobileAvoidingTraffic</code>, <code>MBDirectionsProfileIdentifierCycling</code>, or <code>MBDirectionsProfileIdentifierWalking</code>, depending on the <code>profileIdentifier</code> property of the original <code>RouteOptions</code> object. This property reflects the primary mode of transportation used for the route leg. Individual steps along the route leg might use different modes of transportation as necessary.
@property (nonatomic, readonly) MBDirectionsProfileIdentifier _Nonnull profileIdentifier;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// A <code>RouteOptions</code> object is a structure that specifies the criteria for results returned by the Mapbox Directions API.
/// Pass an instance of this class into the <code>Directions.calculate(_:completionHandler:)</code> method.
SWIFT_CLASS_NAMED("RouteOptions")
@interface MBRouteOptions : MBDirectionsOptions
/// Initializes a route options object for routes between the given locations and an optional profile identifier.
/// note:
/// This initializer is intended for <code>CLLocation</code> objects created using the <code>CLLocation.init(latitude:longitude:)</code> initializer. If you intend to use a <code>CLLocation</code> object obtained from a <code>CLLocationManager</code> object, consider increasing the <code>horizontalAccuracy</code> or set it to a negative value to avoid overfitting, since the <code>Waypoint</code> class’s <code>coordinateAccuracy</code> property represents the maximum allowed deviation from the waypoint.
/// \param locations An array of <code>CLLocation</code> objects representing locations that the route should visit in chronological order. The array should contain at least two locations (the source and destination) and at most 25 locations. Each location object is converted into a <code>Waypoint</code> object. This class respects the <code>CLLocation</code> class’s <code>coordinate</code> and <code>horizontalAccuracy</code> properties, converting them into the <code>Waypoint</code> class’s <code>coordinate</code> and <code>coordinateAccuracy</code> properties, respectively.
///
/// \param profileIdentifier A string specifying the primary mode of transportation for the routes. This parameter, if set, should be set to <code>MBDirectionsProfileIdentifierAutomobile</code>, <code>MBDirectionsProfileIdentifierAutomobileAvoidingTraffic</code>, <code>MBDirectionsProfileIdentifierCycling</code>, or <code>MBDirectionsProfileIdentifierWalking</code>. <code>MBDirectionsProfileIdentifierAutomobile</code> is used by default.
///
- (nonnull instancetype)initWithLocations:(NSArray<CLLocation *> * _Nonnull)locations profileIdentifier:(MBDirectionsProfileIdentifier _Nullable)profileIdentifier;
/// Initializes a route options object for routes between the given geographic coordinates and an optional profile identifier.
/// \param coordinates An array of geographic coordinates representing locations that the route should visit in chronological order. The array should contain at least two locations (the source and destination) and at most 25 locations. Each coordinate is converted into a <code>Waypoint</code> object.
///
/// \param profileIdentifier A string specifying the primary mode of transportation for the routes. This parameter, if set, should be set to <code>MBDirectionsProfileIdentifierAutomobile</code>, <code>MBDirectionsProfileIdentifierAutomobileAvoidingTraffic</code>, <code>MBDirectionsProfileIdentifierCycling</code>, or <code>MBDirectionsProfileIdentifierWalking</code>. <code>MBDirectionsProfileIdentifierAutomobile</code> is used by default.
///
- (nonnull instancetype)initWithCoordinates:(NSArray<NSValue *> * _Nonnull)coordinates profileIdentifier:(MBDirectionsProfileIdentifier _Nullable)profileIdentifier;
/// Initializes a route options object for routes between the given waypoints and an optional profile identifier.
/// \param waypoints An array of <code>Waypoint</code> objects representing locations that the route should visit in chronological order. The array should contain at least two waypoints (the source and destination) and at most 25 waypoints. (Some profiles, such as <code>MBDirectionsProfileIdentifierAutomobileAvoidingTraffic</code>, <a href="https://www.mapbox.com/api-documentation/#directions">may have lower limits</a>.)
///
/// \param profileIdentifier A string specifying the primary mode of transportation for the routes. This parameter, if set, should be set to <code>MBDirectionsProfileIdentifierAutomobile</code>, <code>MBDirectionsProfileIdentifierAutomobileAvoidingTraffic</code>, <code>MBDirectionsProfileIdentifierCycling</code>, or <code>MBDirectionsProfileIdentifierWalking</code>. <code>MBDirectionsProfileIdentifierAutomobile</code> is used by default.
///
- (nonnull instancetype)initWithWaypoints:(NSArray<MBWaypoint *> * _Nonnull)waypoints profileIdentifier:(MBDirectionsProfileIdentifier _Nullable)profileIdentifier OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
/// A Boolean value that indicates whether a returned route may require a point U-turn at an intermediate waypoint.
/// If the value of this property is <code>true</code>, a returned route may require an immediate U-turn at an intermediate waypoint. At an intermediate waypoint, if the value of this property is <code>false</code>, each returned route may continue straight ahead or turn to either side but may not U-turn. This property has no effect if only two waypoints are specified.
/// Set this property to <code>true</code> if you expect the user to traverse each leg of the trip separately. For example, it would be quite easy for the user to effectively “U-turn” at a waypoint if the user first parks the car and patronizes a restaurant there before embarking on the next leg of the trip. Set this property to <code>false</code> if you expect the user to proceed to the next waypoint immediately upon arrival. For example, if the user only needs to drop off a passenger or package at the waypoint before continuing, it would be inconvenient to perform a U-turn at that location.
/// The default value of this property is <code>false</code> when the profile identifier is <code>MBDirectionsProfileIdentifierAutomobile</code> or <code>MBDirectionsProfileIdentifierAutomobileAvoidingTraffic</code> and <code>true</code> otherwise.
@property (nonatomic) BOOL allowsUTurnAtWaypoint;
/// A Boolean value indicating whether alternative routes should be included in the response.
/// If the value of this property is <code>false</code>, the server only calculates a single route that visits each of the waypoints. If the value of this property is <code>true</code>, the server attempts to find additional reasonable routes that visit the waypoints. Regardless, multiple routes are only returned if it is possible to visit the waypoints by a different route without significantly increasing the distance or travel time. The alternative routes may partially overlap with the preferred route, especially if intermediate waypoints are specified.
/// Alternative routes may take longer to calculate and make the response significantly larger, so only request alternative routes if you intend to display them to the user or let the user choose them over the preferred route. For example, do not request alternative routes if you only want to know the distance or estimated travel time to a destination.
/// The default value of this property is <code>false</code>.
@property (nonatomic) BOOL includesAlternativeRoutes;
/// A Boolean value indicating whether the route includes a <code>ManeuverType.exitRoundabout</code> or <code>ManeuverType.exitRotary</code> step when traversing a roundabout or rotary, respectively.
/// If this option is set to <code>true</code>, a route that traverses a roundabout includes both a <code>ManeuverType.takeRoundabout</code> step and a <code>ManeuverType.exitRoundabout</code> step; likewise, a route that traverses a large, named roundabout includes both a <code>ManeuverType.takeRotary</code> step and a <code>ManeuverType.exitRotary</code> step. Otherwise, it only includes a <code>ManeuverType.takeRoundabout</code> or <code>ManeuverType.takeRotary</code> step. This option is set to <code>false</code> by default.
@property (nonatomic) BOOL includesExitRoundaboutManeuver;
/// The route classes that the calculated routes will avoid.
/// Currently, you can only specify a single road class to avoid.
@property (nonatomic) MBRoadClasses roadClassesToAvoid;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL supportsSecureCoding;)
+ (BOOL)supportsSecureCoding SWIFT_WARN_UNUSED_RESULT;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEqualToRouteOptions:(MBRouteOptions * _Nullable)routeOptions SWIFT_WARN_UNUSED_RESULT;
@end


/// A <code>RouteOptionsV4</code> object is a structure that specifies the criteria for results returned by the Mapbox Directions API v4.
/// Pass an instance of this class into the <code>Directions.calculate(_:completionHandler:)</code> method.
SWIFT_CLASS_NAMED("RouteOptionsV4")
@interface MBRouteOptionsV4 : MBRouteOptions
/// The format of the returned route steps’ instructions.
/// By default, the value of this property is <code>text</code>, specifying plain text instructions.
@property (nonatomic) enum MBInstructionFormat instructionFormat;
/// A Boolean value indicating whether the returned routes and their route steps should include any geographic coordinate data.
/// If the value of this property is <code>true</code>, the returned routes and their route steps include coordinates; if the value of this property is `false, they do not.
/// The default value of this property is <code>true</code>.
@property (nonatomic) BOOL includesShapes;
- (nonnull instancetype)initWithWaypoints:(NSArray<MBWaypoint *> * _Nonnull)waypoints profileIdentifier:(MBDirectionsProfileIdentifier _Nullable)profileIdentifier OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
@end

/// A <code>RouteShapeFormat</code> indicates the format of a route or match shape in the raw HTTP response.
typedef SWIFT_ENUM_NAMED(NSUInteger, MBRouteShapeFormat, "RouteShapeFormat", closed) {
/// The route’s shape is delivered in <a href="http://geojson.org/">GeoJSON</a> format.
/// This standard format is human-readable and can be parsed straightforwardly, but it is far more verbose than <code>polyline</code>.
  MBRouteShapeFormatGeoJSON = 0,
/// The route’s shape is delivered in <a href="https://developers.google.com/maps/documentation/utilities/polylinealgorithm">encoded polyline algorithm</a> format with 1×10<sup>−5</sup> precision.
/// This machine-readable format is considerably more compact than <code>geoJSON</code> but less precise than <code>polyline6</code>.
  MBRouteShapeFormatPolyline = 1,
/// The route’s shape is delivered in <a href="https://developers.google.com/maps/documentation/utilities/polylinealgorithm">encoded polyline algorithm</a> format with 1×10<sup>−6</sup> precision.
/// This format is an order of magnitude more precise than <code>polyline</code>.
  MBRouteShapeFormatPolyline6 = 2,
};

/// A <code>RouteShapeResolution</code> indicates the level of detail in a route’s shape, or whether the shape is present at all.
typedef SWIFT_ENUM_NAMED(NSUInteger, MBRouteShapeResolution, "RouteShapeResolution", closed) {
/// The route’s shape is omitted.
/// Specify this resolution if you do not intend to show the route line to the user or analyze the route line in any way.
  MBRouteShapeResolutionNone = 0,
/// The route’s shape is simplified.
/// This resolution considerably reduces the size of the response. The resulting shape is suitable for display at a low zoom level, but it lacks the detail necessary for focusing on individual segments of the route.
  MBRouteShapeResolutionLow = 1,
/// The route’s shape is as detailed as possible.
/// The resulting shape is equivalent to concatenating the shapes of all the route’s consitituent steps. You can focus on individual segments of this route while faithfully representing the path of the route. If you only intend to show a route overview and do not need to analyze the route line in any way, consider specifying <code>low</code> instead to considerably reduce the size of the response.
  MBRouteShapeResolutionFull = 2,
};

@class MBSpokenInstruction;
@class MBVisualInstruction;
enum MBTransportType : NSInteger;

/// A <code>RouteStep</code> object represents a single distinct maneuver along a route and the approach to the next maneuver. The route step object corresponds to a single instruction the user must follow to complete a portion of the route. For example, a step might require the user to turn then follow a road.
/// You do not create instances of this class directly. Instead, you receive route step objects as part of route objects when you request directions using the <code>Directions.calculate(_:completionHandler:)</code> method, setting the <code>includesSteps</code> option to <code>true</code> in the <code>RouteOptions</code> object that you pass into that method.
SWIFT_CLASS_NAMED("RouteStep")
@interface MBRouteStep : NSObject <NSSecureCoding>
/// Initializes a new route step object with the given JSON dictionary representation.
/// Normally, you do not create instances of this class directly. Instead, you receive route step objects as part of route objects when you request directions using the <code>Directions.calculateDirections(options:completionHandler:)</code> method, setting the <code>includesSteps</code> option to <code>true</code> in the <code>RouteOptions</code> object that you pass into that method.
/// \param json A JSON dictionary representation of a route step object as returnd by the Mapbox Directions API.
///
- (nonnull instancetype)initWithJson:(NSDictionary<NSString *, id> * _Nonnull)json;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL supportsSecureCoding;)
+ (BOOL)supportsSecureCoding SWIFT_WARN_UNUSED_RESULT;
+ (void)setSupportsSecureCoding:(BOOL)value;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
/// An array of geographic coordinates defining the path of the route step from the location of the maneuver to the location of the next step’s maneuver.
/// The value of this property may be <code>nil</code>, for example when the maneuver type is <code>arrive</code>.
/// Using the <a href="https://www.mapbox.com/ios-sdk/">Mapbox Maps SDK for iOS</a> or <a href="https://github.com/mapbox/mapbox-gl-native/tree/master/platform/macos/">Mapbox Maps SDK for macOS</a>, you can create an <code>MGLPolyline</code> object using these coordinates to display a portion of a route on an <code>MGLMapView</code>.
@property (nonatomic, readonly, copy) NSArray<NSValue *> * _Nullable coordinates;
/// The number of coordinates.
/// The value of this property may be zero, for example when the maneuver type is <code>arrive</code>.
/// note:
/// This initializer is intended for Objective-C usage. In Swift code, use the <code>coordinates.count</code> property.
@property (nonatomic, readonly) NSUInteger coordinateCount;
/// Retrieves the coordinates.
/// The array may be empty, for example when the maneuver type is <code>arrive</code>.
/// Using the <a href="https://www.mapbox.com/ios-sdk/">Mapbox Maps SDK for iOS</a> or <a href="https://github.com/mapbox/mapbox-gl-native/tree/master/platform/macos/">Mapbox Maps SDK for macOS</a>, you can create an <code>MGLPolyline</code> object using these coordinates to display a portion of a route on an <code>MGLMapView</code>.
/// precondition:
/// <code>coordinates</code> must be large enough to hold <code>coordinateCount</code> instances of <code>CLLocationCoordinate2D</code>.
/// note:
/// This initializer is intended for Objective-C usage. In Swift code, use the <code>coordinates</code> property.
/// \param coordinates A pointer to a C array of <code>CLLocationCoordinate2D</code> instances. On output, this array contains all the vertices of the overlay.
///
///
/// returns:
/// True if the step has coordinates and <code>coordinates</code> has been populated, or false if the step has no coordinates and <code>coordinates</code> has not been modified.
- (BOOL)getCoordinates:(CLLocationCoordinate2D * _Nonnull)coordinates SWIFT_WARN_UNUSED_RESULT;
/// A string with instructions explaining how to perform the step’s maneuver.
/// You can display this string or read it aloud to the user. The string does not include the distance to or from the maneuver. For instructions optimized for real-time delivery during turn-by-turn navigation, set the <code>RouteOptions.includesSpokenInstructions</code> option and use the <code>instructionsSpokenAlongStep</code> property. If you need customized instructions, you can construct them yourself from the step’s other properties or use <a href="https://github.com/Project-OSRM/osrm-text-instructions.swift/">OSRM Text Instructions</a>.
/// note:
/// If you use MapboxDirections.swift with the Mapbox Directions API, this property is formatted and localized for display to the user. If you use OSRM directly, this property contains a basic string that only includes the maneuver type and direction. Use <a href="https://github.com/Project-OSRM/osrm-text-instructions.swift/">OSRM Text Instructions</a> to construct a complete, localized instruction string for display.
@property (nonatomic, readonly, copy) NSString * _Nonnull instructions;
/// Instructions about the next step’s maneuver, optimized for speech synthesis.
/// As the user traverses this step, you can give them advance notice of the upcoming maneuver by reading aloud each item in this array in order as the user reaches the specified distances along this step. The text of the spoken instructions refers to the details in the next step, but the distances are measured from the beginning of this step.
/// This property is non-<code>nil</code> if the <code>RouteOptions.includesSpokenInstructions</code> option is set to <code>true</code>. For instructions designed for display, use the <code>instructions</code> property.
@property (nonatomic, readonly, copy) NSArray<MBSpokenInstruction *> * _Nullable instructionsSpokenAlongStep;
/// :nodoc:
/// Instructions about the next step’s maneuver, optimized for display in real time.
/// As the user traverses this step, you can give them advance notice of the upcoming maneuver by displaying each item in this array in order as the user reaches the specified distances along this step. The text and images of the visual instructions refer to the details in the next step, but the distances are measured from the beginning of this step.
/// This property is non-<code>nil</code> if the <code>RouteOptions.includesVisualInstructions</code> option is set to <code>true</code>. For instructions designed for speech synthesis, use the <code>instructionsSpokenAlongStep</code> property. For instructions designed for display in a static list, use the <code>instructions</code> property.
@property (nonatomic, readonly, copy) NSArray<MBVisualInstruction *> * _Nullable instructionsDisplayedAlongStep;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// The type of maneuver required for beginning this step.
@property (nonatomic, readonly) enum MBManeuverType maneuverType;
/// Additional directional information to clarify the maneuver type.
@property (nonatomic, readonly) enum MBManeuverDirection maneuverDirection;
/// The location of the maneuver at the beginning of this step.
@property (nonatomic, readonly) CLLocationCoordinate2D maneuverLocation;
/// Any <a href="https://en.wikipedia.org/wiki/Exit_number">exit numbers</a> assigned to the highway exit at the maneuver.
/// This property is only set when the <code>maneuverType</code> is <code>ManeuverType.takeOffRamp</code>. For the number of exits from the previous maneuver, regardless of the highway’s exit numbering scheme, use the <code>exitIndex</code> property. For the route reference codes associated with the connecting road, use the <code>destinationCodes</code> property. For the names associated with a roundabout exit, use the <code>exitNames</code> property.
/// An exit number is an alphanumeric identifier posted at or ahead of a highway off-ramp. Exit numbers may increase or decrease sequentially along a road, or they may correspond to distances from either end of the road. An alphabetic suffix may appear when multiple exits are located in the same interchange. If multiple exits are <a href="https://en.wikipedia.org/wiki/Local-express_lanes#Example_of_cloverleaf_interchanges">combined into a single exit</a>, the step may have multiple exit codes.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable exitCodes;
/// The names of the roundabout exit.
/// This property is only set for roundabout (traffic circle or rotary) maneuvers. For the signposted names associated with a highway exit, use the <code>destinations</code> property. For the signposted exit numbers, use the <code>exitCodes</code> property.
/// If you display a name to the user, you may need to abbreviate common words like “East” or “Boulevard” to ensure that it fits in the allotted space.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable exitNames;
/// A phonetic or phonemic transcription indicating how to pronounce the names in the <code>exitNames</code> property.
/// This property is only set for roundabout (traffic circle or rotary) maneuvers.
/// The transcription is written in the <a href="https://en.wikipedia.org/wiki/International_Phonetic_Alphabet">International Phonetic Alphabet</a>.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable phoneticExitNames;
/// The step’s distance, measured in meters.
/// The value of this property accounts for the distance that the user must travel to go from this step’s maneuver location to the next step’s maneuver location. It is not the sum of the direct distances between the route’s waypoints, nor should you assume that the user would travel along this distance at a fixed speed.
@property (nonatomic, readonly) CLLocationDistance distance;
/// The step’s expected travel time, measured in seconds.
/// The value of this property reflects the time it takes to go from this step’s maneuver location to the next step’s maneuver location. If the route was calculated using the <code>MBDirectionsProfileIdentifierAutomobileAvoidingTraffic</code> profile, this property reflects current traffic conditions at the time of the request, not necessarily the traffic conditions at the time the user would begin this step. For other profiles, this property reflects travel time under ideal conditions and does not account for traffic congestion. If the step makes use of a ferry or train, the actual travel time may additionally be subject to the schedules of those services.
/// Do not assume that the user would travel along the step at a fixed speed. For the expected travel time on each individual segment along the leg, specify the <code>AttributeOptions.expectedTravelTime</code> option and use the <code>RouteLeg.expectedSegmentTravelTimes</code> property.
@property (nonatomic, readonly) NSTimeInterval expectedTravelTime;
/// The names of the road or path leading from this step’s maneuver to the next step’s maneuver.
/// If the maneuver is a turning maneuver, the step’s names are the name of the road or path onto which the user turns. If you display a name to the user, you may need to abbreviate common words like “East” or “Boulevard” to ensure that it fits in the allotted space.
/// If the maneuver is a roundabout maneuver, the outlet to take is named in the <code>exitNames</code> property; the <code>names</code> property is only set for large roundabouts that have their own names.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable names;
/// A phonetic or phonemic transcription indicating how to pronounce the names in the <code>names</code> property.
/// The transcription is written in the <a href="https://en.wikipedia.org/wiki/International_Phonetic_Alphabet">International Phonetic Alphabet</a>.
/// If the maneuver traverses a large, named roundabout, the <code>exitPronunciationHints</code> property contains a hint about how to pronounce the names of the outlet to take.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable phoneticNames;
/// Any route reference codes assigned to the road or path leading from this step’s maneuver to the next step’s maneuver.
/// A route reference code commonly consists of an alphabetic network code, a space or hyphen, and a route number. You should not assume that the network code is globally unique: for example, a network code of “NH” may indicate a “National Highway” or “New Hampshire”. Moreover, a route number may not even uniquely identify a route within a given network.
/// If a highway ramp is part of a numbered route, its reference code is contained in this property. On the other hand, guide signage for a highway ramp usually indicates route reference codes of the adjoining road; use the <code>destinationCodes</code> property for those route reference codes.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable codes;
/// The mode of transportation used for the step.
/// This step may use a different mode of transportation than the overall route.
@property (nonatomic, readonly) enum MBTransportType transportType;
/// Any route reference codes that appear on guide signage for the road leading from this step’s maneuver to the next step’s maneuver.
/// This property is typically available in steps leading to or from a freeway or expressway. This property contains route reference codes associated with a road later in the route. If a highway ramp is itself part of a numbered route, its reference code is contained in the <code>codes</code> property. For the signposted exit numbers associated with a highway exit, use the <code>exitCodes</code> property.
/// A route reference code commonly consists of an alphabetic network code, a space or hyphen, and a route number. You should not assume that the network code is globally unique: for example, a network code of “NH” may indicate a “National Highway” or “New Hampshire”. Moreover, a route number may not even uniquely identify a route within a given network. A destination code for a divided road is often suffixed with the cardinal direction of travel, for example “I 80 East”.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable destinationCodes;
/// Destinations, such as <a href="https://en.wikipedia.org/wiki/Control_city">control cities</a>, that appear on guide signage for the road leading from this step’s maneuver to the next step’s maneuver.
/// This property is typically available in steps leading to or from a freeway or expressway.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable destinations;
/// An array of intersections along the step.
/// Each item in the array corresponds to a cross street, starting with the intersection at the maneuver location indicated by the coordinates property and continuing with each cross street along the step.
@property (nonatomic, readonly, copy) NSArray<MBIntersection *> * _Nullable intersections;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// An instruction about an upcoming <code>RouteStep</code>’s maneuver, optimized for speech synthesis.
/// The instruction is provided in two formats: plain text and text marked up according to the <a href="https://en.wikipedia.org/wiki/Speech_Synthesis_Markup_Language">Speech Synthesis Markup Language</a> (SSML). Use a speech synthesizer such as <code>AVSpeechSynthesizer</code> or Amazon Polly to read aloud the instruction.
/// The <code>distanceAlongStep</code> property is measured from the beginning of the step associated with this object. By contrast, the <code>text</code> and <code>ssmlText</code> properties refer to the details in the following step. It is also possible for the instruction to refer to two following steps simultaneously when needed for safe navigation.
SWIFT_CLASS_NAMED("SpokenInstruction")
@interface MBSpokenInstruction : NSObject <NSSecureCoding>
/// A distance along the associated <code>RouteStep</code> at which to read the instruction aloud.
/// The distance is measured in meters from the beginning of the associated step.
@property (nonatomic, readonly) CLLocationDistance distanceAlongStep;
/// A plain-text representation of the speech-optimized instruction.
/// This representation is appropriate for speech synthesizers that lack support for the <a href="https://en.wikipedia.org/wiki/Speech_Synthesis_Markup_Language">Speech Synthesis Markup Language</a> (SSML), such as <code>AVSpeechSynthesizer</code>. For speech synthesizers that support SSML, use the <code>ssmlText</code> property instead.
@property (nonatomic, readonly, copy) NSString * _Nonnull text;
/// A formatted representation of the speech-optimized instruction.
/// This representation is appropriate for speech synthesizers that support the <a href="https://en.wikipedia.org/wiki/Speech_Synthesis_Markup_Language">Speech Synthesis Markup Language</a> (SSML), such as <a href="https://aws.amazon.com/polly/">Amazon Polly</a>. Numbers and names are marked up to ensure correct pronunciation. For speech synthesizers that lack SSML support, use the <code>text</code> property instead.
@property (nonatomic, readonly, copy) NSString * _Nonnull ssmlText;
/// Initialize a <code>SpokenInstruction</code> from a dictionary.
- (nonnull instancetype)initWithJson:(NSDictionary<NSString *, id> * _Nonnull)json;
/// Initialize a <code>SpokenInstruction</code>.
/// \param distanceAlongStep A distance along the associated <code>RouteStep</code> at which to read the instruction aloud.
///
/// \param text A plain-text representation of the speech-optimized instruction.
///
/// \param ssmlText A formatted representation of the speech-optimized instruction.
///
- (nonnull instancetype)initWithDistanceAlongStep:(CLLocationDistance)distanceAlongStep text:(NSString * _Nonnull)text ssmlText:(NSString * _Nonnull)ssmlText OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL supportsSecureCoding;)
+ (BOOL)supportsSecureCoding SWIFT_WARN_UNUSED_RESULT;
+ (void)setSupportsSecureCoding:(BOOL)value;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

@class CLHeading;

/// A <code>Waypoint</code> object indicates a location along a route. It may be the route’s origin or destination, or it may be another location that the route visits. A waypoint object indicates the location’s geographic location along with other optional information, such as a name or the user’s direction approaching the waypoint. You create a <code>RouteOptions</code> object using waypoint objects and also receive waypoint objects in the completion handler of the <code>Directions.calculate(_:completionHandler:)</code> method.
SWIFT_CLASS_NAMED("Waypoint")
@interface MBWaypoint : NSObject <NSCopying, NSSecureCoding>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL supportsSecureCoding;)
+ (BOOL)supportsSecureCoding SWIFT_WARN_UNUSED_RESULT;
/// Initializes a new waypoint object with the given geographic coordinate and an optional accuracy and name.
/// \param coordinate The geographic coordinate of the waypoint.
///
/// \param coordinateAccuracy The maximum distance away from the waypoint that the route may come and still be considered viable. This parameter is measured in meters. A negative value means the route may be an indefinite number of meters away from the route and still be considered viable.
/// It is recommended that the value of this parameter be greater than the <code>horizontalAccuracy</code> property of a <code>CLLocation</code> object obtained from a <code>CLLocationManager</code> object. There is a high likelihood that the user may be located some distance away from a navigable road, for instance if the user is currently on a driveway or inside a building.
///
/// \param name The name of the waypoint. This parameter does not affect the route but may help you to distinguish one waypoint from another.
///
- (nonnull instancetype)initWithCoordinate:(CLLocationCoordinate2D)coordinate coordinateAccuracy:(CLLocationAccuracy)coordinateAccuracy name:(NSString * _Nullable)name OBJC_DESIGNATED_INITIALIZER;
/// Initializes a new waypoint object with the given <code>CLLocation</code> object and an optional <code>CLHeading</code> object and name.
/// note:
/// This initializer is intended for <code>CLLocation</code> objects created using the <code>CLLocation.init(latitude:longitude:)</code> initializer. If you intend to use a <code>CLLocation</code> object obtained from a <code>CLLocationManager</code> object, consider increasing the <code>horizontalAccuracy</code> or set it to a negative value to avoid overfitting, since the <code>Waypoint</code> class’s <code>coordinateAccuracy</code> property represents the maximum allowed deviation from the waypoint. There is a high likelihood that the user may be located some distance away from a navigable road, for instance if the user is currently on a driveway of inside a building.
/// \param location A <code>CLLocation</code> object representing the waypoint’s location. This initializer respects the <code>CLLocation</code> class’s <code>coordinate</code> and <code>horizontalAccuracy</code> properties, converting them into the <code>coordinate</code> and <code>coordinateAccuracy</code> properties, respectively.
///
/// \param heading A <code>CLHeading</code> object representing the direction from which the route must approach the waypoint in order to be considered viable. This initializer respects the <code>CLHeading</code> class’s <code>trueHeading</code> property or <code>magneticHeading</code> property, converting it into the <code>headingAccuracy</code> property.
///
/// \param name The name of the waypoint. This parameter does not affect the route but may help you to distinguish one waypoint from another.
///
- (nonnull instancetype)initWithLocation:(CLLocation * _Nonnull)location heading:(CLHeading * _Nullable)heading name:(NSString * _Nullable)name OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
/// The geographic coordinate of the waypoint.
@property (nonatomic, readonly) CLLocationCoordinate2D coordinate;
/// The radius of uncertainty for the waypoint, measured in meters.
/// For a route to be considered viable, it must enter this waypoint’s circle of uncertainty. The <code>coordinate</code> property identifies the center of the circle, while this property indicates the circle’s radius. If the value of this property is negative, a route is considered viable regardless of whether it enters this waypoint’s circle of uncertainty, subject to an undefined maximum distance.
/// By default, the value of this property is a negative number.
@property (nonatomic) CLLocationAccuracy coordinateAccuracy;
/// The direction from which a route must approach this waypoint in order to be considered viable.
/// This property is measured in degrees clockwise from true north. A value of 0 degrees means due north, 90 degrees means due east, 180 degrees means due south, and so on. If the value of this property is negative, a route is considered viable regardless of the direction from which it approaches this waypoint.
/// If this waypoint is the first waypoint (the source waypoint), the route must start out by heading in the direction specified by this property. You should always set the <code>headingAccuracy</code> property in conjunction with this property. If the <code>headingAccuracy</code> property is set to a negative value, this property is ignored.
/// For driving directions, this property can be useful for avoiding a route that begins by going in the direction opposite the current direction of travel. For example, if you know the user is moving eastwardly and the first waypoint is the user’s current location, specifying a heading of 90 degrees and a heading accuracy of 90 degrees for the first waypoint avoids a route that begins with a “head west” instruction.
/// You should be certain that the user is in motion before specifying a heading and heading accuracy; otherwise, you may be unnecessarily filtering out the best route. For example, suppose the user is sitting in a car parked in a driveway, facing due north, with the garage in front and the street to the rear. In that case, specifying a heading of 0 degrees and a heading accuracy of 90 degrees may result in a route that begins on the back alley or, worse, no route at all. For this reason, it is recommended that you only specify a heading and heading accuracy when automatically recalculating directions due to the user deviating from the route.
/// By default, the value of this property is a negative number, meaning that a route is considered viable regardless of the direction of approach.
@property (nonatomic) CLLocationDirection heading;
/// The maximum amount, in degrees, by which a route’s approach to a waypoint may differ from <code>heading</code> in either direction in order to be considered viable.
/// A value of 0 degrees means that the approach must match the specified <code>heading</code> exactly – an unlikely scenario. A value of 180 degrees or more means that the approach may be as much as 180 degrees in either direction from the specified <code>heading</code>, effectively allowing a candidate route to approach the waypoint from any direction.
/// If you set the <code>heading</code> property, you should set this property to a value such as 90 degrees, to avoid filtering out routes whose approaches differ only slightly from the specified <code>heading</code>. Otherwise, if the <code>heading</code> property is set to a negative value, this property is ignored.
/// By default, the value of this property is a negative number, meaning that a route is considered viable regardless of the direction of approach.
@property (nonatomic) CLLocationDirection headingAccuracy;
/// The name of the waypoint.
/// This parameter does not affect the route, but you can set the name of a waypoint you pass into a <code>RouteOptions</code> object to help you distinguish one waypoint from another in the array of waypoints passed into the completion handler of the <code>Directions.calculate(_:completionHandler:)</code> method.
@property (nonatomic, copy) NSString * _Nullable name;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// A <code>Tracepoint</code> represents a location matched to the road network.
SWIFT_CLASS_NAMED("Tracepoint")
@interface MBTracepoint : MBWaypoint
/// Number of probable alternative matchings for this tracepoint. A value of zero indicates that this point was matched unambiguously.
@property (nonatomic) NSInteger alternateCount;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL supportsSecureCoding;)
+ (BOOL)supportsSecureCoding SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithCoordinate:(CLLocationCoordinate2D)coordinate coordinateAccuracy:(CLLocationAccuracy)coordinateAccuracy name:(NSString * _Nullable)name SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithLocation:(CLLocation * _Nonnull)location heading:(CLHeading * _Nullable)heading name:(NSString * _Nullable)name SWIFT_UNAVAILABLE;
@end

/// A <code>TransportType</code> specifies the mode of transportation used for part of a route.
typedef SWIFT_ENUM_NAMED(NSInteger, MBTransportType, "TransportType", closed) {
/// The step does not have a particular transport type associated with it.
/// This transport type is used as a workaround for bridging to Objective-C which does not support nullable enumeration-typed values.
  MBTransportTypeNone = 0,
/// The route requires the user to drive or ride a car, truck, or motorcycle.
/// This is the usual transport type when the <code>profileIdentifier</code> is <code>MBDirectionsProfileIdentifierAutomobile</code> or <code>MBDirectionsProfileIdentifierAutomobileAvoidingTraffic</code>.
  MBTransportTypeAutomobile = 1,
/// The route requires the user to board a ferry.
/// The user should verify that the ferry is in operation. For driving and cycling directions, the user should also verify that his or her vehicle is permitted onboard the ferry.
  MBTransportTypeFerry = 2,
/// The route requires the user to cross a movable bridge.
/// The user may need to wait for the movable bridge to become passable before continuing.
  MBTransportTypeMovableBridge = 3,
/// The route becomes impassable at this point.
/// You should not encounter this transport type under normal circumstances.
  MBTransportTypeInaccessible = 4,
/// The route requires the user to walk.
/// This is the usual transport type when the <code>profileIdentifier</code> is <code>MBDirectionsProfileIdentifierWalking</code>. For cycling directions, this value indicates that the user is expected to dismount.
  MBTransportTypeWalking = 5,
/// The route requires the user to ride a bicycle.
/// This is the usual transport type when the <code>profileIdentifier</code> is <code>MBDirectionsProfileIdentifierCycling</code>.
  MBTransportTypeCycling = 6,
/// The route requires the user to board a train.
/// The user should consult the train’s timetable. For cycling directions, the user should also verify that bicycles are permitted onboard the train.
  MBTransportTypeTrain = 7,
};

@class MBVisualInstructionComponent;

/// :nodoc:
/// Encompasses all information necessary for creating a visual cue about a given <code>RouteStep</code>.
SWIFT_CLASS_NAMED("VisualInstruction")
@interface MBVisualInstruction : NSObject <NSSecureCoding>
/// :nodoc:
/// Distance in meters from the beginning of the step at which the visual instruction should be visible.
@property (nonatomic, readonly) CLLocationDistance distanceAlongStep;
/// :nodoc:
/// A plain text representation of <code>primaryTextComponents</code>.
@property (nonatomic, readonly, copy) NSString * _Nonnull primaryText;
/// :nodoc:
/// Most important visual content to convey to the user about the <code>RouteStep</code>.
/// This is the structured representation of <code>primaryText</code>.
@property (nonatomic, readonly, copy) NSArray<MBVisualInstructionComponent *> * _Nonnull primaryTextComponents;
/// :nodoc:
/// A plain text representation of <code>secondaryTextComponents</code>.
@property (nonatomic, readonly, copy) NSString * _Nullable secondaryText;
/// :nodoc:
/// Ancillary visual information about the <code>RouteStep</code>.
/// This is the structured representation of <code>secondaryText</code>.
@property (nonatomic, readonly, copy) NSArray<MBVisualInstructionComponent *> * _Nullable secondaryTextComponents;
/// :nodoc:
/// Indicates what side of a bidirectional road the driver must be driving on. Also referred to as the rule of the road.
@property (nonatomic) enum MBDrivingSide drivingSide;
/// :nodoc:
/// Initialize a <code>VisualInstruction</code> from a dictionary given a <code>DrivingSide</code>.
- (nonnull instancetype)initWithJson:(NSDictionary<NSString *, id> * _Nonnull)json drivingSide:(enum MBDrivingSide)drivingSide;
/// :nodoc:
/// Initialize a <code>VisualInstruction</code>.
- (nonnull instancetype)initWithDistanceAlongStep:(CLLocationDistance)distanceAlongStep primaryText:(NSString * _Nonnull)primaryText primaryTextComponents:(NSArray<MBVisualInstructionComponent *> * _Nonnull)primaryTextComponents secondaryText:(NSString * _Nullable)secondaryText secondaryTextComponents:(NSArray<MBVisualInstructionComponent *> * _Nullable)secondaryTextComponents drivingSide:(enum MBDrivingSide)drivingSide OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL supportsSecureCoding;)
+ (BOOL)supportsSecureCoding SWIFT_WARN_UNUSED_RESULT;
+ (void)setSupportsSecureCoding:(BOOL)value;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

enum MBVisualInstructionComponentType : NSInteger;

/// :nodoc:
/// A component of a <code>VisualInstruction</code> that represents a single run of similarly formatted text or an image with a textual fallback representation.
SWIFT_CLASS_NAMED("VisualInstructionComponent")
@interface MBVisualInstructionComponent : NSObject <NSSecureCoding>
/// :nodoc:
/// The plain text representation of this component.
/// Use this property if <code>imageURLs</code> is an empty dictionary or if the URLs contained in that property are not yet available.
@property (nonatomic, readonly, copy) NSString * _Nullable text;
/// :nodoc:
/// The URL to an image representation of this component.
/// The URL refers to an image that uses the device’s native screen scale.
@property (nonatomic, copy) NSURL * _Nullable imageURL;
/// :nodoc:
/// The type of visual instruction component. You can display the component differently depending on its type.
@property (nonatomic) enum MBVisualInstructionComponentType type;
/// :nodoc:
/// The maneuver type for the <code>VisualInstruction</code>.
@property (nonatomic) enum MBManeuverType maneuverType;
/// :nodoc:
/// The modifier type for the <code>VisualInstruction</code>.
@property (nonatomic) enum MBManeuverDirection maneuverDirection;
/// An abbreviated version of the text for a given component.
@property (nonatomic, copy) NSString * _Nullable abbreviation;
/// The priority in which the component should be abbreviated. Lower numbers should be abbreviated first.
@property (nonatomic) NSInteger abbreviationPriority;
/// :nodoc:
/// Initialize A <code>VisualInstructionComponent</code>.
- (nonnull instancetype)initWithManeuverType:(enum MBManeuverType)maneuverType maneuverDirection:(enum MBManeuverDirection)maneuverDirection json:(NSDictionary<NSString *, id> * _Nonnull)json;
/// :nodoc:
/// Initialize A <code>VisualInstructionComponent</code>.
- (nonnull instancetype)initWithType:(enum MBVisualInstructionComponentType)type text:(NSString * _Nullable)text imageURL:(NSURL * _Nullable)imageURL maneuverType:(enum MBManeuverType)maneuverType maneuverDirection:(enum MBManeuverDirection)maneuverDirection abbreviation:(NSString * _Nullable)abbreviation abbreviationPriority:(NSInteger)abbreviationPriority OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL supportsSecureCoding;)
+ (BOOL)supportsSecureCoding SWIFT_WARN_UNUSED_RESULT;
+ (void)setSupportsSecureCoding:(BOOL)value;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

/// <code>VisualInstructionComponentType</code> describes the type of <code>VisualInstructionComponent</code>.
typedef SWIFT_ENUM_NAMED(NSInteger, MBVisualInstructionComponentType, "VisualInstructionComponentType", closed) {
/// The component separates two other destination components.
/// If the two adjacent components are both displayed as images, you can hide this delimiter component.
  MBVisualInstructionComponentTypeDelimiter = 0,
/// The component bears the name of a place or street.
  MBVisualInstructionComponentTypeText = 1,
/// Component contains an image that should be rendered.
  MBVisualInstructionComponentTypeImage = 2,
/// The compoment contains the localized word for “exit”.
/// This component may appear before or after an <code>.exitNumber</code> component, depending on the language.
  MBVisualInstructionComponentTypeExit = 3,
/// A component contains an exit number.
  MBVisualInstructionComponentTypeExitCode = 4,
};




#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#endif

#endif
