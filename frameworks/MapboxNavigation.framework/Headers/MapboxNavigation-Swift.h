// Generated by Apple Swift version 4.1 (swiftlang-902.0.48 clang-902.0.37.1)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR __attribute__((enum_extensibility(open)))
# else
#  define SWIFT_ENUM_ATTR
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
@import UIKit;
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import Mapbox;
@import AVFoundation;
@import CoreLocation;
@import MapboxCoreNavigation;
@import MapboxDirections;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="MapboxNavigation",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class UIColor;
@class UIFont;
@class NSCoder;

/// :nodoc:
SWIFT_CLASS_NAMED("StylableLabel")
@interface MBStylableLabel : UILabel
@property (nonatomic, strong) UIColor * _Nonnull normalTextColor;
@property (nonatomic, strong) UIFont * _Nonnull normalFont;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// :nodoc:
SWIFT_CLASS_NAMED("ArrivalTimeLabel")
@interface MBArrivalTimeLabel : MBStylableLabel
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// :nodoc:
SWIFT_CLASS("_TtC16MapboxNavigation26BaseInstructionsBannerView")
@interface BaseInstructionsBannerView : UIControl
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)prepareForInterfaceBuilder;
@end




/// A cache consists of both in-memory and on-disk components, both of which can be reset.
SWIFT_PROTOCOL_NAMED("BimodalCache")
@protocol MBBimodalCache
- (void)clearMemory;
- (void)clearDiskWithCompletion:(void (^ _Nullable)(void))completion;
@end


/// A cache which supports storing data
SWIFT_PROTOCOL_NAMED("BimodalDataCache")
@protocol MBBimodalDataCache <MBBimodalCache>
- (void)store:(NSData * _Nonnull)data forKey:(NSString * _Nonnull)key toDisk:(BOOL)toDisk completion:(void (^ _Nullable)(void))completionBlock;
- (NSData * _Nullable)dataForKey:(NSString * _Nullable)forKey SWIFT_WARN_UNUSED_RESULT;
@end

@class UIImage;

/// A cache which supports storing images
SWIFT_PROTOCOL_NAMED("BimodalImageCache")
@protocol MBBimodalImageCache <MBBimodalCache>
- (void)store:(UIImage * _Nonnull)image forKey:(NSString * _Nonnull)key toDisk:(BOOL)toDisk completion:(void (^ _Nullable)(void))completionBlock;
- (UIImage * _Nullable)imageForKey:(NSString * _Nullable)forKey SWIFT_WARN_UNUSED_RESULT;
@end


/// :nodoc:
SWIFT_CLASS_NAMED("BottomBannerContentView")
@interface MBBottomBannerContentView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// :nodoc:
SWIFT_CLASS_NAMED("BottomBannerView")
@interface MBBottomBannerView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)prepareForInterfaceBuilder;
@end

@class UITraitCollection;

@interface MBBottomBannerView (SWIFT_EXTENSION(MapboxNavigation))
- (void)traitCollectionDidChange:(UITraitCollection * _Nullable)previousTraitCollection;
@end




/// :nodoc:
SWIFT_CLASS_NAMED("StylableButton")
@interface MBStylableButton : UIButton
@property (nonatomic, strong) UIFont * _Nonnull textFont;
@property (nonatomic, strong) UIColor * _Nonnull textColor;
@property (nonatomic, strong) UIColor * _Nonnull borderColor;
@property (nonatomic) CGFloat borderWidth;
@property (nonatomic) CGFloat cornerRadius;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// :nodoc:
/// <code>MBButton</code> sets the tintColor according to the style.
SWIFT_CLASS_NAMED("Button")
@interface MBButton : MBStylableButton
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// :nodoc:
SWIFT_CLASS_NAMED("CancelButton")
@interface MBCancelButton : MBButton
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// :nodoc:
SWIFT_CLASS_NAMED("LineView")
@interface MBLineView : UIView
@property (nonatomic, strong) UIColor * _Nonnull lineColor;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// :nodoc:
SWIFT_CLASS_NAMED("DashedLineView")
@interface MBDashedLineView : MBLineView
@property (nonatomic) CGFloat dashedLength;
@property (nonatomic) CGFloat dashedGap;
- (void)layoutSubviews;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("DataCache")
@interface MBDataCache : NSObject <MBBimodalDataCache>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)store:(NSData * _Nonnull)data forKey:(NSString * _Nonnull)key toDisk:(BOOL)toDisk completion:(void (^ _Nullable)(void))completion;
- (NSData * _Nullable)dataForKey:(NSString * _Nullable)key SWIFT_WARN_UNUSED_RESULT;
- (void)clearMemory;
- (void)clearDiskWithCompletion:(void (^ _Nullable)(void))completion;
@end



enum MBStyleType : NSInteger;

/// <code>Style</code> is a convenient wrapper for styling the appearance of various interface components throughout the Navigation UI.
/// Styles are applied globally using <code>UIAppearance</code>. You should call <code>Style.apply()</code> to apply the style to the <code>NavigationViewController</code>.
SWIFT_CLASS_NAMED("Style")
@interface MBStyle : NSObject
/// General styling
/// Sets the tint color for guidance arrow, highlighted text, progress bar and more.
@property (nonatomic, strong) UIColor * _Nullable tintColor;
/// Sets the font family for all labels.
@property (nonatomic, copy) NSString * _Nullable fontFamily;
/// Describes the situations in which the style should be used. By default, the style will be used during the daytime.
@property (nonatomic) enum MBStyleType styleType;
/// Map style to be used for the style.
@property (nonatomic, copy) NSURL * _Nonnull mapStyleURL;
/// Applies the style for all changed properties.
- (void)apply;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// <code>DefaultStyle</code> is default style for Mapbox Navigation SDK.
SWIFT_CLASS_NAMED("DayStyle")
@interface MBDayStyle : MBStyle
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)apply;
@end


/// :nodoc:
SWIFT_CLASS_NAMED("DismissButton")
@interface MBDismissButton : MBButton
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// :nodoc:
SWIFT_CLASS_NAMED("DistanceLabel")
@interface MBDistanceLabel : MBStylableLabel
@property (nonatomic, strong) UIColor * _Nonnull valueTextColor;
@property (nonatomic, strong) UIColor * _Nonnull unitTextColor;
@property (nonatomic, strong) UIFont * _Nonnull valueFont;
@property (nonatomic, strong) UIFont * _Nonnull unitFont;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// :nodoc:
SWIFT_CLASS_NAMED("DistanceRemainingLabel")
@interface MBDistanceRemainingLabel : MBStylableLabel
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// :nodoc:
SWIFT_CLASS_NAMED("EndOfRouteButton")
@interface MBEndOfRouteButton : MBStylableButton
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class NSTextContainer;

/// :nodoc:
SWIFT_CLASS_NAMED("StylableTextView")
@interface MBStylableTextView : UITextView
@property (nonatomic, strong) UIColor * _Nonnull normalTextColor;
- (nonnull instancetype)initWithFrame:(CGRect)frame textContainer:(NSTextContainer * _Nullable)textContainer OBJC_DESIGNATED_INITIALIZER SWIFT_AVAILABILITY(ios,introduced=7.0);
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// :nodoc:
SWIFT_CLASS_NAMED("EndOfRouteCommentView")
@interface MBEndOfRouteCommentView : MBStylableTextView
- (nonnull instancetype)initWithFrame:(CGRect)frame textContainer:(NSTextContainer * _Nullable)textContainer OBJC_DESIGNATED_INITIALIZER SWIFT_AVAILABILITY(ios,introduced=7.0);
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// :nodoc:
SWIFT_CLASS_NAMED("EndOfRouteContentView")
@interface MBEndOfRouteContentView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// :nodoc:
SWIFT_CLASS_NAMED("EndOfRouteStaticLabel")
@interface MBEndOfRouteStaticLabel : MBStylableLabel
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// :nodoc:
SWIFT_CLASS_NAMED("EndOfRouteTitleLabel")
@interface MBEndOfRouteTitleLabel : MBStylableLabel
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// :nodoc:
SWIFT_CLASS_NAMED("FloatingButton")
@interface MBFloatingButton : MBButton
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// :nodoc:
/// <code>HighlightedButton</code> sets the button’s titleColor for normal control state according to the style in addition to the styling behavior inherited from
/// <code>Button</code>.
SWIFT_CLASS_NAMED("HighlightedButton")
@interface MBHighlightedButton : MBButton
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// :nodoc:
SWIFT_CLASS_NAMED("InstructionLabel")
@interface MBInstructionLabel : MBStylableLabel
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// :nodoc:
SWIFT_CLASS_NAMED("InstructionsBannerContentView")
@interface MBInstructionsBannerContentView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// :nodoc:
SWIFT_CLASS_NAMED("InstructionsBannerView")
@interface MBInstructionsBannerView : BaseInstructionsBannerView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// :nodoc:
SWIFT_CLASS_NAMED("LaneView")
@interface MBLaneView : UIView
@property (nonatomic, readonly) CGSize intrinsicContentSize;
@property (nonatomic, strong) UIColor * _Nonnull primaryColor;
@property (nonatomic, strong) UIColor * _Nonnull secondaryColor;
- (void)drawRect:(CGRect)rect;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("LanesStyleKit")
@interface MBLanesStyleKit : NSObject
/// / Drawing Methods
+ (void)drawLane_straight_rightWithPrimaryColor:(UIColor * _Nonnull)primaryColor;
+ (void)drawLane_straight_onlyWithPrimaryColor:(UIColor * _Nonnull)primaryColor secondaryColor:(UIColor * _Nonnull)secondaryColor;
+ (void)drawLane_right_hWithPrimaryColor:(UIColor * _Nonnull)primaryColor;
+ (void)drawLane_right_onlyWithPrimaryColor:(UIColor * _Nonnull)primaryColor secondaryColor:(UIColor * _Nonnull)secondaryColor;
+ (void)drawLane_straightWithPrimaryColor:(UIColor * _Nonnull)primaryColor;
+ (void)drawLane_uturnWithPrimaryColor:(UIColor * _Nonnull)primaryColor;
+ (void)drawLane_slight_rightWithPrimaryColor:(UIColor * _Nonnull)primaryColor scale:(CGFloat)scale;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// :nodoc:
SWIFT_CLASS_NAMED("LanesView")
@interface MBLanesView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)prepareForInterfaceBuilder;
@end







/// :nodoc:
SWIFT_CLASS_NAMED("ManeuverContainerView")
@interface MBManeuverContainerView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class MBVisualInstruction;

/// :nodoc:
SWIFT_CLASS_NAMED("ManeuverView")
@interface MBManeuverView : UIView
@property (nonatomic, strong) UIColor * _Nonnull primaryColor;
@property (nonatomic, strong) UIColor * _Nonnull secondaryColor;
@property (nonatomic) BOOL isStart;
@property (nonatomic) BOOL isEnd;
@property (nonatomic, strong) MBVisualInstruction * _Nullable visualInstruction;
- (void)drawRect:(CGRect)rect;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

enum ManeuversStyleKitResizingBehavior : NSInteger;

SWIFT_CLASS_NAMED("ManeuversStyleKit")
@interface MBManeuversStyleKit : NSObject
/// / Drawing Methods
+ (void)drawArrow180rightWithFrame:(CGRect)targetFrame resizing:(enum ManeuversStyleKitResizingBehavior)resizing primaryColor:(UIColor * _Nonnull)primaryColor size:(CGSize)size;
+ (void)drawArrowrightWithFrame:(CGRect)targetFrame resizing:(enum ManeuversStyleKitResizingBehavior)resizing primaryColor:(UIColor * _Nonnull)primaryColor size:(CGSize)size;
+ (void)drawArrowslightrightWithFrame:(CGRect)targetFrame resizing:(enum ManeuversStyleKitResizingBehavior)resizing primaryColor:(UIColor * _Nonnull)primaryColor size:(CGSize)size;
+ (void)drawArrowstraightWithFrame:(CGRect)targetFrame resizing:(enum ManeuversStyleKitResizingBehavior)resizing primaryColor:(UIColor * _Nonnull)primaryColor size:(CGSize)size;
+ (void)drawArrowsharprightWithFrame:(CGRect)targetFrame resizing:(enum ManeuversStyleKitResizingBehavior)resizing primaryColor:(UIColor * _Nonnull)primaryColor size:(CGSize)size;
+ (void)drawArriveWithFrame:(CGRect)targetFrame resizing:(enum ManeuversStyleKitResizingBehavior)resizing primaryColor:(UIColor * _Nonnull)primaryColor size:(CGSize)size;
+ (void)drawStartingWithFrame:(CGRect)targetFrame resizing:(enum ManeuversStyleKitResizingBehavior)resizing primaryColor:(UIColor * _Nonnull)primaryColor size:(CGSize)size;
+ (void)drawDestinationWithFrame:(CGRect)targetFrame resizing:(enum ManeuversStyleKitResizingBehavior)resizing primaryColor:(UIColor * _Nonnull)primaryColor size:(CGSize)size;
+ (void)drawMergeWithFrame:(CGRect)targetFrame resizing:(enum ManeuversStyleKitResizingBehavior)resizing primaryColor:(UIColor * _Nonnull)primaryColor secondaryColor:(UIColor * _Nonnull)secondaryColor size:(CGSize)size;
+ (void)drawForkWithFrame:(CGRect)targetFrame resizing:(enum ManeuversStyleKitResizingBehavior)resizing primaryColor:(UIColor * _Nonnull)primaryColor secondaryColor:(UIColor * _Nonnull)secondaryColor size:(CGSize)size;
+ (void)drawOfframpWithFrame:(CGRect)targetFrame resizing:(enum ManeuversStyleKitResizingBehavior)resizing primaryColor:(UIColor * _Nonnull)primaryColor secondaryColor:(UIColor * _Nonnull)secondaryColor size:(CGSize)size;
+ (void)drawArriverightWithFrame:(CGRect)targetFrame resizing:(enum ManeuversStyleKitResizingBehavior)resizing primaryColor:(UIColor * _Nonnull)primaryColor size:(CGSize)size;
+ (void)drawRoundaboutWithFrame:(CGRect)targetFrame resizing:(enum ManeuversStyleKitResizingBehavior)resizing primaryColor:(UIColor * _Nonnull)primaryColor secondaryColor:(UIColor * _Nonnull)secondaryColor size:(CGSize)size roundabout_angle:(CGFloat)roundabout_angle roundabout_radius:(CGFloat)roundabout_radius;
+ (void)drawArriveright2WithFrame:(CGRect)targetFrame resizing:(enum ManeuversStyleKitResizingBehavior)resizing primaryColor:(UIColor * _Nonnull)primaryColor size:(CGSize)size;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, ManeuversStyleKitResizingBehavior, "ResizingBehavior") {
  ManeuversStyleKitResizingBehaviorAspectFit = 0,
/// The content is proportionally resized to fit into the target rectangle.
  ManeuversStyleKitResizingBehaviorAspectFill = 1,
/// The content is proportionally resized to completely fill the target rectangle.
  ManeuversStyleKitResizingBehaviorStretch = 2,
/// The content is stretched to match the entire target rectangle.
  ManeuversStyleKitResizingBehaviorCenter = 3,
};

@class AVAudioPlayer;
@class AVSpeechSynthesizer;
@class AVSpeechUtterance;
@class NSNotification;

/// The <code>RouteVoiceController</code> class provides voice guidance.
SWIFT_CLASS_NAMED("RouteVoiceController")
@interface MBRouteVoiceController : NSObject <AVAudioPlayerDelegate, AVSpeechSynthesizerDelegate>
/// A boolean value indicating whether instructions should be announced by voice or not.
@property (nonatomic) BOOL isEnabled;
/// Volume of announcements.
@property (nonatomic) float volume;
/// SSML option which controls at which speed Polly instructions are read.
@property (nonatomic) double instructionVoiceSpeedRate;
/// SSML option that specifies the voice loudness.
@property (nonatomic, copy) NSString * _Nonnull instructionVoiceVolume;
/// If true, a noise indicating the user is going to be rerouted will play prior to rerouting.
@property (nonatomic) BOOL playRerouteSound;
/// Sound to play prior to reroute. Inherits volume level from <code>volume</code>.
@property (nonatomic, strong) AVAudioPlayer * _Nonnull rerouteSoundPlayer;
/// Buffer time between announcements. After an announcement is given any announcement given within this <code>TimeInterval</code> will be suppressed.
@property (nonatomic) NSTimeInterval bufferBetweenAnnouncements;
/// Default initializer for <code>RouteVoiceController</code>.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)audioPlayerDidFinishPlaying:(AVAudioPlayer * _Nonnull)player successfully:(BOOL)flag;
- (void)speechSynthesizer:(AVSpeechSynthesizer * _Nonnull)synthesizer didFinishSpeechUtterance:(AVSpeechUtterance * _Nonnull)utterance;
- (void)didPassSpokenInstructionPointWithNotification:(NSNotification * _Nonnull)notification;
@end

@class MBSpeechSynthesizer;
@class MBSpokenInstruction;

/// <code>MapboxVoiceController</code> extends the default <code>RouteVoiceController</code> by providing a more robust speech synthesizer via the Mapbox Speech API. <code>RouteVoiceController</code> will be used as a fallback during poor network conditions.
SWIFT_CLASS_NAMED("MapboxVoiceController")
@interface MBMapboxVoiceController : MBRouteVoiceController
/// Number of seconds a request can wait before it is canceled and the default speech synthesizer speaks the instruction.
@property (nonatomic) NSTimeInterval timeoutIntervalForRequest;
/// Number of steps ahead of the current step to cache spoken instructions.
@property (nonatomic) NSInteger stepsAheadToCache;
- (nonnull instancetype)initWithSpeechClient:(MBSpeechSynthesizer * _Nonnull)speechClient dataCache:(id <MBBimodalDataCache> _Nonnull)dataCache OBJC_DESIGNATED_INITIALIZER;
- (void)didPassSpokenInstructionPointWithNotification:(NSNotification * _Nonnull)notification;
/// Speaks an instruction.
/// The cache is first checked to see if we have already downloaded the speech file. If not, the instruction is fetched and played. If there is an error anywhere along the way, the instruction will be spoken with the default speech synthesizer.
- (void)speak:(MBSpokenInstruction * _Nonnull)instruction;
/// Speaks an instruction with the built in speech synthesizer.
/// This method should be used in cases where <code>fetch(instruction:)</code> or <code>play(_:)</code> fails.
- (void)speakWithDefaultSpeechSynthesizer:(MBSpokenInstruction * _Nonnull)instruction error:(NSError * _Nullable)error;
/// Fetches and plays an instruction.
- (void)fetchAndSpeakWithInstruction:(MBSpokenInstruction * _Nonnull)instruction;
/// Caches an instruction in an in-memory cache.
- (void)downloadAndCacheSpokenInstructionWithInstruction:(MBSpokenInstruction * _Nonnull)instruction;
/// Plays an audio file.
- (void)play:(NSData * _Nonnull)data;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// :nodoc:
SWIFT_CLASS_NAMED("MarkerView")
@interface MBMarkerView : UIView
@property (nonatomic, strong) UIColor * _Nonnull innerColor;
@property (nonatomic, strong) UIColor * _Nonnull shadowColor;
@property (nonatomic, strong) UIColor * _Nonnull pinColor;
@property (nonatomic, strong) UIColor * _Nonnull strokeColor;
@property (nonatomic, readonly) CGSize intrinsicContentSize;
- (void)layoutSubviews;
- (void)drawRect:(CGRect)rect;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end





@class UIGestureRecognizer;
@class CLLocation;
@class MBRoute;

/// <code>NavigationMapView</code> is a subclass of <code>MGLMapView</code> with convenience functions for adding <code>Route</code> lines to a map.
SWIFT_CLASS_NAMED("NavigationMapView")
@interface MBNavigationMapView : MGLMapView <UIGestureRecognizerDelegate>
/// Returns the altitude that the map camera initally defaults to.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) CLLocationDistance defaultAltitude;)
+ (CLLocationDistance)defaultAltitude SWIFT_WARN_UNUSED_RESULT;
/// Returns the altitude the map conditionally zooms out to when user is on a motorway, and the maneuver length is sufficently long.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) CLLocationDistance zoomedOutMotorwayAltitude;)
+ (CLLocationDistance)zoomedOutMotorwayAltitude SWIFT_WARN_UNUSED_RESULT;
/// Returns the threshold for what the map considers a “long-enough” maneuver distance to trigger a zoom-out when the user enters a motorway.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) CLLocationDistance longManeuverDistance;)
+ (CLLocationDistance)longManeuverDistance SWIFT_WARN_UNUSED_RESULT;
/// Maximum distance the user can tap for a selection to be valid when selecting an alternate route.
@property (nonatomic) CGFloat tapGestureDistanceThreshold;
@property (nonatomic, strong) UIColor * _Nonnull trafficUnknownColor;
@property (nonatomic, strong) UIColor * _Nonnull trafficLowColor;
@property (nonatomic, strong) UIColor * _Nonnull trafficModerateColor;
@property (nonatomic, strong) UIColor * _Nonnull trafficHeavyColor;
@property (nonatomic, strong) UIColor * _Nonnull trafficSevereColor;
@property (nonatomic, strong) UIColor * _Nonnull routeCasingColor;
@property (nonatomic, strong) UIColor * _Nonnull routeAlternateColor;
@property (nonatomic) BOOL showsUserLocation;
/// A <code>UIView</code> used to indicate the user’s location and course on the map.
/// If the view conforms to <code>UserCourseView</code>, its <code>UserCourseView.update(location:pitch:direction:animated:)</code> method is frequently called to ensure that its visual appearance matches the map’s camera.
@property (nonatomic, strong) UIView * _Nullable userCourseView;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame styleURL:(NSURL * _Nullable)styleURL OBJC_DESIGNATED_INITIALIZER;
- (void)prepareForInterfaceBuilder;
- (void)layoutSubviews;
- (CGPoint)anchorPointForGesture:(UIGestureRecognizer * _Nonnull)gesture SWIFT_WARN_UNUSED_RESULT;
- (void)mapViewDidFinishRenderingFrameFullyRendered:(BOOL)fullyRendered;
- (void)updateCourseTrackingWithLocation:(CLLocation * _Nullable)location animated:(BOOL)animated;
/// Adds or updates both the route line and the route line casing
- (void)showRoutes:(NSArray<MBRoute *> * _Nonnull)routes legIndex:(NSInteger)legIndex;
/// Removes route line and route line casing from map
- (void)removeRoutes;
/// Adds the route waypoints to the map given the current leg index. Previous waypoints for completed legs will be omitted.
- (void)showWaypoints:(MBRoute * _Nonnull)route legIndex:(NSInteger)legIndex;
/// Removes all waypoints from the map.
- (void)removeWaypoints;
/// Shows the step arrow given the current <code>RouteProgress</code>.
- (void)addArrowWithRoute:(MBRoute * _Nonnull)route legIndex:(NSInteger)legIndex stepIndex:(NSInteger)stepIndex;
/// Removes the step arrow from the map.
- (void)removeArrow;
/// Attempts to localize road labels into the local language and other labels
/// into the system’s preferred language.
/// When this property is enabled, the style automatically modifies the <code>text</code>
/// property of any symbol style layer whose source is the
/// <a href="https://www.mapbox.com/vector-tiles/mapbox-streets-v7/#overview">Mapbox
/// Streets source</a>. On iOS, the user can set the system’s preferred
/// language in Settings, General Settings, Language & Region.
/// Unlike the <code>MGLStyle.localizesLabels</code> property, this method localizes road
/// labels into the local language, regardless of the system’s preferred
/// language, in an effort to match road signage. The turn banner always
/// displays road names and exit destinations in the local language, so you
/// should call this method in the
/// <code>MGLMapViewDelegate.mapView(_:didFinishLoading:)</code> method of any delegate of
/// a standalone <code>NavigationMapView</code>. The map view embedded in
/// <code>NavigationViewController</code> is localized automatically, so you do not need
/// to call this method on the value of <code>NavigationViewController.mapView</code>.
- (void)localizeLabels;
- (void)showVoiceInstructionsOnMapWithRoute:(MBRoute * _Nonnull)route;
/// Sets the camera directly over a series of coordinates.
- (void)setOverheadCameraViewFrom:(CLLocationCoordinate2D)userLocation along:(NSArray<NSValue *> * _Nonnull)coordinates for:(UIEdgeInsets)bounds;
@end


/// The <code>NavigationMapViewCourseTrackingDelegate</code> provides methods for responding to the <code>NavigationMapView</code> starting or stopping course tracking.
SWIFT_PROTOCOL_NAMED("NavigationMapViewCourseTrackingDelegate")
@protocol MBNavigationMapViewCourseTrackingDelegate
@optional
/// Tells the receiver that the map is now tracking the user course.
/// seealso:
/// NavigationMapView.tracksUserCourse
/// \param mapView The NavigationMapView.
///
- (void)navigationMapViewDidStartTrackingCourse:(MBNavigationMapView * _Nonnull)mapView;
/// Tells the receiver that <code>tracksUserCourse</code> was set to false, signifying that the map is no longer tracking the user course.
/// seealso:
/// NavigationMapView.tracksUserCourse
/// \param mapView The NavigationMapView.
///
- (void)navigationMapViewDidStopTrackingCourse:(MBNavigationMapView * _Nonnull)mapView;
@end

@class MGLSource;
@class MGLStyleLayer;
@class MBWaypoint;
@class MGLShape;
@protocol MGLAnnotation;
@class MGLAnnotationImage;
@class MGLAnnotationView;

/// The <code>NavigationMapViewDelegate</code> provides methods for configuring the NavigationMapView, as well as responding to events triggered by the NavigationMapView.
SWIFT_PROTOCOL_NAMED("NavigationMapViewDelegate")
@protocol MBNavigationMapViewDelegate
@optional
/// Asks the receiver to return an MGLStyleLayer for routes, given an identifier and source.
/// This method is invoked when the map view loads and any time routes are added.
/// \param mapView The NavigationMapView.
///
/// \param identifier The style identifier.
///
/// \param source The Layer source containing the route data that this method would style.
///
///
/// returns:
/// An MGLStyleLayer that the map applies to all routes.
- (MGLStyleLayer * _Nullable)navigationMapView:(MBNavigationMapView * _Nonnull)mapView routeStyleLayerWithIdentifier:(NSString * _Nonnull)identifier source:(MGLSource * _Nonnull)source SWIFT_WARN_UNUSED_RESULT;
/// Asks the receiver to return an MGLStyleLayer for waypoints, given an identifier and source.
/// This method is invoked when the map view loads and any time waypoints are added.
/// \param mapView The NavigationMapView.
///
/// \param identifier The style identifier.
///
/// \param source The Layer source containing the waypoint data that this method would style.
///
///
/// returns:
/// An MGLStyleLayer that the map applies to all waypoints.
- (MGLStyleLayer * _Nullable)navigationMapView:(MBNavigationMapView * _Nonnull)mapView waypointStyleLayerWithIdentifier:(NSString * _Nonnull)identifier source:(MGLSource * _Nonnull)source SWIFT_WARN_UNUSED_RESULT;
/// Asks the receiver to return an MGLStyleLayer for waypoint symbols, given an identifier and source.
/// This method is invoked when the map view loads and any time waypoints are added.
/// \param mapView The NavigationMapView.
///
/// \param identifier The style identifier.
///
/// \param source The Layer source containing the waypoint data that this method would style.
///
///
/// returns:
/// An MGLStyleLayer that the map applies to all waypoint symbols.
- (MGLStyleLayer * _Nullable)navigationMapView:(MBNavigationMapView * _Nonnull)mapView waypointSymbolStyleLayerWithIdentifier:(NSString * _Nonnull)identifier source:(MGLSource * _Nonnull)source SWIFT_WARN_UNUSED_RESULT;
/// Asks the receiver to return an MGLStyleLayer for route casings, given an identifier and source.
/// This method is invoked when the map view loads and anytime routes are added.
/// note:
/// Specify a casing to ensure good contrast between the route line and the underlying map layers.
/// \param mapView The NavigationMapView.
///
/// \param identifier The style identifier.
///
/// \param source The Layer source containing the route data that this method would style.
///
///
/// returns:
/// An MGLStyleLayer that the map applies to the route.
- (MGLStyleLayer * _Nullable)navigationMapView:(MBNavigationMapView * _Nonnull)mapView routeCasingStyleLayerWithIdentifier:(NSString * _Nonnull)identifier source:(MGLSource * _Nonnull)source SWIFT_WARN_UNUSED_RESULT;
/// Tells the receiver that the user has selected a route by interacting with the map view.
/// \param mapView The NavigationMapView.
///
/// \param route The route that was selected.
///
- (void)navigationMapView:(MBNavigationMapView * _Nonnull)mapView didSelectRoute:(MBRoute * _Nonnull)route;
/// Tells the receiver that a waypoint was selected.
/// \param mapView The NavigationMapView.
///
/// \param waypoint The waypoint that was selected.
///
- (void)navigationMapView:(MBNavigationMapView * _Nonnull)mapView didSelectWaypoint:(MBWaypoint * _Nonnull)waypoint;
/// Asks the receiver to return an MGLShape that describes the geometry of the route.
/// note:
/// The returned value represents the route in full detail. For example, individual <code>MGLPolyline</code> objects in an <code>MGLShapeCollectionFeature</code> object can represent traffic congestion segments. For improved performance, you should also implement <code>navigationMapView(_:simplifiedShapeDescribing:)</code>, which defines the overall route as a single feature.
/// \param mapView The NavigationMapView.
///
/// \param route The route that the sender is asking about.
///
///
/// returns:
/// Optionally, a <code>MGLShape</code> that defines the shape of the route, or <code>nil</code> to use default behavior.
- (MGLShape * _Nullable)navigationMapView:(MBNavigationMapView * _Nonnull)mapView shapeDescribingRoute:(MBRoute * _Nonnull)route SWIFT_WARN_UNUSED_RESULT;
/// Asks the receiver to return an MGLShape that describes the geometry of the route at lower zoomlevels.
/// note:
/// The returned value represents the simplfied route. It is designed to be used with `navigationMapView(_:shapeDescribing:), and if used without its parent method, can cause unexpected behavior.
/// \param mapView The NavigationMapView.
///
/// \param route The route that the sender is asking about.
///
///
/// returns:
/// Optionally, a <code>MGLShape</code> that defines the shape of the route at lower zoomlevels, or <code>nil</code> to use default behavior.
- (MGLShape * _Nullable)navigationMapView:(MBNavigationMapView * _Nonnull)mapView simplifiedShapeDescribingRoute:(MBRoute * _Nonnull)route SWIFT_WARN_UNUSED_RESULT;
/// Asks the receiver to return an MGLShape that describes the geometry of the waypoint.
/// \param mapView The NavigationMapView.
///
/// \param waypoints The waypoints to be displayed on the map.
///
///
/// returns:
/// Optionally, a <code>MGLShape</code> that defines the shape of the waypoint, or <code>nil</code> to use default behavior.
- (MGLShape * _Nullable)navigationMapView:(MBNavigationMapView * _Nonnull)mapView shapeDescribingWaypoints:(NSArray<MBWaypoint *> * _Nonnull)waypoints SWIFT_WARN_UNUSED_RESULT;
/// Asks the receiver to return an MGLAnnotationImage that describes the image used an annotation.
/// \param mapView The MGLMapView.
///
/// \param annotation The annotation to be styled.
///
///
/// returns:
/// Optionally, a <code>MGLAnnotationImage</code> that defines the image used for the annotation.
- (MGLAnnotationImage * _Nullable)navigationMapView:(MGLMapView * _Nonnull)mapView imageForAnnotation:(id <MGLAnnotation> _Nonnull)annotation SWIFT_WARN_UNUSED_RESULT;
/// Asks the receiver to return an MGLAnnotationView that describes the image used an annotation.
/// \param mapView The MGLMapView.
///
/// \param annotation The annotation to be styled.
///
///
/// returns:
/// Optionally, a <code>MGLAnnotationView</code> that defines the view used for the annotation.
- (MGLAnnotationView * _Nullable)navigationMapView:(MGLMapView * _Nonnull)mapView viewForAnnotation:(id <MGLAnnotation> _Nonnull)annotation SWIFT_WARN_UNUSED_RESULT;
/// Asks the receiver to return a CGPoint to serve as the anchor for the user icon.
/// important:
/// The return value should be returned in the normal UIKit coordinate-space, NOT CoreAnimation’s unit coordinate-space.
/// \param mapView The NavigationMapView.
///
///
/// returns:
/// A CGPoint (in regular coordinate-space) that represents the point on-screen where the user location icon should be drawn.
- (CGPoint)navigationMapViewUserAnchorPoint:(MBNavigationMapView * _Nonnull)mapView SWIFT_WARN_UNUSED_RESULT;
@end


/// A view that represents the root view of the MapboxNavigation drop-in UI.
/// <h2>Components</h2>
/// <ol>
///   <li>
///     InstructionsBannerView
///   </li>
///   <li>
///     InformationStackView
///   </li>
///   <li>
///     BottomBannerView
///   </li>
///   <li>
///     ResumeButton
///   </li>
///   <li>
///     WayNameLabel
///   </li>
///   <li>
///     FloatingStackView
///   </li>
///   <li>
///     NavigationMapView
///   </li>
/// </ol>
/// \code
/// +--------------------+
/// |         1          |
/// +--------------------+
/// |         2          |
/// +----------------+---+
/// |                |   |
/// |                | 6 |
/// |                |   |
/// |         7      +---+
/// |                    |
/// |                    |
/// |                    |
/// +------------+       |
/// |  4  ||  5  |       |
/// +------------+-------+
/// |         3          |
/// +--------------------+
///
/// \endcode
SWIFT_CLASS_NAMED("NavigationView")
@interface MBNavigationView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)prepareForInterfaceBuilder;
@end



@class MBDirections;
@class MGLMapCamera;
@protocol MBNavigationViewControllerDelegate;
@class MBRouteController;
@class MBNavigationLocationManager;

/// <code>NavigationViewController</code> is fully featured, turn by turn navigation UI.
/// It provides step by step instructions, an overview of all steps for the given route and support for basic styling.
SWIFT_CLASS_NAMED("NavigationViewController")
@interface MBNavigationViewController : UIViewController
/// \code
/// A `Route` object constructed by [MapboxDirections](https://mapbox.github.io/mapbox-navigation-ios/directions/).
///
/// In cases where you need to update the route after navigation has started you can set a new `route` here and `NavigationViewController` will update its UI accordingly.
///
/// \endcode
@property (nonatomic, strong) MBRoute * _Null_unspecified route;
/// \code
/// An instance of `MGLAnnotation` that will be shown on on the destination of your route. The last coordinate of the route will be used if no destination is given.
///
/// \endcode
@property (nonatomic, strong) id <MGLAnnotation> _Null_unspecified destination;
/// An instance of <code>Directions</code> need for rerouting. See <a href="https://mapbox.github.io/mapbox-navigation-ios/directions/">Mapbox Directions</a> for further information.
@property (nonatomic, strong) MBDirections * _Null_unspecified directions;
/// An optional <code>MGLMapCamera</code> you can use to improve the initial transition from a previous viewport and prevent a trigger from an excessive significant location update.
@property (nonatomic, strong) MGLMapCamera * _Nullable pendingCamera;
/// An instance of <code>MGLAnnotation</code> representing the origin of your route.
@property (nonatomic, strong) id <MGLAnnotation> _Nullable origin;
/// The receiver’s delegate.
@property (nonatomic, weak) id <MBNavigationViewControllerDelegate> _Nullable delegate;
/// Provides access to various speech synthesizer options.
/// See <code>RouteVoiceController</code> for more information.
@property (nonatomic, strong) MBRouteVoiceController * _Nullable voiceController;
/// Provides all routing logic for the user.
/// See <code>RouteController</code> for more information.
@property (nonatomic, strong) MBRouteController * _Null_unspecified routeController;
/// The main map view displayed inside the view controller.
/// note:
/// Do not change this map view’s delegate.
@property (nonatomic, readonly, strong) MBNavigationMapView * _Nullable mapView;
/// Determines whether the user location annotation is moved from the raw user location reported by the device to the nearest location along the route.
/// By default, this property is set to <code>true</code>, causing the user location annotation to be snapped to the route.
@property (nonatomic) BOOL snapsUserLocationAnnotationToRoute;
/// Toggles sending of UILocalNotification upon upcoming steps when application is in the background. Defaults to <code>true</code>.
@property (nonatomic) BOOL sendsNotifications;
/// Shows a button that allows drivers to report feedback such as accidents, closed roads,  poor instructions, etc. Defaults to <code>true</code>.
@property (nonatomic) BOOL showsReportFeedback;
/// Shows End of route Feedback UI when the route controller arrives at the final destination. Defaults to <code>true.</code>
@property (nonatomic) BOOL showsEndOfRouteFeedback;
/// If true, the map style and UI will automatically be updated given the time of day.
@property (nonatomic) BOOL automaticallyAdjustsStyleForTimeOfDay;
/// A Boolean value that determines whether the map annotates the locations at which instructions are spoken for debugging purposes.
@property (nonatomic) BOOL annotatesSpokenInstructions;
/// A Boolean value that indicates whether the dark style should apply when a route controller enters a tunnel.
@property (nonatomic) BOOL usesNightStyleInsideTunnels;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Initializes a <code>NavigationViewController</code> that provides turn by turn navigation for the given route. A optional <code>direction</code> object is needed for  potential rerouting.
/// See <a href="https://mapbox.github.io/mapbox-navigation-ios/directions/">Mapbox Directions</a> for further information.
- (nonnull instancetype)initWithRoute:(MBRoute * _Nonnull)route directions:(MBDirections * _Nonnull)directions style:(NSArray<MBStyle *> * _Nullable)styles locationManager:(MBNavigationLocationManager * _Nullable)locationManager OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end

@class MBStyleManager;

/// The <code>StyleManagerDelegate</code> protocol defines a set of methods used for controlling the style.
SWIFT_PROTOCOL_NAMED("StyleManagerDelegate")
@protocol MBStyleManagerDelegate <NSObject>
/// Asks the delegate for a location to use when calculating sunset and sunrise.
- (CLLocation * _Nonnull)locationForStyleManager:(MBStyleManager * _Nonnull)styleManager SWIFT_WARN_UNUSED_RESULT;
@optional
/// Informs the delegate that a style was applied.
- (void)styleManager:(MBStyleManager * _Nonnull)styleManager didApply:(MBStyle * _Nonnull)style;
/// Informs the delegate that the manager forcefully refreshed UIAppearance.
- (void)styleManagerDidRefreshAppearance:(MBStyleManager * _Nonnull)styleManager;
@end


@interface MBNavigationViewController (SWIFT_EXTENSION(MapboxNavigation)) <MBStyleManagerDelegate>
- (CLLocation * _Nonnull)locationForStyleManager:(MBStyleManager * _Nonnull)styleManager SWIFT_WARN_UNUSED_RESULT;
- (void)styleManager:(MBStyleManager * _Nonnull)styleManager didApply:(MBStyle * _Nonnull)style;
- (void)styleManagerDidRefreshAppearance:(MBStyleManager * _Nonnull)styleManager;
@end


@interface MBNavigationViewController (SWIFT_EXTENSION(MapboxNavigation)) <MBRouteControllerDelegate>
- (BOOL)routeController:(MBRouteController * _Nonnull)routeController shouldRerouteFromLocation:(CLLocation * _Nonnull)location SWIFT_WARN_UNUSED_RESULT;
- (void)routeController:(MBRouteController * _Nonnull)routeController willRerouteFromLocation:(CLLocation * _Nonnull)location;
- (void)routeController:(MBRouteController * _Nonnull)routeController didRerouteAlongRoute:(MBRoute * _Nonnull)route;
- (void)routeController:(MBRouteController * _Nonnull)routeController didFailToRerouteWithError:(NSError * _Nonnull)error;
- (BOOL)routeController:(MBRouteController * _Nonnull)routeController shouldDiscardLocation:(CLLocation * _Nonnull)location SWIFT_WARN_UNUSED_RESULT;
- (void)routeController:(MBRouteController * _Nonnull)routeController didUpdateLocations:(NSArray<CLLocation *> * _Nonnull)locations;
- (BOOL)routeController:(MBRouteController * _Nonnull)routeController didArriveAtWaypoint:(MBWaypoint * _Nonnull)waypoint SWIFT_WARN_UNUSED_RESULT;
@end


@interface MBNavigationViewController (SWIFT_EXTENSION(MapboxNavigation))
- (MGLStyleLayer * _Nullable)navigationMapView:(MBNavigationMapView * _Nonnull)mapView routeCasingStyleLayerWithIdentifier:(NSString * _Nonnull)identifier source:(MGLSource * _Nonnull)source SWIFT_WARN_UNUSED_RESULT;
- (MGLStyleLayer * _Nullable)navigationMapView:(MBNavigationMapView * _Nonnull)mapView routeStyleLayerWithIdentifier:(NSString * _Nonnull)identifier source:(MGLSource * _Nonnull)source SWIFT_WARN_UNUSED_RESULT;
- (MGLShape * _Nullable)navigationMapView:(MBNavigationMapView * _Nonnull)mapView shapeDescribingRoute:(MBRoute * _Nonnull)route SWIFT_WARN_UNUSED_RESULT;
- (MGLShape * _Nullable)navigationMapView:(MBNavigationMapView * _Nonnull)mapView simplifiedShapeDescribingRoute:(MBRoute * _Nonnull)route SWIFT_WARN_UNUSED_RESULT;
- (MGLStyleLayer * _Nullable)navigationMapView:(MBNavigationMapView * _Nonnull)mapView waypointStyleLayerWithIdentifier:(NSString * _Nonnull)identifier source:(MGLSource * _Nonnull)source SWIFT_WARN_UNUSED_RESULT;
- (MGLStyleLayer * _Nullable)navigationMapView:(MBNavigationMapView * _Nonnull)mapView waypointSymbolStyleLayerWithIdentifier:(NSString * _Nonnull)identifier source:(MGLSource * _Nonnull)source SWIFT_WARN_UNUSED_RESULT;
- (MGLShape * _Nullable)navigationMapView:(MBNavigationMapView * _Nonnull)mapView shapeDescribingWaypoints:(NSArray<MBWaypoint *> * _Nonnull)waypoints SWIFT_WARN_UNUSED_RESULT;
- (MGLAnnotationImage * _Nullable)navigationMapView:(MGLMapView * _Nonnull)mapView imageForAnnotation:(id <MGLAnnotation> _Nonnull)annotation SWIFT_WARN_UNUSED_RESULT;
- (MGLAnnotationView * _Nullable)navigationMapView:(MGLMapView * _Nonnull)mapView viewForAnnotation:(id <MGLAnnotation> _Nonnull)annotation SWIFT_WARN_UNUSED_RESULT;
- (CGPoint)navigationMapViewUserAnchorPoint:(MBNavigationMapView * _Nonnull)mapView SWIFT_WARN_UNUSED_RESULT;
@end


/// The <code>NavigationViewControllerDelegate</code> provides methods for configuring the map view shown by a <code>NavigationViewController</code> and responding to the cancellation of a navigation session.
SWIFT_PROTOCOL_NAMED("NavigationViewControllerDelegate")
@protocol MBNavigationViewControllerDelegate
@optional
/// Called when the user exits a route and dismisses the navigation view controller by tapping the Cancel button.
- (void)navigationViewControllerDidCancelNavigation:(MBNavigationViewController * _Nonnull)navigationViewController;
/// Called when the user arrives at the destination waypoint for a route leg.
/// This method is called when the navigation view controller arrives at the waypoint. You can implement this method to prevent the navigation view controller from automatically advancing to the next leg. For example, you can and show an interstitial sheet upon arrival and pause navigation by returning <code>false</code>, then continue the route when the user dismisses the sheet. If this method is unimplemented, the navigation view controller automatically advances to the next leg when arriving at a waypoint.
/// postcondition:
/// If you return <code>false</code> within this method, you must manually advance to the next leg: obtain the value of the <code>routeController</code> and its <code>RouteController.routeProgress</code> property, then increment the <code>RouteProgress.legIndex</code> property.
/// \param navigationViewController The navigation view controller that has arrived at a waypoint.
///
/// \param waypoint The waypoint that the user has arrived at.
///
///
/// returns:
/// True to automatically advance to the next leg, or false to remain on the now completed leg.
- (BOOL)navigationViewController:(MBNavigationViewController * _Nonnull)navigationViewController didArriveAt:(MBWaypoint * _Nonnull)waypoint SWIFT_WARN_UNUSED_RESULT;
/// Returns whether the navigation view controller should be allowed to calculate a new route.
/// If implemented, this method is called as soon as the navigation view controller detects that the user is off the predetermined route. Implement this method to conditionally prevent rerouting. If this method returns <code>true</code>, <code>navigationViewController(_:willRerouteFrom:)</code> will be called immediately afterwards.
/// \param navigationViewController The navigation view controller that has detected the need to calculate a new route.
///
/// \param location The user’s current location.
///
///
/// returns:
/// True to allow the navigation view controller to calculate a new route; false to keep tracking the current route.
- (BOOL)navigationViewController:(MBNavigationViewController * _Nonnull)navigationViewController shouldRerouteFromLocation:(CLLocation * _Nonnull)location SWIFT_WARN_UNUSED_RESULT;
/// Called immediately before the navigation view controller calculates a new route.
/// This method is called after <code>navigationViewController(_:shouldRerouteFrom:)</code> is called, simultaneously with the <code>RouteControllerWillReroute</code> notification being posted, and before <code>navigationViewController(_:didRerouteAlong:)</code> is called.
/// \param navigationViewController The navigation view controller that will calculate a new route.
///
/// \param location The user’s current location.
///
- (void)navigationViewController:(MBNavigationViewController * _Nonnull)navigationViewController willRerouteFromLocation:(CLLocation * _Nonnull)location;
/// Called immediately after the navigation view controller receives a new route.
/// This method is called after <code>navigationViewController(_:willRerouteFrom:)</code> and simultaneously with the <code>RouteControllerDidReroute</code> notification being posted.
/// \param navigationViewController The navigation view controller that has calculated a new route.
///
/// \param route The new route.
///
- (void)navigationViewController:(MBNavigationViewController * _Nonnull)navigationViewController didRerouteAlongRoute:(MBRoute * _Nonnull)route;
/// Called when the navigation view controller fails to receive a new route.
/// This method is called after <code>navigationViewController(_:willRerouteFrom:)</code> and simultaneously with the <code>RouteControllerDidFailToReroute</code> notification being posted.
/// \param navigationViewController The navigation view controller that has calculated a new route.
///
/// \param error An error raised during the process of obtaining a new route.
///
- (void)navigationViewController:(MBNavigationViewController * _Nonnull)navigationViewController didFailToRerouteWithError:(NSError * _Nonnull)error;
/// Returns an <code>MGLStyleLayer</code> that determines the appearance of the route line.
/// If this method is unimplemented, the navigation map view draws the route line using an <code>MGLLineStyleLayer</code>.
- (MGLStyleLayer * _Nullable)navigationMapView:(MBNavigationMapView * _Nonnull)mapView routeStyleLayerWithIdentifier:(NSString * _Nonnull)identifier source:(MGLSource * _Nonnull)source SWIFT_WARN_UNUSED_RESULT;
/// Returns an <code>MGLStyleLayer</code> that determines the appearance of the route line’s casing.
/// If this method is unimplemented, the navigation map view draws the route line’s casing using an <code>MGLLineStyleLayer</code> whose width is greater than that of the style layer returned by <code>navigationMapView(_:routeStyleLayerWithIdentifier:source:)</code>.
- (MGLStyleLayer * _Nullable)navigationMapView:(MBNavigationMapView * _Nonnull)mapView routeCasingStyleLayerWithIdentifier:(NSString * _Nonnull)identifier source:(MGLSource * _Nonnull)source SWIFT_WARN_UNUSED_RESULT;
/// Returns an <code>MGLShape</code> that represents the path of the route line.
/// If this method is unimplemented, the navigation map view represents the route line using an <code>MGLPolylineFeature</code> based on <code>route</code>’s <code>coordinates</code> property.
- (MGLShape * _Nullable)navigationMapView:(MBNavigationMapView * _Nonnull)mapView shapeDescribing:(MBRoute * _Nonnull)route SWIFT_WARN_UNUSED_RESULT;
/// Returns an <code>MGLShape</code> that represents the path of the route line’s casing.
/// If this method is unimplemented, the navigation map view represents the route line’s casing using an <code>MGLPolylineFeature</code> identical to the one returned by <code>navigationMapView(_:shapeDescribing:)</code>.
- (MGLShape * _Nullable)navigationMapView:(MBNavigationMapView * _Nonnull)mapView simplifiedShapeDescribing:(MBRoute * _Nonnull)route SWIFT_WARN_UNUSED_RESULT;
- (MGLStyleLayer * _Nullable)navigationMapView:(MBNavigationMapView * _Nonnull)mapView waypointStyleLayerWithIdentifier:(NSString * _Nonnull)identifier source:(MGLSource * _Nonnull)source SWIFT_WARN_UNUSED_RESULT;
- (MGLStyleLayer * _Nullable)navigationMapView:(MBNavigationMapView * _Nonnull)mapView waypointSymbolStyleLayerWithIdentifier:(NSString * _Nonnull)identifier source:(MGLSource * _Nonnull)source SWIFT_WARN_UNUSED_RESULT;
/// Returns an <code>MGLShape</code> that represents the destination waypoints along the route (that is, excluding the origin).
/// If this method is unimplemented, the navigation map view represents the route waypoints using <code>navigationMapView(_:shapeFor:)</code>.
- (MGLShape * _Nullable)navigationMapView:(MBNavigationMapView * _Nonnull)mapView shapeFor:(NSArray<MBWaypoint *> * _Nonnull)waypoints SWIFT_WARN_UNUSED_RESULT;
/// Called when the user taps on the route.
/// \param mapView The map view of the NavigationViewController
///
/// \param route The route (on the map) that was tapped.
///
- (void)navigationMapView:(MBNavigationMapView * _Nonnull)mapView didTap:(MBRoute * _Nonnull)route;
/// Return an <code>MGLAnnotationImage</code> that represents the destination marker.
/// If this method is unimplemented, the navigation map view will represent the destination annotation with the default marker.
- (MGLAnnotationImage * _Nullable)navigationMapView:(MGLMapView * _Nonnull)mapView imageFor:(id <MGLAnnotation> _Nonnull)annotation SWIFT_WARN_UNUSED_RESULT;
/// Returns a view object to mark the given point annotation object on the map.
/// The user location annotation view can also be customized via this method. When annotation is an instance of <code>MGLUserLocation</code>, return an instance of <code>MGLUserLocationAnnotationView</code> (or a subclass thereof). Note that, when <code>NavigationMapView.tracksUserCourse</code> is set to <code>true</code>, the map view uses a distinct user course view; to customize it, set the <code>NavigationMapView.userCourseView</code> property of the map view returned by this view controller’s <code>mapView</code> property.
- (MGLAnnotationView * _Nullable)navigationMapView:(MGLMapView * _Nonnull)mapView viewFor:(id <MGLAnnotation> _Nonnull)annotation SWIFT_WARN_UNUSED_RESULT;
/// Called when the user opens the feedback form.
- (void)navigationViewControllerDidOpenFeedback:(MBNavigationViewController * _Nonnull)viewController;
/// Called when the user dismisses the feedback form.
- (void)navigationViewControllerDidCancelFeedback:(MBNavigationViewController * _Nonnull)viewController;
/// Called when the user sends feedback.
/// \param viewController The navigation view controller that reported the feedback.
///
/// \param feedbackId A UUID string used to identify the feedback event.
///
/// \param feedbackType The type of feedback event that was sent.
///
- (void)navigationViewController:(MBNavigationViewController * _Nonnull)viewController didSend:(NSString * _Nonnull)feedbackId feedbackType:(enum MBFeedbackType)feedbackType;
/// Returns the center point of the user course view in screen coordinates relative to the map view.
- (CGPoint)navigationViewController:(MBNavigationViewController * _Nonnull)navigationViewController mapViewUserAnchorPoint:(MBNavigationMapView * _Nonnull)mapView SWIFT_WARN_UNUSED_RESULT;
/// Called when a location has been idenetified as unqualified to navigate on.
/// See <code>CLLocation.isQualified</code> for more information about what qualifies a location.
/// <ul>
///   <li>
///     return: If <code>true</code>, the location is discarded and the <code>NavigationViewController</code> will not consider it. If <code>false</code>, the location will not be thrown out.
///   </li>
/// </ul>
/// \param navigationViewController The navigation view controller that discarded the location.
///
/// \param location The location that will be discarded.
///
- (BOOL)navigationViewController:(MBNavigationViewController * _Nonnull)navigationViewController shouldDiscard:(CLLocation * _Nonnull)location SWIFT_WARN_UNUSED_RESULT;
@end


/// :nodoc:
SWIFT_CLASS_NAMED("NextBannerView")
@interface MBNextBannerView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)prepareForInterfaceBuilder;
@end


/// :nodoc:
SWIFT_CLASS_NAMED("NextInstructionLabel")
@interface MBNextInstructionLabel : MBInstructionLabel
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// <code>NightStyle</code> is the default night style for Mapbox Navigation SDK. Only will be applied when necessary and if <code>automaticallyAdjustStyleForSunPosition</code>.
SWIFT_CLASS_NAMED("NightStyle")
@interface MBNightStyle : MBDayStyle
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)apply;
@end


/// :nodoc:
SWIFT_CLASS_NAMED("PrimaryLabel")
@interface MBPrimaryLabel : MBInstructionLabel
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// :nodoc:
SWIFT_CLASS_NAMED("ProgressBar")
@interface MBProgressBar : UIView
@property (nonatomic, strong) UIColor * _Nonnull barColor;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (void)layoutSubviews;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// :nodoc:
SWIFT_CLASS_NAMED("ReportButton")
@interface MBReportButton : MBButton
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
@end


/// :nodoc:
SWIFT_CLASS_NAMED("ResumeButton")
@interface MBResumeButton : UIControl
@property (nonatomic, strong) UIColor * _Null_unspecified tintColor;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)prepareForInterfaceBuilder;
@end



/// :nodoc:
SWIFT_CLASS_NAMED("SecondaryLabel")
@interface MBSecondaryLabel : MBInstructionLabel
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// :nodoc:
SWIFT_CLASS_NAMED("SeparatorView")
@interface MBSeparatorView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end




/// :nodoc:
SWIFT_CLASS_NAMED("StatusView")
@interface MBStatusView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// :nodoc:
SWIFT_CLASS_NAMED("StepInstructionsView")
@interface MBStepInstructionsView : BaseInstructionsBannerView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// :nodoc:
SWIFT_CLASS_NAMED("StepTableViewCell")
@interface MBStepTableViewCell : UITableViewCell
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)prepareForReuse;
@end


SWIFT_CLASS_NAMED("StepsBackgroundView")
@interface MBStepsBackgroundView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// :nodoc:
SWIFT_CLASS_NAMED("StepsViewController")
@interface MBStepsViewController : UIViewController
- (void)viewDidLoad;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class UITableView;

@interface MBStepsViewController (SWIFT_EXTENSION(MapboxNavigation)) <UITableViewDelegate>
- (void)tableView:(UITableView * _Nonnull)tableView didSelectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end


@interface MBStepsViewController (SWIFT_EXTENSION(MapboxNavigation)) <UITableViewDataSource>
- (NSInteger)numberOfSectionsInTableView:(UITableView * _Nonnull)tableView SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)tableView:(UITableView * _Nonnull)tableView numberOfRowsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)tableView:(UITableView * _Nonnull)tableView heightForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)tableView:(UITableView * _Nonnull)tableView titleForHeaderInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
@end






SWIFT_CLASS_NAMED("StyleKitMarker")
@interface MBStyleKitMarker : NSObject
/// / Drawing Methods
+ (void)drawMarkerWithFrame:(CGRect)frame innerColor:(UIColor * _Nonnull)innerColor shadowColor:(UIColor * _Nonnull)shadowColor pinColor:(UIColor * _Nonnull)pinColor strokeColor:(UIColor * _Nonnull)strokeColor;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// A manager that handles <code>Style</code> objects. The manager listens for significant time changes
/// and changes to the content size to apply an approriate style for the given condition.
SWIFT_CLASS_NAMED("StyleManager")
@interface MBStyleManager : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


typedef SWIFT_ENUM_NAMED(NSInteger, MBStyleType, "StyleType") {
  MBStyleTypeDay = 0,
  MBStyleTypeNight = 1,
};


/// :nodoc:
SWIFT_CLASS_NAMED("SubtitleLabel")
@interface MBSubtitleLabel : MBStylableLabel
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// :nodoc:
SWIFT_CLASS_NAMED("TimeRemainingLabel")
@interface MBTimeRemainingLabel : MBStylableLabel
@property (nonatomic, strong) UIColor * _Nonnull trafficUnknownColor;
@property (nonatomic, strong) UIColor * _Nonnull trafficLowColor;
@property (nonatomic, strong) UIColor * _Nonnull trafficModerateColor;
@property (nonatomic, strong) UIColor * _Nonnull trafficHeavyColor;
@property (nonatomic, strong) UIColor * _Nonnull trafficSevereColor;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// :nodoc:
SWIFT_CLASS_NAMED("TitleLabel")
@interface MBTitleLabel : MBStylableLabel
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end








@interface UIDevice (SWIFT_EXTENSION(MapboxNavigation))
/// Returns a <code>Bool</code> whether the device is plugged in. Returns false if not an iOS device.
@property (nonatomic, readonly) BOOL isPluggedIn;
@end




@interface UIFont (SWIFT_EXTENSION(MapboxNavigation))
/// Returns an adjusted font for the <code>preferredContentSizeCategory</code>.
@property (nonatomic, readonly, strong) UIFont * _Nonnull adjustedFont;
@end




















/// A view that represents the user’s location and course on a <code>NavigationMapView</code>.
SWIFT_PROTOCOL_NAMED("UserCourseView")
@protocol MBUserCourseView
@optional
@property (nonatomic, strong) CLLocation * _Nonnull location;
@property (nonatomic) CLLocationDegrees direction;
@property (nonatomic) CLLocationDegrees pitch;
/// Updates the view to reflect the given location and other camera properties.
- (void)updateWithLocation:(CLLocation * _Nonnull)location pitch:(CGFloat)pitch direction:(CLLocationDegrees)direction animated:(BOOL)animated tracksUserCourse:(BOOL)tracksUserCourse;
@end


/// A view representing the user’s location on screen.
SWIFT_CLASS_NAMED("UserPuckCourseView")
@interface MBUserPuckCourseView : UIView <MBUserCourseView>
/// Transforms the location of the user puck.
- (void)updateWithLocation:(CLLocation * _Nonnull)location pitch:(CGFloat)pitch direction:(CLLocationDegrees)direction animated:(BOOL)animated tracksUserCourse:(BOOL)tracksUserCourse;
@property (nonatomic, strong) UIColor * _Nonnull puckColor;
@property (nonatomic, strong) UIColor * _Nonnull fillColor;
@property (nonatomic, strong) UIColor * _Nonnull shadowColor;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end



@class MBRouteProgress;

/// The <code>VoiceControllerDelegate</code> protocol defines methods that allow an object to respond to significant events related to spoken instructions.
SWIFT_PROTOCOL_NAMED("VoiceControllerDelegate")
@protocol MBVoiceControllerDelegate
@optional
/// Called when the voice controller failed to speak an instruction.
/// \param voiceController The voice controller that experienced the failure.
///
/// \param error An error explaining the failure and its cause. The <code>MBSpokenInstructionErrorCodeKey</code> key of the error’s user info dictionary is a <code>SpokenInstructionErrorCode</code> indicating the cause of the failure.
///
- (void)voiceController:(MBRouteVoiceController * _Nonnull)voiceController spokenInstrucionsDidFailWithError:(NSError * _Nonnull)error;
/// Called when one spoken instruction interrupts another instruction currently being spoken.
/// \param voiceController The voice controller that experienced the interruption.
///
/// \param interruptedInstruction The spoken instruction currently in progress that has been interrupted.
///
/// \param interruptingInstruction The spoken instruction that is interrupting the current instruction.
///
- (void)voiceController:(MBRouteVoiceController * _Nonnull)voiceController didInterruptSpokenInstruction:(MBSpokenInstruction * _Nonnull)interruptedInstruction withInstruction:(MBSpokenInstruction * _Nonnull)interruptingInstruction;
/// Called when a spoken is about to speak. Useful if it is necessary to give a custom instruction instead. Noting, changing the <code>distanceAlongStep</code> property on <code>SpokenInstruction</code> will have no impact on when the instruction will be said.
/// \code
/// - parameter voiceController: The voice controller that will speak an instruction.
/// - parameter instruction: The spoken instruction that will be said.
/// - parameter routeProgress: The `RouteProgress` just before when the instruction is scheduled to be spoken.
/// *
///
/// \endcode
- (MBSpokenInstruction * _Nullable)voiceController:(MBRouteVoiceController * _Nonnull)voiceController willSpeakSpokenInstruction:(MBSpokenInstruction * _Nonnull)instruction routeProgress:(MBRouteProgress * _Nonnull)routeProgress SWIFT_WARN_UNUSED_RESULT;
@end


/// :nodoc:
SWIFT_CLASS_NAMED("WayNameLabel")
@interface MBWayNameLabel : MBStylableLabel
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// :nodoc:
SWIFT_CLASS_NAMED("WayNameView")
@interface MBWayNameView : UIView
@property (nonatomic, strong) UIColor * _Nullable borderColor;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
@end



#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
